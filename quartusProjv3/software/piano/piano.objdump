
piano.elf:     file format elf32-littlenios2
piano.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005d1c memsz 0x00005d1c flags r-x
    LOAD off    0x00006d3c vaddr 0x00005d3c paddr 0x00007840 align 2**12
         filesz 0x00001b04 memsz 0x00001b04 flags rw-
    LOAD off    0x00009344 vaddr 0x00009344 paddr 0x00009344 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005a50  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a4  00005c98  00005c98  00006c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b04  00005d3c  00007840  00006d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00009344  00009344  00009344  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00009498  00009498  00008840  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08404000  08404000  00008840  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008840  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000009d0  00000000  00000000  00008868  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016e04  00000000  00000000  00009238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005fe7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006a41  00000000  00000000  00026023  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001718  00000000  00000000  0002ca64  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000028c9  00000000  00000000  0002e17c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000048aa  00000000  00000000  00030a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  000352f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000660  00000000  00000000  00035320  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000380e6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000380e9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000380f5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000380f6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000380f7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000380fb  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000380ff  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00038103  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0003810e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00038119  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00038124  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003c  00000000  00000000  0003812f  2**0
                  CONTENTS, READONLY
 30 .jdi          00005c74  00000000  00000000  0003816b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000af7b0  00000000  00000000  0003dddf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
00005c98 l    d  .rodata	00000000 .rodata
00005d3c l    d  .rwdata	00000000 .rwdata
00009344 l    d  .bss	00000000 .bss
00009498 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
08404000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../piano_bsp//obj/HAL/src/crt0.o
00000290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 piano.c
00000000 l    df *ABS*	00000000 alt_load.c
0000034c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000004e0 l     F .text	00000034 alt_dev_reg
00005d3c l     O .rwdata	00001060 jtag_uart_0
00006d9c l     O .rwdata	00000030 audio_and_video_config_0
00006dcc l     O .rwdata	00000030 audio_0
00006dfc l     O .rwdata	00000038 ps2_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000007f8 l     F .text	00000210 altera_avalon_jtag_uart_irq
00000a08 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001040 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000190c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001a60 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00001a8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001c30 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00001ef0 l     F .text	0000003c alt_get_errno
00001f2c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00006fdc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000043cc l     F .text	00000008 __fp_unlock
000043e0 l     F .text	0000019c __sinit.part.1
0000457c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00005658 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00005744 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00005824 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000597c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000783c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00005b64 l     F .text	0000003c alt_get_errno
0000935c g     O .bss	00000004 alt_instruction_exception_handler
0000535c g     F .text	00000054 _isatty_r
00000438 g     F .text	0000006c alt_main
00009398 g     O .bss	00000100 alt_irq
0000137c g     F .text	00000060 alt_up_ps2_disable_read_interrupt
000053b0 g     F .text	00000060 _lseek_r
00007840 g       *ABS*	00000000 __flash_rwdata_start
00009498 g       *ABS*	00000000 __alt_heap_start
000050e4 g     F .text	0000005c __sseek
0000471c g     F .text	00000010 __sinit
00001194 g     F .text	00000034 read_CE_bit
00004584 g     F .text	00000068 __sfmoreglue
00005958 g     F .text	00000024 __malloc_unlock
0000151c g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
000036a4 g     F .text	0000015c memmove
00004704 g     F .text	00000018 _cleanup
000004a4 g     F .text	0000003c alt_putstr
0000234c g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00005300 g     F .text	0000005c _fstat_r
00009360 g     O .bss	00000004 errno
00005060 g     F .text	00000008 __seofread
00009348 g     O .bss	00000004 alt_argv
0000f808 g       *ABS*	00000000 _gp
00006e5c g     O .rwdata	00000180 alt_fd_list
00001b6c g     F .text	00000090 alt_find_dev
0000355c g     F .text	00000148 memcpy
000043d4 g     F .text	0000000c _cleanup_r
00001cf4 g     F .text	0000007c alt_io_redirect
000025ac g     F .text	0000009c alt_exception_cause_generated_bad_addr
00000c00 g     F .text	0000021c altera_avalon_jtag_uart_read
08404000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00005568 g     F .text	00000064 .hidden __udivsi3
00005780 g     F .text	000000a4 isatty
0000251c g     F .text	00000090 alt_icache_flush
0000936c g     O .bss	00000004 __malloc_top_pad
00002734 g     F .text	000004bc __sfvwrite_r
00003d64 g     F .text	00000054 _sbrk_r
00005410 g     F .text	00000060 _read_r
00007818 g     O .rwdata	00000004 alt_max_fd
000051fc g     F .text	000000f0 _fclose_r
000011c8 g     F .text	00000030 read_num_bytes_available
0000439c g     F .text	00000030 fflush
00009368 g     O .bss	00000004 __malloc_max_sbrked_mem
00001d70 g     F .text	00000180 alt_irq_register
00001130 g     F .text	00000034 read_RI_bit
00005860 g     F .text	000000d4 lseek
0000782c g     O .rwdata	00000004 _global_impure_ptr
00003800 g     F .text	00000564 _realloc_r
00009498 g       *ABS*	00000000 __bss_end
00002244 g     F .text	00000108 alt_tick
0000122c g     F .text	0000002c read_data_byte
0000473c g     F .text	00000018 __fp_lock_all
000021a8 g     F .text	0000009c alt_alarm_stop
00001164 g     F .text	00000030 read_RE_bit
00009350 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d8 alt_irq_handler
00006e34 g     O .rwdata	00000028 alt_dev_null
000013dc g     F .text	00000074 alt_up_ps2_write_data_byte
00001a18 g     F .text	00000048 alt_dcache_flush_all
00007840 g       *ABS*	00000000 __ram_rwdata_end
00007810 g     O .rwdata	00000008 alt_dev_list
00005ba0 g     F .text	000000f8 write
00005d3c g       *ABS*	00000000 __ram_rodata_end
00005694 g     F .text	000000b0 fstat
000055cc g     F .text	00000058 .hidden __umodsi3
00009498 g       *ABS*	00000000 end
0000170c g     F .text	00000098 alt_up_ps2_write_fd
00000744 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
08000000 g       *ABS*	00000000 __alt_stack_pointer
000010bc g     F .text	00000074 alt_avalon_timer_sc_init
00000e1c g     F .text	00000224 altera_avalon_jtag_uart_write
0000472c g     F .text	00000004 __sfp_lock_acquire
000033fc g     F .text	000000e4 memchr
00004890 g     F .text	00000310 _free_r
00003fa4 g     F .text	00000180 __call_exitprocs
00007834 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000004c _start
00009354 g     O .bss	00000004 _alt_tick_rate
00009358 g     O .bss	00000004 _alt_nticks
000059b8 g     F .text	000000fc read
0000054c g     F .text	00000094 alt_sys_init
00001628 g     F .text	00000058 alt_up_ps2_clear_fifo
00000aa8 g     F .text	00000068 altera_avalon_jtag_uart_close
00005d3c g       *ABS*	00000000 __ram_rwdata_start
00005c98 g       *ABS*	00000000 __ram_rodata_start
00009370 g     O .bss	00000028 __malloc_current_mallinfo
000005e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00002478 g     F .text	000000a4 alt_get_fd
000051a8 g     F .text	00000054 _close_r
000034e0 g     F .text	0000007c memcmp
000006a0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00009498 g       *ABS*	00000000 __alt_stack_base
000006f0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00003e50 g     F .text	00000154 __swsetup_r
000045ec g     F .text	00000118 __sfp
00007400 g     O .rwdata	00000408 __malloc_av_
00004738 g     F .text	00000004 __sinit_lock_release
0000500c g     F .text	00000054 __sread
00002370 g     F .text	00000108 alt_find_file
00001ac8 g     F .text	000000a4 alt_dev_llist_insert
00005934 g     F .text	00000024 __malloc_lock
00005ab4 g     F .text	000000b0 sbrk
00004340 g     F .text	0000005c _fflush_r
00009344 g       *ABS*	00000000 __bss_start
00004ee4 g     F .text	00000128 memset
00000294 g     F .text	000000b8 main
0000934c g     O .bss	00000004 alt_envp
00009364 g     O .bss	00000004 __malloc_max_total_mem
00000640 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00005140 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
000052ec g     F .text	00000014 fclose
000015b8 g     F .text	00000070 alt_up_ps2_read_data_byte
00002bf0 g     F .text	0000080c _malloc_r
0000781c g     O .rwdata	00000004 alt_errno
00004ba0 g     F .text	000000c4 _fwalk
000017a4 g     F .text	0000003c alt_up_ps2_open_dev
00005470 g     F .text	00000084 .hidden __divsi3
0000476c g     F .text	00000124 _malloc_trim_r
00001320 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
00005c98 g       *ABS*	00000000 __flash_rodata_start
00000514 g     F .text	00000038 alt_irq_init
00002144 g     F .text	00000064 alt_release_fd
000011f8 g     F .text	00000034 read_data_valid
000014b8 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00005148 g     F .text	00000060 _write_r
00007830 g     O .rwdata	00000004 _impure_ptr
00009344 g     O .bss	00000004 alt_argc
00004124 g     F .text	0000021c __sflush_r
00000020 g       .exceptions	00000000 alt_irq_entry
00004754 g     F .text	00000018 __fp_unlock_all
00007808 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
00007840 g       *ABS*	00000000 _edata
00009498 g       *ABS*	00000000 _end
00000248 g       *ABS*	00000000 __ram_exceptions_end
00000b10 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00002680 g     F .text	0000009c _fputs_r
00005068 g     F .text	0000007c __swrite
00007838 g     O .rwdata	00000004 __malloc_trim_threshold
00002648 g     F .text	00000038 exit
00004c64 g     F .text	000000c4 _fwalk_reent
00001258 g     F .text	000000c8 alt_up_ps2_init
000054f4 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004730 g     F .text	00000004 __sfp_lock_release
00005624 g     F .text	00000034 _exit
000017e0 g     F .text	0000012c alt_alarm_start
00004d28 g     F .text	000001bc __smakebuf_r
00001450 g     F .text	00000068 alt_up_ps2_wait_for_ack
00003db8 g     F .text	00000098 strlen
00001ff0 g     F .text	00000154 open
00001bfc g     F .text	00000034 alt_icache_flush_all
0000271c g     F .text	00000018 fputs
00007820 g     O .rwdata	00000004 alt_priority_mask
00001680 g     F .text	0000008c alt_up_ps2_read_fd
00007824 g     O .rwdata	00000008 alt_alarm_list
00001948 g     F .text	000000d0 close
000003b4 g     F .text	00000084 alt_load
00004734 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_onchip_memory2_0+0xf7bfc004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800074 	movhi	r2,1
 140:	10a4e604 	addi	r2,r2,-27752
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10a4e604 	addi	r2,r2,-27752
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_onchip_memory2_0+0xf7bfc12c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_onchip_memory2_0+0xf7bfc120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a6d517 	ldw	r2,-25772(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a6d517 	ldw	r2,-25772(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     24c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     254:	00bffd16 	blt	zero,r2,24c <__alt_mem_onchip_memory2_0+0xf7bfc24c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     258:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     25c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     260:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     264:	d6be0214 	ori	gp,gp,63496
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     268:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     26c:	10a4d114 	ori	r2,r2,37700

    movhi r3, %hi(__bss_end)
     270:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     274:	18e52614 	ori	r3,r3,38040

    beq r2, r3, 1f
     278:	10c00326 	beq	r2,r3,288 <_start+0x40>

0:
    stw zero, (r2)
     27c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     284:	10fffd36 	bltu	r2,r3,27c <__alt_mem_onchip_memory2_0+0xf7bfc27c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     288:	00003b40 	call	3b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     28c:	00004380 	call	438 <alt_main>

00000290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     290:	003fff06 	br	290 <__alt_mem_onchip_memory2_0+0xf7bfc290>

00000294 <main>:
#include "sys/alt_dev.h"

void PS2_Contoller();

int main()
{
     294:	deffef04 	addi	sp,sp,-68
     298:	dfc01015 	stw	ra,64(sp)
     29c:	df000f15 	stw	fp,60(sp)
     2a0:	df000f04 	addi	fp,sp,60
    alt_putstr("program start");
     2a4:	01000034 	movhi	r4,0
     2a8:	21172604 	addi	r4,r4,23704
     2ac:	00004a40 	call	4a4 <alt_putstr>
    alt_up_ps2_dev ps2S = {PS2_0_BASE,PS2_0_IRQ,0,1}; //set type to keyboard
     2b0:	e03ff215 	stw	zero,-56(fp)
     2b4:	e03ff315 	stw	zero,-52(fp)
     2b8:	e03ff415 	stw	zero,-48(fp)
     2bc:	e03ff515 	stw	zero,-44(fp)
     2c0:	e03ff615 	stw	zero,-40(fp)
     2c4:	e03ff715 	stw	zero,-36(fp)
     2c8:	e03ff815 	stw	zero,-32(fp)
     2cc:	e03ff915 	stw	zero,-28(fp)
     2d0:	e03ffa15 	stw	zero,-24(fp)
     2d4:	e03ffb15 	stw	zero,-20(fp)
     2d8:	e03ffc15 	stw	zero,-16(fp)
     2dc:	e03ffd15 	stw	zero,-12(fp)
     2e0:	e03ffe15 	stw	zero,-8(fp)
     2e4:	e03fff15 	stw	zero,-4(fp)
     2e8:	00821074 	movhi	r2,2113
     2ec:	10a45204 	addi	r2,r2,-28344
     2f0:	e0bff215 	stw	r2,-56(fp)
     2f4:	00800104 	movi	r2,4
     2f8:	e0bff315 	stw	r2,-52(fp)
     2fc:	00800044 	movi	r2,1
     300:	e0bff515 	stw	r2,-44(fp)

    unsigned char psChar;
    //alt_up_ps2_init(&ps2S); //enables interupts
    alt_putstr("before while loop");
     304:	01000034 	movhi	r4,0
     308:	21172a04 	addi	r4,r4,23720
     30c:	00004a40 	call	4a4 <alt_putstr>
    while (1) //infinite while loop to wait for ints && IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE) == 0b01
    {
       // alt_up_ps2_read_data_byte(&ps2S, &psChar);
        psChar = IORD_8DIRECT(PS2_0_BASE, 0x0);
     310:	00821074 	movhi	r2,2113
     314:	10a45204 	addi	r2,r2,-28344
     318:	10800023 	ldbuio	r2,0(r2)
     31c:	10803fcc 	andi	r2,r2,255
     320:	e0bff105 	stb	r2,-60(fp)
        if (psChar == 'w' )
     324:	e0bff103 	ldbu	r2,-60(fp)
     328:	10801dd8 	cmpnei	r2,r2,119
     32c:	103ff81e 	bne	r2,zero,310 <__alt_mem_onchip_memory2_0+0xf7bfc310>
        {
            alt_putstr(psChar);
     330:	e0bff103 	ldbu	r2,-60(fp)
     334:	1009883a 	mov	r4,r2
     338:	00004a40 	call	4a4 <alt_putstr>
            alt_putstr("state reset");
     33c:	01000034 	movhi	r4,0
     340:	21172f04 	addi	r4,r4,23740
     344:	00004a40 	call	4a4 <alt_putstr>
        }
    }
     348:	003ff106 	br	310 <__alt_mem_onchip_memory2_0+0xf7bfc310>

0000034c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     34c:	defffc04 	addi	sp,sp,-16
     350:	df000315 	stw	fp,12(sp)
     354:	df000304 	addi	fp,sp,12
     358:	e13ffd15 	stw	r4,-12(fp)
     35c:	e17ffe15 	stw	r5,-8(fp)
     360:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     364:	e0fffe17 	ldw	r3,-8(fp)
     368:	e0bffd17 	ldw	r2,-12(fp)
     36c:	18800c26 	beq	r3,r2,3a0 <alt_load_section+0x54>
  {
    while( to != end )
     370:	00000806 	br	394 <alt_load_section+0x48>
    {
      *to++ = *from++;
     374:	e0bffe17 	ldw	r2,-8(fp)
     378:	10c00104 	addi	r3,r2,4
     37c:	e0fffe15 	stw	r3,-8(fp)
     380:	e0fffd17 	ldw	r3,-12(fp)
     384:	19000104 	addi	r4,r3,4
     388:	e13ffd15 	stw	r4,-12(fp)
     38c:	18c00017 	ldw	r3,0(r3)
     390:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     394:	e0fffe17 	ldw	r3,-8(fp)
     398:	e0bfff17 	ldw	r2,-4(fp)
     39c:	18bff51e 	bne	r3,r2,374 <__alt_mem_onchip_memory2_0+0xf7bfc374>
    {
      *to++ = *from++;
    }
  }
}
     3a0:	0001883a 	nop
     3a4:	e037883a 	mov	sp,fp
     3a8:	df000017 	ldw	fp,0(sp)
     3ac:	dec00104 	addi	sp,sp,4
     3b0:	f800283a 	ret

000003b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     3b4:	defffe04 	addi	sp,sp,-8
     3b8:	dfc00115 	stw	ra,4(sp)
     3bc:	df000015 	stw	fp,0(sp)
     3c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     3c4:	01800034 	movhi	r6,0
     3c8:	319e1004 	addi	r6,r6,30784
     3cc:	01400034 	movhi	r5,0
     3d0:	29574f04 	addi	r5,r5,23868
     3d4:	01000034 	movhi	r4,0
     3d8:	211e1004 	addi	r4,r4,30784
     3dc:	000034c0 	call	34c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     3e0:	01800034 	movhi	r6,0
     3e4:	31809204 	addi	r6,r6,584
     3e8:	01400034 	movhi	r5,0
     3ec:	29400804 	addi	r5,r5,32
     3f0:	01000034 	movhi	r4,0
     3f4:	21000804 	addi	r4,r4,32
     3f8:	000034c0 	call	34c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     3fc:	01800034 	movhi	r6,0
     400:	31974f04 	addi	r6,r6,23868
     404:	01400034 	movhi	r5,0
     408:	29572604 	addi	r5,r5,23704
     40c:	01000034 	movhi	r4,0
     410:	21172604 	addi	r4,r4,23704
     414:	000034c0 	call	34c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     418:	0001a180 	call	1a18 <alt_dcache_flush_all>
  alt_icache_flush_all();
     41c:	0001bfc0 	call	1bfc <alt_icache_flush_all>
}
     420:	0001883a 	nop
     424:	e037883a 	mov	sp,fp
     428:	dfc00117 	ldw	ra,4(sp)
     42c:	df000017 	ldw	fp,0(sp)
     430:	dec00204 	addi	sp,sp,8
     434:	f800283a 	ret

00000438 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     438:	defffd04 	addi	sp,sp,-12
     43c:	dfc00215 	stw	ra,8(sp)
     440:	df000115 	stw	fp,4(sp)
     444:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     448:	0009883a 	mov	r4,zero
     44c:	00005140 	call	514 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     450:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     454:	000054c0 	call	54c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     458:	01800034 	movhi	r6,0
     45c:	31973204 	addi	r6,r6,23752
     460:	01400034 	movhi	r5,0
     464:	29573204 	addi	r5,r5,23752
     468:	01000034 	movhi	r4,0
     46c:	21173204 	addi	r4,r4,23752
     470:	0001cf40 	call	1cf4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     474:	d0a6cf17 	ldw	r2,-25796(gp)
     478:	d0e6d017 	ldw	r3,-25792(gp)
     47c:	d126d117 	ldw	r4,-25788(gp)
     480:	200d883a 	mov	r6,r4
     484:	180b883a 	mov	r5,r3
     488:	1009883a 	mov	r4,r2
     48c:	00002940 	call	294 <main>
     490:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     494:	01000044 	movi	r4,1
     498:	00019480 	call	1948 <close>
  exit (result);
     49c:	e13fff17 	ldw	r4,-4(fp)
     4a0:	00026480 	call	2648 <exit>

000004a4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
     4a4:	defffd04 	addi	sp,sp,-12
     4a8:	dfc00215 	stw	ra,8(sp)
     4ac:	df000115 	stw	fp,4(sp)
     4b0:	df000104 	addi	fp,sp,4
     4b4:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
     4b8:	d0a00a17 	ldw	r2,-32728(gp)
     4bc:	10800217 	ldw	r2,8(r2)
     4c0:	100b883a 	mov	r5,r2
     4c4:	e13fff17 	ldw	r4,-4(fp)
     4c8:	000271c0 	call	271c <fputs>
#endif
#endif
}
     4cc:	e037883a 	mov	sp,fp
     4d0:	dfc00117 	ldw	ra,4(sp)
     4d4:	df000017 	ldw	fp,0(sp)
     4d8:	dec00204 	addi	sp,sp,8
     4dc:	f800283a 	ret

000004e0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     4e0:	defffd04 	addi	sp,sp,-12
     4e4:	dfc00215 	stw	ra,8(sp)
     4e8:	df000115 	stw	fp,4(sp)
     4ec:	df000104 	addi	fp,sp,4
     4f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     4f4:	d1600204 	addi	r5,gp,-32760
     4f8:	e13fff17 	ldw	r4,-4(fp)
     4fc:	0001ac80 	call	1ac8 <alt_dev_llist_insert>
}
     500:	e037883a 	mov	sp,fp
     504:	dfc00117 	ldw	ra,4(sp)
     508:	df000017 	ldw	fp,0(sp)
     50c:	dec00204 	addi	sp,sp,8
     510:	f800283a 	ret

00000514 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     514:	defffd04 	addi	sp,sp,-12
     518:	dfc00215 	stw	ra,8(sp)
     51c:	df000115 	stw	fp,4(sp)
     520:	df000104 	addi	fp,sp,4
     524:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
     528:	000234c0 	call	234c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     52c:	00800044 	movi	r2,1
     530:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     534:	0001883a 	nop
     538:	e037883a 	mov	sp,fp
     53c:	dfc00117 	ldw	ra,4(sp)
     540:	df000017 	ldw	fp,0(sp)
     544:	dec00204 	addi	sp,sp,8
     548:	f800283a 	ret

0000054c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     54c:	defffe04 	addi	sp,sp,-8
     550:	dfc00115 	stw	ra,4(sp)
     554:	df000015 	stw	fp,0(sp)
     558:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIRES_TIMER_0, hires_timer_0);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
     55c:	01c0fa04 	movi	r7,1000
     560:	01800044 	movi	r6,1
     564:	000b883a 	mov	r5,zero
     568:	01021074 	movhi	r4,2113
     56c:	21240804 	addi	r4,r4,-28640
     570:	00010bc0 	call	10bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
     574:	000d883a 	mov	r6,zero
     578:	000b883a 	mov	r5,zero
     57c:	01000034 	movhi	r4,0
     580:	21175904 	addi	r4,r4,23908
     584:	00007440 	call	744 <altera_avalon_jtag_uart_init>
     588:	01000034 	movhi	r4,0
     58c:	21174f04 	addi	r4,r4,23868
     590:	00004e00 	call	4e0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
     594:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
     598:	01000034 	movhi	r4,0
     59c:	211b6704 	addi	r4,r4,28060
     5a0:	00004e00 	call	4e0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
     5a4:	01000034 	movhi	r4,0
     5a8:	211b7304 	addi	r4,r4,28108
     5ac:	00004e00 	call	4e0 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_0, ps2_0);
     5b0:	01000034 	movhi	r4,0
     5b4:	211b7f04 	addi	r4,r4,28156
     5b8:	00012580 	call	1258 <alt_up_ps2_init>
     5bc:	01000034 	movhi	r4,0
     5c0:	211b7f04 	addi	r4,r4,28156
     5c4:	00004e00 	call	4e0 <alt_dev_reg>
}
     5c8:	0001883a 	nop
     5cc:	e037883a 	mov	sp,fp
     5d0:	dfc00117 	ldw	ra,4(sp)
     5d4:	df000017 	ldw	fp,0(sp)
     5d8:	dec00204 	addi	sp,sp,8
     5dc:	f800283a 	ret

000005e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     5e0:	defffa04 	addi	sp,sp,-24
     5e4:	dfc00515 	stw	ra,20(sp)
     5e8:	df000415 	stw	fp,16(sp)
     5ec:	df000404 	addi	fp,sp,16
     5f0:	e13ffd15 	stw	r4,-12(fp)
     5f4:	e17ffe15 	stw	r5,-8(fp)
     5f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     5fc:	e0bffd17 	ldw	r2,-12(fp)
     600:	10800017 	ldw	r2,0(r2)
     604:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     608:	e0bffc17 	ldw	r2,-16(fp)
     60c:	10c00a04 	addi	r3,r2,40
     610:	e0bffd17 	ldw	r2,-12(fp)
     614:	10800217 	ldw	r2,8(r2)
     618:	100f883a 	mov	r7,r2
     61c:	e1bfff17 	ldw	r6,-4(fp)
     620:	e17ffe17 	ldw	r5,-8(fp)
     624:	1809883a 	mov	r4,r3
     628:	0000c000 	call	c00 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     62c:	e037883a 	mov	sp,fp
     630:	dfc00117 	ldw	ra,4(sp)
     634:	df000017 	ldw	fp,0(sp)
     638:	dec00204 	addi	sp,sp,8
     63c:	f800283a 	ret

00000640 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     640:	defffa04 	addi	sp,sp,-24
     644:	dfc00515 	stw	ra,20(sp)
     648:	df000415 	stw	fp,16(sp)
     64c:	df000404 	addi	fp,sp,16
     650:	e13ffd15 	stw	r4,-12(fp)
     654:	e17ffe15 	stw	r5,-8(fp)
     658:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     65c:	e0bffd17 	ldw	r2,-12(fp)
     660:	10800017 	ldw	r2,0(r2)
     664:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     668:	e0bffc17 	ldw	r2,-16(fp)
     66c:	10c00a04 	addi	r3,r2,40
     670:	e0bffd17 	ldw	r2,-12(fp)
     674:	10800217 	ldw	r2,8(r2)
     678:	100f883a 	mov	r7,r2
     67c:	e1bfff17 	ldw	r6,-4(fp)
     680:	e17ffe17 	ldw	r5,-8(fp)
     684:	1809883a 	mov	r4,r3
     688:	0000e1c0 	call	e1c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     68c:	e037883a 	mov	sp,fp
     690:	dfc00117 	ldw	ra,4(sp)
     694:	df000017 	ldw	fp,0(sp)
     698:	dec00204 	addi	sp,sp,8
     69c:	f800283a 	ret

000006a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     6a0:	defffc04 	addi	sp,sp,-16
     6a4:	dfc00315 	stw	ra,12(sp)
     6a8:	df000215 	stw	fp,8(sp)
     6ac:	df000204 	addi	fp,sp,8
     6b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     6b4:	e0bfff17 	ldw	r2,-4(fp)
     6b8:	10800017 	ldw	r2,0(r2)
     6bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     6c0:	e0bffe17 	ldw	r2,-8(fp)
     6c4:	10c00a04 	addi	r3,r2,40
     6c8:	e0bfff17 	ldw	r2,-4(fp)
     6cc:	10800217 	ldw	r2,8(r2)
     6d0:	100b883a 	mov	r5,r2
     6d4:	1809883a 	mov	r4,r3
     6d8:	0000aa80 	call	aa8 <altera_avalon_jtag_uart_close>
}
     6dc:	e037883a 	mov	sp,fp
     6e0:	dfc00117 	ldw	ra,4(sp)
     6e4:	df000017 	ldw	fp,0(sp)
     6e8:	dec00204 	addi	sp,sp,8
     6ec:	f800283a 	ret

000006f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     6f0:	defffa04 	addi	sp,sp,-24
     6f4:	dfc00515 	stw	ra,20(sp)
     6f8:	df000415 	stw	fp,16(sp)
     6fc:	df000404 	addi	fp,sp,16
     700:	e13ffd15 	stw	r4,-12(fp)
     704:	e17ffe15 	stw	r5,-8(fp)
     708:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     70c:	e0bffd17 	ldw	r2,-12(fp)
     710:	10800017 	ldw	r2,0(r2)
     714:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     718:	e0bffc17 	ldw	r2,-16(fp)
     71c:	10800a04 	addi	r2,r2,40
     720:	e1bfff17 	ldw	r6,-4(fp)
     724:	e17ffe17 	ldw	r5,-8(fp)
     728:	1009883a 	mov	r4,r2
     72c:	0000b100 	call	b10 <altera_avalon_jtag_uart_ioctl>
}
     730:	e037883a 	mov	sp,fp
     734:	dfc00117 	ldw	ra,4(sp)
     738:	df000017 	ldw	fp,0(sp)
     73c:	dec00204 	addi	sp,sp,8
     740:	f800283a 	ret

00000744 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     744:	defffb04 	addi	sp,sp,-20
     748:	dfc00415 	stw	ra,16(sp)
     74c:	df000315 	stw	fp,12(sp)
     750:	df000304 	addi	fp,sp,12
     754:	e13ffd15 	stw	r4,-12(fp)
     758:	e17ffe15 	stw	r5,-8(fp)
     75c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     760:	e0bffd17 	ldw	r2,-12(fp)
     764:	00c00044 	movi	r3,1
     768:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     76c:	e0bffd17 	ldw	r2,-12(fp)
     770:	10800017 	ldw	r2,0(r2)
     774:	10800104 	addi	r2,r2,4
     778:	1007883a 	mov	r3,r2
     77c:	e0bffd17 	ldw	r2,-12(fp)
     780:	10800817 	ldw	r2,32(r2)
     784:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     788:	e0bfff17 	ldw	r2,-4(fp)
     78c:	01800034 	movhi	r6,0
     790:	3181fe04 	addi	r6,r6,2040
     794:	e17ffd17 	ldw	r5,-12(fp)
     798:	1009883a 	mov	r4,r2
     79c:	0001d700 	call	1d70 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     7a0:	e0bffd17 	ldw	r2,-12(fp)
     7a4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     7a8:	e0bffd17 	ldw	r2,-12(fp)
     7ac:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     7b0:	d0e6d317 	ldw	r3,-25780(gp)
     7b4:	e1fffd17 	ldw	r7,-12(fp)
     7b8:	01800034 	movhi	r6,0
     7bc:	31828204 	addi	r6,r6,2568
     7c0:	180b883a 	mov	r5,r3
     7c4:	1009883a 	mov	r4,r2
     7c8:	00017e00 	call	17e0 <alt_alarm_start>
     7cc:	1000040e 	bge	r2,zero,7e0 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     7d0:	e0fffd17 	ldw	r3,-12(fp)
     7d4:	00a00034 	movhi	r2,32768
     7d8:	10bfffc4 	addi	r2,r2,-1
     7dc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     7e0:	0001883a 	nop
     7e4:	e037883a 	mov	sp,fp
     7e8:	dfc00117 	ldw	ra,4(sp)
     7ec:	df000017 	ldw	fp,0(sp)
     7f0:	dec00204 	addi	sp,sp,8
     7f4:	f800283a 	ret

000007f8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     7f8:	defff704 	addi	sp,sp,-36
     7fc:	df000815 	stw	fp,32(sp)
     800:	df000804 	addi	fp,sp,32
     804:	e13ffe15 	stw	r4,-8(fp)
     808:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     80c:	e0bffe17 	ldw	r2,-8(fp)
     810:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
     814:	e0bffa17 	ldw	r2,-24(fp)
     818:	10800017 	ldw	r2,0(r2)
     81c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     820:	e0bffb17 	ldw	r2,-20(fp)
     824:	10800104 	addi	r2,r2,4
     828:	10800037 	ldwio	r2,0(r2)
     82c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     830:	e0bffc17 	ldw	r2,-16(fp)
     834:	1080c00c 	andi	r2,r2,768
     838:	10006d26 	beq	r2,zero,9f0 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     83c:	e0bffc17 	ldw	r2,-16(fp)
     840:	1080400c 	andi	r2,r2,256
     844:	10003526 	beq	r2,zero,91c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     848:	00800074 	movhi	r2,1
     84c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     850:	e0bffa17 	ldw	r2,-24(fp)
     854:	10800a17 	ldw	r2,40(r2)
     858:	10800044 	addi	r2,r2,1
     85c:	1081ffcc 	andi	r2,r2,2047
     860:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
     864:	e0bffa17 	ldw	r2,-24(fp)
     868:	10c00b17 	ldw	r3,44(r2)
     86c:	e0bffd17 	ldw	r2,-12(fp)
     870:	18801526 	beq	r3,r2,8c8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     874:	e0bffb17 	ldw	r2,-20(fp)
     878:	10800037 	ldwio	r2,0(r2)
     87c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     880:	e0bff817 	ldw	r2,-32(fp)
     884:	10a0000c 	andi	r2,r2,32768
     888:	10001126 	beq	r2,zero,8d0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     88c:	e0bffa17 	ldw	r2,-24(fp)
     890:	10800a17 	ldw	r2,40(r2)
     894:	e0fff817 	ldw	r3,-32(fp)
     898:	1809883a 	mov	r4,r3
     89c:	e0fffa17 	ldw	r3,-24(fp)
     8a0:	1885883a 	add	r2,r3,r2
     8a4:	10800e04 	addi	r2,r2,56
     8a8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     8ac:	e0bffa17 	ldw	r2,-24(fp)
     8b0:	10800a17 	ldw	r2,40(r2)
     8b4:	10800044 	addi	r2,r2,1
     8b8:	10c1ffcc 	andi	r3,r2,2047
     8bc:	e0bffa17 	ldw	r2,-24(fp)
     8c0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     8c4:	003fe206 	br	850 <__alt_mem_onchip_memory2_0+0xf7bfc850>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
     8c8:	0001883a 	nop
     8cc:	00000106 	br	8d4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
     8d0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     8d4:	e0bff817 	ldw	r2,-32(fp)
     8d8:	10bfffec 	andhi	r2,r2,65535
     8dc:	10000f26 	beq	r2,zero,91c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     8e0:	e0bffa17 	ldw	r2,-24(fp)
     8e4:	10c00817 	ldw	r3,32(r2)
     8e8:	00bfff84 	movi	r2,-2
     8ec:	1886703a 	and	r3,r3,r2
     8f0:	e0bffa17 	ldw	r2,-24(fp)
     8f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     8f8:	e0bffb17 	ldw	r2,-20(fp)
     8fc:	10800104 	addi	r2,r2,4
     900:	1007883a 	mov	r3,r2
     904:	e0bffa17 	ldw	r2,-24(fp)
     908:	10800817 	ldw	r2,32(r2)
     90c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     910:	e0bffb17 	ldw	r2,-20(fp)
     914:	10800104 	addi	r2,r2,4
     918:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     91c:	e0bffc17 	ldw	r2,-16(fp)
     920:	1080800c 	andi	r2,r2,512
     924:	103fbe26 	beq	r2,zero,820 <__alt_mem_onchip_memory2_0+0xf7bfc820>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     928:	e0bffc17 	ldw	r2,-16(fp)
     92c:	1004d43a 	srli	r2,r2,16
     930:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     934:	00001406 	br	988 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     938:	e0bffb17 	ldw	r2,-20(fp)
     93c:	e0fffa17 	ldw	r3,-24(fp)
     940:	18c00d17 	ldw	r3,52(r3)
     944:	e13ffa17 	ldw	r4,-24(fp)
     948:	20c7883a 	add	r3,r4,r3
     94c:	18c20e04 	addi	r3,r3,2104
     950:	18c00003 	ldbu	r3,0(r3)
     954:	18c03fcc 	andi	r3,r3,255
     958:	18c0201c 	xori	r3,r3,128
     95c:	18ffe004 	addi	r3,r3,-128
     960:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     964:	e0bffa17 	ldw	r2,-24(fp)
     968:	10800d17 	ldw	r2,52(r2)
     96c:	10800044 	addi	r2,r2,1
     970:	10c1ffcc 	andi	r3,r2,2047
     974:	e0bffa17 	ldw	r2,-24(fp)
     978:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     97c:	e0bff917 	ldw	r2,-28(fp)
     980:	10bfffc4 	addi	r2,r2,-1
     984:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     988:	e0bff917 	ldw	r2,-28(fp)
     98c:	10000526 	beq	r2,zero,9a4 <altera_avalon_jtag_uart_irq+0x1ac>
     990:	e0bffa17 	ldw	r2,-24(fp)
     994:	10c00d17 	ldw	r3,52(r2)
     998:	e0bffa17 	ldw	r2,-24(fp)
     99c:	10800c17 	ldw	r2,48(r2)
     9a0:	18bfe51e 	bne	r3,r2,938 <__alt_mem_onchip_memory2_0+0xf7bfc938>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     9a4:	e0bff917 	ldw	r2,-28(fp)
     9a8:	103f9d26 	beq	r2,zero,820 <__alt_mem_onchip_memory2_0+0xf7bfc820>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     9ac:	e0bffa17 	ldw	r2,-24(fp)
     9b0:	10c00817 	ldw	r3,32(r2)
     9b4:	00bfff44 	movi	r2,-3
     9b8:	1886703a 	and	r3,r3,r2
     9bc:	e0bffa17 	ldw	r2,-24(fp)
     9c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     9c4:	e0bffa17 	ldw	r2,-24(fp)
     9c8:	10800017 	ldw	r2,0(r2)
     9cc:	10800104 	addi	r2,r2,4
     9d0:	1007883a 	mov	r3,r2
     9d4:	e0bffa17 	ldw	r2,-24(fp)
     9d8:	10800817 	ldw	r2,32(r2)
     9dc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     9e0:	e0bffb17 	ldw	r2,-20(fp)
     9e4:	10800104 	addi	r2,r2,4
     9e8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
     9ec:	003f8c06 	br	820 <__alt_mem_onchip_memory2_0+0xf7bfc820>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
     9f0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
     9f4:	0001883a 	nop
     9f8:	e037883a 	mov	sp,fp
     9fc:	df000017 	ldw	fp,0(sp)
     a00:	dec00104 	addi	sp,sp,4
     a04:	f800283a 	ret

00000a08 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     a08:	defff804 	addi	sp,sp,-32
     a0c:	df000715 	stw	fp,28(sp)
     a10:	df000704 	addi	fp,sp,28
     a14:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     a18:	e0bffb17 	ldw	r2,-20(fp)
     a1c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     a20:	e0bff917 	ldw	r2,-28(fp)
     a24:	10800017 	ldw	r2,0(r2)
     a28:	10800104 	addi	r2,r2,4
     a2c:	10800037 	ldwio	r2,0(r2)
     a30:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     a34:	e0bffa17 	ldw	r2,-24(fp)
     a38:	1081000c 	andi	r2,r2,1024
     a3c:	10000b26 	beq	r2,zero,a6c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     a40:	e0bff917 	ldw	r2,-28(fp)
     a44:	10800017 	ldw	r2,0(r2)
     a48:	10800104 	addi	r2,r2,4
     a4c:	1007883a 	mov	r3,r2
     a50:	e0bff917 	ldw	r2,-28(fp)
     a54:	10800817 	ldw	r2,32(r2)
     a58:	10810014 	ori	r2,r2,1024
     a5c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     a60:	e0bff917 	ldw	r2,-28(fp)
     a64:	10000915 	stw	zero,36(r2)
     a68:	00000a06 	br	a94 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     a6c:	e0bff917 	ldw	r2,-28(fp)
     a70:	10c00917 	ldw	r3,36(r2)
     a74:	00a00034 	movhi	r2,32768
     a78:	10bfff04 	addi	r2,r2,-4
     a7c:	10c00536 	bltu	r2,r3,a94 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
     a80:	e0bff917 	ldw	r2,-28(fp)
     a84:	10800917 	ldw	r2,36(r2)
     a88:	10c00044 	addi	r3,r2,1
     a8c:	e0bff917 	ldw	r2,-28(fp)
     a90:	10c00915 	stw	r3,36(r2)
     a94:	d0a6d317 	ldw	r2,-25780(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     a98:	e037883a 	mov	sp,fp
     a9c:	df000017 	ldw	fp,0(sp)
     aa0:	dec00104 	addi	sp,sp,4
     aa4:	f800283a 	ret

00000aa8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     aa8:	defffd04 	addi	sp,sp,-12
     aac:	df000215 	stw	fp,8(sp)
     ab0:	df000204 	addi	fp,sp,8
     ab4:	e13ffe15 	stw	r4,-8(fp)
     ab8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     abc:	00000506 	br	ad4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
     ac0:	e0bfff17 	ldw	r2,-4(fp)
     ac4:	1090000c 	andi	r2,r2,16384
     ac8:	10000226 	beq	r2,zero,ad4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
     acc:	00bffd44 	movi	r2,-11
     ad0:	00000b06 	br	b00 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     ad4:	e0bffe17 	ldw	r2,-8(fp)
     ad8:	10c00d17 	ldw	r3,52(r2)
     adc:	e0bffe17 	ldw	r2,-8(fp)
     ae0:	10800c17 	ldw	r2,48(r2)
     ae4:	18800526 	beq	r3,r2,afc <altera_avalon_jtag_uart_close+0x54>
     ae8:	e0bffe17 	ldw	r2,-8(fp)
     aec:	10c00917 	ldw	r3,36(r2)
     af0:	e0bffe17 	ldw	r2,-8(fp)
     af4:	10800117 	ldw	r2,4(r2)
     af8:	18bff136 	bltu	r3,r2,ac0 <__alt_mem_onchip_memory2_0+0xf7bfcac0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
     afc:	0005883a 	mov	r2,zero
}
     b00:	e037883a 	mov	sp,fp
     b04:	df000017 	ldw	fp,0(sp)
     b08:	dec00104 	addi	sp,sp,4
     b0c:	f800283a 	ret

00000b10 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     b10:	defffa04 	addi	sp,sp,-24
     b14:	df000515 	stw	fp,20(sp)
     b18:	df000504 	addi	fp,sp,20
     b1c:	e13ffd15 	stw	r4,-12(fp)
     b20:	e17ffe15 	stw	r5,-8(fp)
     b24:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
     b28:	00bff9c4 	movi	r2,-25
     b2c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
     b30:	e0bffe17 	ldw	r2,-8(fp)
     b34:	10da8060 	cmpeqi	r3,r2,27137
     b38:	1800031e 	bne	r3,zero,b48 <altera_avalon_jtag_uart_ioctl+0x38>
     b3c:	109a80a0 	cmpeqi	r2,r2,27138
     b40:	1000181e 	bne	r2,zero,ba4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
     b44:	00002906 	br	bec <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     b48:	e0bffd17 	ldw	r2,-12(fp)
     b4c:	10c00117 	ldw	r3,4(r2)
     b50:	00a00034 	movhi	r2,32768
     b54:	10bfffc4 	addi	r2,r2,-1
     b58:	18802126 	beq	r3,r2,be0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
     b5c:	e0bfff17 	ldw	r2,-4(fp)
     b60:	10800017 	ldw	r2,0(r2)
     b64:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     b68:	e0bffc17 	ldw	r2,-16(fp)
     b6c:	10800090 	cmplti	r2,r2,2
     b70:	1000061e 	bne	r2,zero,b8c <altera_avalon_jtag_uart_ioctl+0x7c>
     b74:	e0fffc17 	ldw	r3,-16(fp)
     b78:	00a00034 	movhi	r2,32768
     b7c:	10bfffc4 	addi	r2,r2,-1
     b80:	18800226 	beq	r3,r2,b8c <altera_avalon_jtag_uart_ioctl+0x7c>
     b84:	e0bffc17 	ldw	r2,-16(fp)
     b88:	00000206 	br	b94 <altera_avalon_jtag_uart_ioctl+0x84>
     b8c:	00a00034 	movhi	r2,32768
     b90:	10bfff84 	addi	r2,r2,-2
     b94:	e0fffd17 	ldw	r3,-12(fp)
     b98:	18800115 	stw	r2,4(r3)
      rc = 0;
     b9c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     ba0:	00000f06 	br	be0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     ba4:	e0bffd17 	ldw	r2,-12(fp)
     ba8:	10c00117 	ldw	r3,4(r2)
     bac:	00a00034 	movhi	r2,32768
     bb0:	10bfffc4 	addi	r2,r2,-1
     bb4:	18800c26 	beq	r3,r2,be8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     bb8:	e0bffd17 	ldw	r2,-12(fp)
     bbc:	10c00917 	ldw	r3,36(r2)
     bc0:	e0bffd17 	ldw	r2,-12(fp)
     bc4:	10800117 	ldw	r2,4(r2)
     bc8:	1885803a 	cmpltu	r2,r3,r2
     bcc:	10c03fcc 	andi	r3,r2,255
     bd0:	e0bfff17 	ldw	r2,-4(fp)
     bd4:	10c00015 	stw	r3,0(r2)
      rc = 0;
     bd8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     bdc:	00000206 	br	be8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
     be0:	0001883a 	nop
     be4:	00000106 	br	bec <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
     be8:	0001883a 	nop

  default:
    break;
  }

  return rc;
     bec:	e0bffb17 	ldw	r2,-20(fp)
}
     bf0:	e037883a 	mov	sp,fp
     bf4:	df000017 	ldw	fp,0(sp)
     bf8:	dec00104 	addi	sp,sp,4
     bfc:	f800283a 	ret

00000c00 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     c00:	defff304 	addi	sp,sp,-52
     c04:	dfc00c15 	stw	ra,48(sp)
     c08:	df000b15 	stw	fp,44(sp)
     c0c:	df000b04 	addi	fp,sp,44
     c10:	e13ffc15 	stw	r4,-16(fp)
     c14:	e17ffd15 	stw	r5,-12(fp)
     c18:	e1bffe15 	stw	r6,-8(fp)
     c1c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
     c20:	e0bffd17 	ldw	r2,-12(fp)
     c24:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     c28:	00004706 	br	d48 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     c2c:	e0bffc17 	ldw	r2,-16(fp)
     c30:	10800a17 	ldw	r2,40(r2)
     c34:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
     c38:	e0bffc17 	ldw	r2,-16(fp)
     c3c:	10800b17 	ldw	r2,44(r2)
     c40:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
     c44:	e0fff717 	ldw	r3,-36(fp)
     c48:	e0bff817 	ldw	r2,-32(fp)
     c4c:	18800536 	bltu	r3,r2,c64 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
     c50:	e0fff717 	ldw	r3,-36(fp)
     c54:	e0bff817 	ldw	r2,-32(fp)
     c58:	1885c83a 	sub	r2,r3,r2
     c5c:	e0bff615 	stw	r2,-40(fp)
     c60:	00000406 	br	c74 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     c64:	00c20004 	movi	r3,2048
     c68:	e0bff817 	ldw	r2,-32(fp)
     c6c:	1885c83a 	sub	r2,r3,r2
     c70:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
     c74:	e0bff617 	ldw	r2,-40(fp)
     c78:	10001e26 	beq	r2,zero,cf4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
     c7c:	e0fffe17 	ldw	r3,-8(fp)
     c80:	e0bff617 	ldw	r2,-40(fp)
     c84:	1880022e 	bgeu	r3,r2,c90 <altera_avalon_jtag_uart_read+0x90>
        n = space;
     c88:	e0bffe17 	ldw	r2,-8(fp)
     c8c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
     c90:	e0bffc17 	ldw	r2,-16(fp)
     c94:	10c00e04 	addi	r3,r2,56
     c98:	e0bff817 	ldw	r2,-32(fp)
     c9c:	1885883a 	add	r2,r3,r2
     ca0:	e1bff617 	ldw	r6,-40(fp)
     ca4:	100b883a 	mov	r5,r2
     ca8:	e13ff517 	ldw	r4,-44(fp)
     cac:	000355c0 	call	355c <memcpy>
      ptr   += n;
     cb0:	e0fff517 	ldw	r3,-44(fp)
     cb4:	e0bff617 	ldw	r2,-40(fp)
     cb8:	1885883a 	add	r2,r3,r2
     cbc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
     cc0:	e0fffe17 	ldw	r3,-8(fp)
     cc4:	e0bff617 	ldw	r2,-40(fp)
     cc8:	1885c83a 	sub	r2,r3,r2
     ccc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     cd0:	e0fff817 	ldw	r3,-32(fp)
     cd4:	e0bff617 	ldw	r2,-40(fp)
     cd8:	1885883a 	add	r2,r3,r2
     cdc:	10c1ffcc 	andi	r3,r2,2047
     ce0:	e0bffc17 	ldw	r2,-16(fp)
     ce4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
     ce8:	e0bffe17 	ldw	r2,-8(fp)
     cec:	00bfcf16 	blt	zero,r2,c2c <__alt_mem_onchip_memory2_0+0xf7bfcc2c>
     cf0:	00000106 	br	cf8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
     cf4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
     cf8:	e0fff517 	ldw	r3,-44(fp)
     cfc:	e0bffd17 	ldw	r2,-12(fp)
     d00:	1880141e 	bne	r3,r2,d54 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     d04:	e0bfff17 	ldw	r2,-4(fp)
     d08:	1090000c 	andi	r2,r2,16384
     d0c:	1000131e 	bne	r2,zero,d5c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     d10:	0001883a 	nop
     d14:	e0bffc17 	ldw	r2,-16(fp)
     d18:	10c00a17 	ldw	r3,40(r2)
     d1c:	e0bff717 	ldw	r2,-36(fp)
     d20:	1880051e 	bne	r3,r2,d38 <altera_avalon_jtag_uart_read+0x138>
     d24:	e0bffc17 	ldw	r2,-16(fp)
     d28:	10c00917 	ldw	r3,36(r2)
     d2c:	e0bffc17 	ldw	r2,-16(fp)
     d30:	10800117 	ldw	r2,4(r2)
     d34:	18bff736 	bltu	r3,r2,d14 <__alt_mem_onchip_memory2_0+0xf7bfcd14>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     d38:	e0bffc17 	ldw	r2,-16(fp)
     d3c:	10c00a17 	ldw	r3,40(r2)
     d40:	e0bff717 	ldw	r2,-36(fp)
     d44:	18800726 	beq	r3,r2,d64 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     d48:	e0bffe17 	ldw	r2,-8(fp)
     d4c:	00bfb716 	blt	zero,r2,c2c <__alt_mem_onchip_memory2_0+0xf7bfcc2c>
     d50:	00000506 	br	d68 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
     d54:	0001883a 	nop
     d58:	00000306 	br	d68 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
     d5c:	0001883a 	nop
     d60:	00000106 	br	d68 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
     d64:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
     d68:	e0fff517 	ldw	r3,-44(fp)
     d6c:	e0bffd17 	ldw	r2,-12(fp)
     d70:	18801826 	beq	r3,r2,dd4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     d74:	0005303a 	rdctl	r2,status
     d78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     d7c:	e0fffb17 	ldw	r3,-20(fp)
     d80:	00bfff84 	movi	r2,-2
     d84:	1884703a 	and	r2,r3,r2
     d88:	1001703a 	wrctl	status,r2
  
  return context;
     d8c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
     d90:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     d94:	e0bffc17 	ldw	r2,-16(fp)
     d98:	10800817 	ldw	r2,32(r2)
     d9c:	10c00054 	ori	r3,r2,1
     da0:	e0bffc17 	ldw	r2,-16(fp)
     da4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     da8:	e0bffc17 	ldw	r2,-16(fp)
     dac:	10800017 	ldw	r2,0(r2)
     db0:	10800104 	addi	r2,r2,4
     db4:	1007883a 	mov	r3,r2
     db8:	e0bffc17 	ldw	r2,-16(fp)
     dbc:	10800817 	ldw	r2,32(r2)
     dc0:	18800035 	stwio	r2,0(r3)
     dc4:	e0bffa17 	ldw	r2,-24(fp)
     dc8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     dcc:	e0bff917 	ldw	r2,-28(fp)
     dd0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
     dd4:	e0fff517 	ldw	r3,-44(fp)
     dd8:	e0bffd17 	ldw	r2,-12(fp)
     ddc:	18800426 	beq	r3,r2,df0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
     de0:	e0fff517 	ldw	r3,-44(fp)
     de4:	e0bffd17 	ldw	r2,-12(fp)
     de8:	1885c83a 	sub	r2,r3,r2
     dec:	00000606 	br	e08 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
     df0:	e0bfff17 	ldw	r2,-4(fp)
     df4:	1090000c 	andi	r2,r2,16384
     df8:	10000226 	beq	r2,zero,e04 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
     dfc:	00bffd44 	movi	r2,-11
     e00:	00000106 	br	e08 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
     e04:	00bffec4 	movi	r2,-5
}
     e08:	e037883a 	mov	sp,fp
     e0c:	dfc00117 	ldw	ra,4(sp)
     e10:	df000017 	ldw	fp,0(sp)
     e14:	dec00204 	addi	sp,sp,8
     e18:	f800283a 	ret

00000e1c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     e1c:	defff304 	addi	sp,sp,-52
     e20:	dfc00c15 	stw	ra,48(sp)
     e24:	df000b15 	stw	fp,44(sp)
     e28:	df000b04 	addi	fp,sp,44
     e2c:	e13ffc15 	stw	r4,-16(fp)
     e30:	e17ffd15 	stw	r5,-12(fp)
     e34:	e1bffe15 	stw	r6,-8(fp)
     e38:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
     e3c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
     e40:	e0bffd17 	ldw	r2,-12(fp)
     e44:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     e48:	00003706 	br	f28 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
     e4c:	e0bffc17 	ldw	r2,-16(fp)
     e50:	10800c17 	ldw	r2,48(r2)
     e54:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
     e58:	e0bffc17 	ldw	r2,-16(fp)
     e5c:	10800d17 	ldw	r2,52(r2)
     e60:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
     e64:	e0fff917 	ldw	r3,-28(fp)
     e68:	e0bff517 	ldw	r2,-44(fp)
     e6c:	1880062e 	bgeu	r3,r2,e88 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
     e70:	e0fff517 	ldw	r3,-44(fp)
     e74:	e0bff917 	ldw	r2,-28(fp)
     e78:	1885c83a 	sub	r2,r3,r2
     e7c:	10bfffc4 	addi	r2,r2,-1
     e80:	e0bff615 	stw	r2,-40(fp)
     e84:	00000b06 	br	eb4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
     e88:	e0bff517 	ldw	r2,-44(fp)
     e8c:	10000526 	beq	r2,zero,ea4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     e90:	00c20004 	movi	r3,2048
     e94:	e0bff917 	ldw	r2,-28(fp)
     e98:	1885c83a 	sub	r2,r3,r2
     e9c:	e0bff615 	stw	r2,-40(fp)
     ea0:	00000406 	br	eb4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     ea4:	00c1ffc4 	movi	r3,2047
     ea8:	e0bff917 	ldw	r2,-28(fp)
     eac:	1885c83a 	sub	r2,r3,r2
     eb0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
     eb4:	e0bff617 	ldw	r2,-40(fp)
     eb8:	10001e26 	beq	r2,zero,f34 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
     ebc:	e0fffe17 	ldw	r3,-8(fp)
     ec0:	e0bff617 	ldw	r2,-40(fp)
     ec4:	1880022e 	bgeu	r3,r2,ed0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
     ec8:	e0bffe17 	ldw	r2,-8(fp)
     ecc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
     ed0:	e0bffc17 	ldw	r2,-16(fp)
     ed4:	10c20e04 	addi	r3,r2,2104
     ed8:	e0bff917 	ldw	r2,-28(fp)
     edc:	1885883a 	add	r2,r3,r2
     ee0:	e1bff617 	ldw	r6,-40(fp)
     ee4:	e17ffd17 	ldw	r5,-12(fp)
     ee8:	1009883a 	mov	r4,r2
     eec:	000355c0 	call	355c <memcpy>
      ptr   += n;
     ef0:	e0fffd17 	ldw	r3,-12(fp)
     ef4:	e0bff617 	ldw	r2,-40(fp)
     ef8:	1885883a 	add	r2,r3,r2
     efc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
     f00:	e0fffe17 	ldw	r3,-8(fp)
     f04:	e0bff617 	ldw	r2,-40(fp)
     f08:	1885c83a 	sub	r2,r3,r2
     f0c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f10:	e0fff917 	ldw	r3,-28(fp)
     f14:	e0bff617 	ldw	r2,-40(fp)
     f18:	1885883a 	add	r2,r3,r2
     f1c:	10c1ffcc 	andi	r3,r2,2047
     f20:	e0bffc17 	ldw	r2,-16(fp)
     f24:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     f28:	e0bffe17 	ldw	r2,-8(fp)
     f2c:	00bfc716 	blt	zero,r2,e4c <__alt_mem_onchip_memory2_0+0xf7bfce4c>
     f30:	00000106 	br	f38 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
     f34:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     f38:	0005303a 	rdctl	r2,status
     f3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     f40:	e0fffb17 	ldw	r3,-20(fp)
     f44:	00bfff84 	movi	r2,-2
     f48:	1884703a 	and	r2,r3,r2
     f4c:	1001703a 	wrctl	status,r2
  
  return context;
     f50:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
     f54:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     f58:	e0bffc17 	ldw	r2,-16(fp)
     f5c:	10800817 	ldw	r2,32(r2)
     f60:	10c00094 	ori	r3,r2,2
     f64:	e0bffc17 	ldw	r2,-16(fp)
     f68:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     f6c:	e0bffc17 	ldw	r2,-16(fp)
     f70:	10800017 	ldw	r2,0(r2)
     f74:	10800104 	addi	r2,r2,4
     f78:	1007883a 	mov	r3,r2
     f7c:	e0bffc17 	ldw	r2,-16(fp)
     f80:	10800817 	ldw	r2,32(r2)
     f84:	18800035 	stwio	r2,0(r3)
     f88:	e0bffa17 	ldw	r2,-24(fp)
     f8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     f90:	e0bff817 	ldw	r2,-32(fp)
     f94:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
     f98:	e0bffe17 	ldw	r2,-8(fp)
     f9c:	0080100e 	bge	zero,r2,fe0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
     fa0:	e0bfff17 	ldw	r2,-4(fp)
     fa4:	1090000c 	andi	r2,r2,16384
     fa8:	1000101e 	bne	r2,zero,fec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
     fac:	0001883a 	nop
     fb0:	e0bffc17 	ldw	r2,-16(fp)
     fb4:	10c00d17 	ldw	r3,52(r2)
     fb8:	e0bff517 	ldw	r2,-44(fp)
     fbc:	1880051e 	bne	r3,r2,fd4 <altera_avalon_jtag_uart_write+0x1b8>
     fc0:	e0bffc17 	ldw	r2,-16(fp)
     fc4:	10c00917 	ldw	r3,36(r2)
     fc8:	e0bffc17 	ldw	r2,-16(fp)
     fcc:	10800117 	ldw	r2,4(r2)
     fd0:	18bff736 	bltu	r3,r2,fb0 <__alt_mem_onchip_memory2_0+0xf7bfcfb0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
     fd4:	e0bffc17 	ldw	r2,-16(fp)
     fd8:	10800917 	ldw	r2,36(r2)
     fdc:	1000051e 	bne	r2,zero,ff4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
     fe0:	e0bffe17 	ldw	r2,-8(fp)
     fe4:	00bfd016 	blt	zero,r2,f28 <__alt_mem_onchip_memory2_0+0xf7bfcf28>
     fe8:	00000306 	br	ff8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
     fec:	0001883a 	nop
     ff0:	00000106 	br	ff8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
     ff4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
     ff8:	e0fffd17 	ldw	r3,-12(fp)
     ffc:	e0bff717 	ldw	r2,-36(fp)
    1000:	18800426 	beq	r3,r2,1014 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    1004:	e0fffd17 	ldw	r3,-12(fp)
    1008:	e0bff717 	ldw	r2,-36(fp)
    100c:	1885c83a 	sub	r2,r3,r2
    1010:	00000606 	br	102c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    1014:	e0bfff17 	ldw	r2,-4(fp)
    1018:	1090000c 	andi	r2,r2,16384
    101c:	10000226 	beq	r2,zero,1028 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    1020:	00bffd44 	movi	r2,-11
    1024:	00000106 	br	102c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1028:	00bffec4 	movi	r2,-5
}
    102c:	e037883a 	mov	sp,fp
    1030:	dfc00117 	ldw	ra,4(sp)
    1034:	df000017 	ldw	fp,0(sp)
    1038:	dec00204 	addi	sp,sp,8
    103c:	f800283a 	ret

00001040 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1040:	defff904 	addi	sp,sp,-28
    1044:	dfc00615 	stw	ra,24(sp)
    1048:	df000515 	stw	fp,20(sp)
    104c:	df000504 	addi	fp,sp,20
    1050:	e13ffe15 	stw	r4,-8(fp)
    1054:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1058:	0007883a 	mov	r3,zero
    105c:	e0bffe17 	ldw	r2,-8(fp)
    1060:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1064:	e0bffe17 	ldw	r2,-8(fp)
    1068:	10800104 	addi	r2,r2,4
    106c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1070:	0005303a 	rdctl	r2,status
    1074:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1078:	e0fffc17 	ldw	r3,-16(fp)
    107c:	00bfff84 	movi	r2,-2
    1080:	1884703a 	and	r2,r3,r2
    1084:	1001703a 	wrctl	status,r2
  
  return context;
    1088:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    108c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    1090:	00022440 	call	2244 <alt_tick>
    1094:	e0bffb17 	ldw	r2,-20(fp)
    1098:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    109c:	e0bffd17 	ldw	r2,-12(fp)
    10a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    10a4:	0001883a 	nop
    10a8:	e037883a 	mov	sp,fp
    10ac:	dfc00117 	ldw	ra,4(sp)
    10b0:	df000017 	ldw	fp,0(sp)
    10b4:	dec00204 	addi	sp,sp,8
    10b8:	f800283a 	ret

000010bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    10bc:	defff904 	addi	sp,sp,-28
    10c0:	dfc00615 	stw	ra,24(sp)
    10c4:	df000515 	stw	fp,20(sp)
    10c8:	df000504 	addi	fp,sp,20
    10cc:	e13ffc15 	stw	r4,-16(fp)
    10d0:	e17ffd15 	stw	r5,-12(fp)
    10d4:	e1bffe15 	stw	r6,-8(fp)
    10d8:	e1ffff15 	stw	r7,-4(fp)
    10dc:	e0bfff17 	ldw	r2,-4(fp)
    10e0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    10e4:	d0a6d317 	ldw	r2,-25780(gp)
    10e8:	1000021e 	bne	r2,zero,10f4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    10ec:	e0bffb17 	ldw	r2,-20(fp)
    10f0:	d0a6d315 	stw	r2,-25780(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    10f4:	e0bffc17 	ldw	r2,-16(fp)
    10f8:	10800104 	addi	r2,r2,4
    10fc:	00c001c4 	movi	r3,7
    1100:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    1104:	01800034 	movhi	r6,0
    1108:	31841004 	addi	r6,r6,4160
    110c:	e17ffc17 	ldw	r5,-16(fp)
    1110:	e13ffe17 	ldw	r4,-8(fp)
    1114:	0001d700 	call	1d70 <alt_irq_register>
#endif  
}
    1118:	0001883a 	nop
    111c:	e037883a 	mov	sp,fp
    1120:	dfc00117 	ldw	ra,4(sp)
    1124:	df000017 	ldw	fp,0(sp)
    1128:	dec00204 	addi	sp,sp,8
    112c:	f800283a 	ret

00001130 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    1130:	defffd04 	addi	sp,sp,-12
    1134:	df000215 	stw	fp,8(sp)
    1138:	df000204 	addi	fp,sp,8
    113c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    1140:	e0bfff17 	ldw	r2,-4(fp)
    1144:	1080400c 	andi	r2,r2,256
    1148:	1004d23a 	srli	r2,r2,8
    114c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    1150:	e0bffe03 	ldbu	r2,-8(fp)
}
    1154:	e037883a 	mov	sp,fp
    1158:	df000017 	ldw	fp,0(sp)
    115c:	dec00104 	addi	sp,sp,4
    1160:	f800283a 	ret

00001164 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    1164:	defffd04 	addi	sp,sp,-12
    1168:	df000215 	stw	fp,8(sp)
    116c:	df000204 	addi	fp,sp,8
    1170:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    1174:	e0bfff17 	ldw	r2,-4(fp)
    1178:	1080004c 	andi	r2,r2,1
    117c:	e0bffe05 	stb	r2,-8(fp)
	return re;
    1180:	e0bffe03 	ldbu	r2,-8(fp)
}
    1184:	e037883a 	mov	sp,fp
    1188:	df000017 	ldw	fp,0(sp)
    118c:	dec00104 	addi	sp,sp,4
    1190:	f800283a 	ret

00001194 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    1194:	defffd04 	addi	sp,sp,-12
    1198:	df000215 	stw	fp,8(sp)
    119c:	df000204 	addi	fp,sp,8
    11a0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    11a4:	e0bfff17 	ldw	r2,-4(fp)
    11a8:	1081000c 	andi	r2,r2,1024
    11ac:	1004d2ba 	srli	r2,r2,10
    11b0:	e0bffe05 	stb	r2,-8(fp)
	return re;
    11b4:	e0bffe03 	ldbu	r2,-8(fp)
}
    11b8:	e037883a 	mov	sp,fp
    11bc:	df000017 	ldw	fp,0(sp)
    11c0:	dec00104 	addi	sp,sp,4
    11c4:	f800283a 	ret

000011c8 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    11c8:	defffd04 	addi	sp,sp,-12
    11cc:	df000215 	stw	fp,8(sp)
    11d0:	df000204 	addi	fp,sp,8
    11d4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    11d8:	e0bfff17 	ldw	r2,-4(fp)
    11dc:	1004d43a 	srli	r2,r2,16
    11e0:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    11e4:	e0bffe0b 	ldhu	r2,-8(fp)
}
    11e8:	e037883a 	mov	sp,fp
    11ec:	df000017 	ldw	fp,0(sp)
    11f0:	dec00104 	addi	sp,sp,4
    11f4:	f800283a 	ret

000011f8 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    11f8:	defffd04 	addi	sp,sp,-12
    11fc:	df000215 	stw	fp,8(sp)
    1200:	df000204 	addi	fp,sp,8
    1204:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    1208:	e0bfff17 	ldw	r2,-4(fp)
    120c:	10a0000c 	andi	r2,r2,32768
    1210:	1004d3fa 	srli	r2,r2,15
    1214:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    1218:	e0bffe03 	ldbu	r2,-8(fp)
}
    121c:	e037883a 	mov	sp,fp
    1220:	df000017 	ldw	fp,0(sp)
    1224:	dec00104 	addi	sp,sp,4
    1228:	f800283a 	ret

0000122c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    122c:	defffd04 	addi	sp,sp,-12
    1230:	df000215 	stw	fp,8(sp)
    1234:	df000204 	addi	fp,sp,8
    1238:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    123c:	e0bfff17 	ldw	r2,-4(fp)
    1240:	e0bffe05 	stb	r2,-8(fp)
	return data;
    1244:	e0bffe03 	ldbu	r2,-8(fp)
}
    1248:	e037883a 	mov	sp,fp
    124c:	df000017 	ldw	fp,0(sp)
    1250:	dec00104 	addi	sp,sp,4
    1254:	f800283a 	ret

00001258 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    1258:	defffb04 	addi	sp,sp,-20
    125c:	dfc00415 	stw	ra,16(sp)
    1260:	df000315 	stw	fp,12(sp)
    1264:	df000304 	addi	fp,sp,12
    1268:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    126c:	01403fc4 	movi	r5,255
    1270:	e13fff17 	ldw	r4,-4(fp)
    1274:	00014b80 	call	14b8 <alt_up_ps2_write_data_byte_with_ack>
    1278:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    127c:	e0bffd17 	ldw	r2,-12(fp)
    1280:	1000211e 	bne	r2,zero,1308 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1284:	e0bffe04 	addi	r2,fp,-8
    1288:	100b883a 	mov	r5,r2
    128c:	e13fff17 	ldw	r4,-4(fp)
    1290:	000151c0 	call	151c <alt_up_ps2_read_data_byte_timeout>
    1294:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    1298:	e0bffd17 	ldw	r2,-12(fp)
    129c:	10001a1e 	bne	r2,zero,1308 <alt_up_ps2_init+0xb0>
    12a0:	e0bffe03 	ldbu	r2,-8(fp)
    12a4:	10803fcc 	andi	r2,r2,255
    12a8:	10802a98 	cmpnei	r2,r2,170
    12ac:	1000161e 	bne	r2,zero,1308 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    12b0:	e0bffe04 	addi	r2,fp,-8
    12b4:	100b883a 	mov	r5,r2
    12b8:	e13fff17 	ldw	r4,-4(fp)
    12bc:	000151c0 	call	151c <alt_up_ps2_read_data_byte_timeout>
    12c0:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    12c4:	e0bffd17 	ldw	r2,-12(fp)
    12c8:	10bfe318 	cmpnei	r2,r2,-116
    12cc:	1000041e 	bne	r2,zero,12e0 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    12d0:	e0bfff17 	ldw	r2,-4(fp)
    12d4:	00c00044 	movi	r3,1
    12d8:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    12dc:	00000a06 	br	1308 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
    12e0:	e0bffd17 	ldw	r2,-12(fp)
    12e4:	1000081e 	bne	r2,zero,1308 <alt_up_ps2_init+0xb0>
    12e8:	e0bffe03 	ldbu	r2,-8(fp)
    12ec:	10803fcc 	andi	r2,r2,255
    12f0:	1000051e 	bne	r2,zero,1308 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    12f4:	e0bfff17 	ldw	r2,-4(fp)
    12f8:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    12fc:	01403d04 	movi	r5,244
    1300:	e13fff17 	ldw	r4,-4(fp)
    1304:	00013dc0 	call	13dc <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    1308:	0001883a 	nop
    130c:	e037883a 	mov	sp,fp
    1310:	dfc00117 	ldw	ra,4(sp)
    1314:	df000017 	ldw	fp,0(sp)
    1318:	dec00204 	addi	sp,sp,8
    131c:	f800283a 	ret

00001320 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    1320:	defffd04 	addi	sp,sp,-12
    1324:	df000215 	stw	fp,8(sp)
    1328:	df000204 	addi	fp,sp,8
    132c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1330:	e0bfff17 	ldw	r2,-4(fp)
    1334:	10800a17 	ldw	r2,40(r2)
    1338:	10800104 	addi	r2,r2,4
    133c:	10800037 	ldwio	r2,0(r2)
    1340:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    1344:	e0bffe17 	ldw	r2,-8(fp)
    1348:	10800054 	ori	r2,r2,1
    134c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1350:	e0bfff17 	ldw	r2,-4(fp)
    1354:	10800a17 	ldw	r2,40(r2)
    1358:	10800104 	addi	r2,r2,4
    135c:	1007883a 	mov	r3,r2
    1360:	e0bffe17 	ldw	r2,-8(fp)
    1364:	18800035 	stwio	r2,0(r3)
}
    1368:	0001883a 	nop
    136c:	e037883a 	mov	sp,fp
    1370:	df000017 	ldw	fp,0(sp)
    1374:	dec00104 	addi	sp,sp,4
    1378:	f800283a 	ret

0000137c <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    137c:	defffd04 	addi	sp,sp,-12
    1380:	df000215 	stw	fp,8(sp)
    1384:	df000204 	addi	fp,sp,8
    1388:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    138c:	e0bfff17 	ldw	r2,-4(fp)
    1390:	10800a17 	ldw	r2,40(r2)
    1394:	10800104 	addi	r2,r2,4
    1398:	10800037 	ldwio	r2,0(r2)
    139c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    13a0:	e0fffe17 	ldw	r3,-8(fp)
    13a4:	00bfff84 	movi	r2,-2
    13a8:	1884703a 	and	r2,r3,r2
    13ac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    13b0:	e0bfff17 	ldw	r2,-4(fp)
    13b4:	10800a17 	ldw	r2,40(r2)
    13b8:	10800104 	addi	r2,r2,4
    13bc:	1007883a 	mov	r3,r2
    13c0:	e0bffe17 	ldw	r2,-8(fp)
    13c4:	18800035 	stwio	r2,0(r3)
}
    13c8:	0001883a 	nop
    13cc:	e037883a 	mov	sp,fp
    13d0:	df000017 	ldw	fp,0(sp)
    13d4:	dec00104 	addi	sp,sp,4
    13d8:	f800283a 	ret

000013dc <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    13dc:	defffb04 	addi	sp,sp,-20
    13e0:	dfc00415 	stw	ra,16(sp)
    13e4:	df000315 	stw	fp,12(sp)
    13e8:	df000304 	addi	fp,sp,12
    13ec:	e13ffe15 	stw	r4,-8(fp)
    13f0:	2805883a 	mov	r2,r5
    13f4:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    13f8:	e0bffe17 	ldw	r2,-8(fp)
    13fc:	10800a17 	ldw	r2,40(r2)
    1400:	1007883a 	mov	r3,r2
    1404:	e0bfff03 	ldbu	r2,-4(fp)
    1408:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    140c:	e0bffe17 	ldw	r2,-8(fp)
    1410:	10800a17 	ldw	r2,40(r2)
    1414:	10800104 	addi	r2,r2,4
    1418:	10800037 	ldwio	r2,0(r2)
    141c:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    1420:	e13ffd17 	ldw	r4,-12(fp)
    1424:	00011940 	call	1194 <read_CE_bit>
    1428:	10803fcc 	andi	r2,r2,255
    142c:	10000226 	beq	r2,zero,1438 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    1430:	00bffec4 	movi	r2,-5
    1434:	00000106 	br	143c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    1438:	0005883a 	mov	r2,zero
}
    143c:	e037883a 	mov	sp,fp
    1440:	dfc00117 	ldw	ra,4(sp)
    1444:	df000017 	ldw	fp,0(sp)
    1448:	dec00204 	addi	sp,sp,8
    144c:	f800283a 	ret

00001450 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    1450:	defffc04 	addi	sp,sp,-16
    1454:	dfc00315 	stw	ra,12(sp)
    1458:	df000215 	stw	fp,8(sp)
    145c:	df000204 	addi	fp,sp,8
    1460:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    1464:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    1468:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    146c:	e0bffe44 	addi	r2,fp,-7
    1470:	100b883a 	mov	r5,r2
    1474:	e13fff17 	ldw	r4,-4(fp)
    1478:	000151c0 	call	151c <alt_up_ps2_read_data_byte_timeout>
    147c:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    1480:	e0bffe03 	ldbu	r2,-8(fp)
    1484:	1000061e 	bne	r2,zero,14a0 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    1488:	e0bffe43 	ldbu	r2,-7(fp)
    148c:	10803fcc 	andi	r2,r2,255
    1490:	10803e98 	cmpnei	r2,r2,250
    1494:	103ff51e 	bne	r2,zero,146c <__alt_mem_onchip_memory2_0+0xf7bfd46c>
				return 0;
    1498:	0005883a 	mov	r2,zero
    149c:	00000106 	br	14a4 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    14a0:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    14a4:	e037883a 	mov	sp,fp
    14a8:	dfc00117 	ldw	ra,4(sp)
    14ac:	df000017 	ldw	fp,0(sp)
    14b0:	dec00204 	addi	sp,sp,8
    14b4:	f800283a 	ret

000014b8 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    14b8:	defffa04 	addi	sp,sp,-24
    14bc:	dfc00515 	stw	ra,20(sp)
    14c0:	df000415 	stw	fp,16(sp)
    14c4:	df000404 	addi	fp,sp,16
    14c8:	e13ffe15 	stw	r4,-8(fp)
    14cc:	2805883a 	mov	r2,r5
    14d0:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    14d4:	e0bfff03 	ldbu	r2,-4(fp)
    14d8:	100b883a 	mov	r5,r2
    14dc:	e13ffe17 	ldw	r4,-8(fp)
    14e0:	00013dc0 	call	13dc <alt_up_ps2_write_data_byte>
    14e4:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    14e8:	e0bffc17 	ldw	r2,-16(fp)
    14ec:	10000226 	beq	r2,zero,14f8 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    14f0:	e0bffc17 	ldw	r2,-16(fp)
    14f4:	00000406 	br	1508 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    14f8:	e13ffe17 	ldw	r4,-8(fp)
    14fc:	00014500 	call	1450 <alt_up_ps2_wait_for_ack>
    1500:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    1504:	e0bffd17 	ldw	r2,-12(fp)
}
    1508:	e037883a 	mov	sp,fp
    150c:	dfc00117 	ldw	ra,4(sp)
    1510:	df000017 	ldw	fp,0(sp)
    1514:	dec00204 	addi	sp,sp,8
    1518:	f800283a 	ret

0000151c <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    151c:	defffa04 	addi	sp,sp,-24
    1520:	dfc00515 	stw	ra,20(sp)
    1524:	df000415 	stw	fp,16(sp)
    1528:	df000404 	addi	fp,sp,16
    152c:	e13ffe15 	stw	r4,-8(fp)
    1530:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    1534:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    1538:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    153c:	e0bffc17 	ldw	r2,-16(fp)
    1540:	10800044 	addi	r2,r2,1
    1544:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1548:	e0bffe17 	ldw	r2,-8(fp)
    154c:	10800a17 	ldw	r2,40(r2)
    1550:	10800037 	ldwio	r2,0(r2)
    1554:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    1558:	e13ffd17 	ldw	r4,-12(fp)
    155c:	00011f80 	call	11f8 <read_data_valid>
    1560:	10803fcc 	andi	r2,r2,255
    1564:	10000726 	beq	r2,zero,1584 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    1568:	e13ffd17 	ldw	r4,-12(fp)
    156c:	000122c0 	call	122c <read_data_byte>
    1570:	1007883a 	mov	r3,r2
    1574:	e0bfff17 	ldw	r2,-4(fp)
    1578:	10c00005 	stb	r3,0(r2)
			return 0;
    157c:	0005883a 	mov	r2,zero
    1580:	00000806 	br	15a4 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    1584:	e0bffe17 	ldw	r2,-8(fp)
    1588:	10800c17 	ldw	r2,48(r2)
    158c:	103feb26 	beq	r2,zero,153c <__alt_mem_onchip_memory2_0+0xf7bfd53c>
    1590:	e0bffe17 	ldw	r2,-8(fp)
    1594:	10c00c17 	ldw	r3,48(r2)
    1598:	e0bffc17 	ldw	r2,-16(fp)
    159c:	18bfe72e 	bgeu	r3,r2,153c <__alt_mem_onchip_memory2_0+0xf7bfd53c>
		{
			return -ETIMEDOUT;
    15a0:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    15a4:	e037883a 	mov	sp,fp
    15a8:	dfc00117 	ldw	ra,4(sp)
    15ac:	df000017 	ldw	fp,0(sp)
    15b0:	dec00204 	addi	sp,sp,8
    15b4:	f800283a 	ret

000015b8 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    15b8:	defffb04 	addi	sp,sp,-20
    15bc:	dfc00415 	stw	ra,16(sp)
    15c0:	df000315 	stw	fp,12(sp)
    15c4:	df000304 	addi	fp,sp,12
    15c8:	e13ffe15 	stw	r4,-8(fp)
    15cc:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    15d0:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    15d4:	e0bffe17 	ldw	r2,-8(fp)
    15d8:	10800a17 	ldw	r2,40(r2)
    15dc:	10800037 	ldwio	r2,0(r2)
    15e0:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    15e4:	e13ffd17 	ldw	r4,-12(fp)
    15e8:	00011f80 	call	11f8 <read_data_valid>
    15ec:	10803fcc 	andi	r2,r2,255
    15f0:	10000726 	beq	r2,zero,1610 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    15f4:	e13ffd17 	ldw	r4,-12(fp)
    15f8:	000122c0 	call	122c <read_data_byte>
    15fc:	1007883a 	mov	r3,r2
    1600:	e0bfff17 	ldw	r2,-4(fp)
    1604:	10c00005 	stb	r3,0(r2)
		return 0;
    1608:	0005883a 	mov	r2,zero
    160c:	00000106 	br	1614 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    1610:	00bfffc4 	movi	r2,-1
}
    1614:	e037883a 	mov	sp,fp
    1618:	dfc00117 	ldw	ra,4(sp)
    161c:	df000017 	ldw	fp,0(sp)
    1620:	dec00204 	addi	sp,sp,8
    1624:	f800283a 	ret

00001628 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    1628:	defffb04 	addi	sp,sp,-20
    162c:	dfc00415 	stw	ra,16(sp)
    1630:	df000315 	stw	fp,12(sp)
    1634:	df000304 	addi	fp,sp,12
    1638:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    163c:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    1640:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1644:	e0bfff17 	ldw	r2,-4(fp)
    1648:	10800a17 	ldw	r2,40(r2)
    164c:	10800037 	ldwio	r2,0(r2)
    1650:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    1654:	e13ffe17 	ldw	r4,-8(fp)
    1658:	00011c80 	call	11c8 <read_num_bytes_available>
    165c:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    1660:	e0bffd0b 	ldhu	r2,-12(fp)
    1664:	103ff71e 	bne	r2,zero,1644 <__alt_mem_onchip_memory2_0+0xf7bfd644>
}
    1668:	0001883a 	nop
    166c:	e037883a 	mov	sp,fp
    1670:	dfc00117 	ldw	ra,4(sp)
    1674:	df000017 	ldw	fp,0(sp)
    1678:	dec00204 	addi	sp,sp,8
    167c:	f800283a 	ret

00001680 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    1680:	defff804 	addi	sp,sp,-32
    1684:	dfc00715 	stw	ra,28(sp)
    1688:	df000615 	stw	fp,24(sp)
    168c:	df000604 	addi	fp,sp,24
    1690:	e13ffd15 	stw	r4,-12(fp)
    1694:	e17ffe15 	stw	r5,-8(fp)
    1698:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    169c:	e0bffd17 	ldw	r2,-12(fp)
    16a0:	10800017 	ldw	r2,0(r2)
    16a4:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    16a8:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    16ac:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    16b0:	e0fffc17 	ldw	r3,-16(fp)
    16b4:	e0bfff17 	ldw	r2,-4(fp)
    16b8:	18bffd16 	blt	r3,r2,16b0 <__alt_mem_onchip_memory2_0+0xf7bfd6b0>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    16bc:	e0bffe17 	ldw	r2,-8(fp)
    16c0:	10c00044 	addi	r3,r2,1
    16c4:	e0fffe15 	stw	r3,-8(fp)
    16c8:	100b883a 	mov	r5,r2
    16cc:	e13ffa17 	ldw	r4,-24(fp)
    16d0:	000151c0 	call	151c <alt_up_ps2_read_data_byte_timeout>
    16d4:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    16d8:	e0bffb17 	ldw	r2,-20(fp)
    16dc:	10000226 	beq	r2,zero,16e8 <alt_up_ps2_read_fd+0x68>
			return count;
    16e0:	e0bffc17 	ldw	r2,-16(fp)
    16e4:	00000406 	br	16f8 <alt_up_ps2_read_fd+0x78>
		count++;
    16e8:	e0bffc17 	ldw	r2,-16(fp)
    16ec:	10800044 	addi	r2,r2,1
    16f0:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    16f4:	e0bffc17 	ldw	r2,-16(fp)
}
    16f8:	e037883a 	mov	sp,fp
    16fc:	dfc00117 	ldw	ra,4(sp)
    1700:	df000017 	ldw	fp,0(sp)
    1704:	dec00204 	addi	sp,sp,8
    1708:	f800283a 	ret

0000170c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    170c:	defff804 	addi	sp,sp,-32
    1710:	dfc00715 	stw	ra,28(sp)
    1714:	df000615 	stw	fp,24(sp)
    1718:	df000604 	addi	fp,sp,24
    171c:	e13ffd15 	stw	r4,-12(fp)
    1720:	e17ffe15 	stw	r5,-8(fp)
    1724:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1728:	e0bffd17 	ldw	r2,-12(fp)
    172c:	10800017 	ldw	r2,0(r2)
    1730:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    1734:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    1738:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    173c:	00001006 	br	1780 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    1740:	e0bffe17 	ldw	r2,-8(fp)
    1744:	10c00044 	addi	r3,r2,1
    1748:	e0fffe15 	stw	r3,-8(fp)
    174c:	10800003 	ldbu	r2,0(r2)
    1750:	10803fcc 	andi	r2,r2,255
    1754:	100b883a 	mov	r5,r2
    1758:	e13ffb17 	ldw	r4,-20(fp)
    175c:	00013dc0 	call	13dc <alt_up_ps2_write_data_byte>
    1760:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    1764:	e0bffc17 	ldw	r2,-16(fp)
    1768:	10000226 	beq	r2,zero,1774 <alt_up_ps2_write_fd+0x68>
			return count;
    176c:	e0bffa17 	ldw	r2,-24(fp)
    1770:	00000706 	br	1790 <alt_up_ps2_write_fd+0x84>
		count++;
    1774:	e0bffa17 	ldw	r2,-24(fp)
    1778:	10800044 	addi	r2,r2,1
    177c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    1780:	e0fffa17 	ldw	r3,-24(fp)
    1784:	e0bfff17 	ldw	r2,-4(fp)
    1788:	18bfed16 	blt	r3,r2,1740 <__alt_mem_onchip_memory2_0+0xf7bfd740>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    178c:	e0bffa17 	ldw	r2,-24(fp)
}
    1790:	e037883a 	mov	sp,fp
    1794:	dfc00117 	ldw	ra,4(sp)
    1798:	df000017 	ldw	fp,0(sp)
    179c:	dec00204 	addi	sp,sp,8
    17a0:	f800283a 	ret

000017a4 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    17a4:	defffc04 	addi	sp,sp,-16
    17a8:	dfc00315 	stw	ra,12(sp)
    17ac:	df000215 	stw	fp,8(sp)
    17b0:	df000204 	addi	fp,sp,8
    17b4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    17b8:	d1600204 	addi	r5,gp,-32760
    17bc:	e13fff17 	ldw	r4,-4(fp)
    17c0:	0001b6c0 	call	1b6c <alt_find_dev>
    17c4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    17c8:	e0bffe17 	ldw	r2,-8(fp)
}
    17cc:	e037883a 	mov	sp,fp
    17d0:	dfc00117 	ldw	ra,4(sp)
    17d4:	df000017 	ldw	fp,0(sp)
    17d8:	dec00204 	addi	sp,sp,8
    17dc:	f800283a 	ret

000017e0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    17e0:	defff504 	addi	sp,sp,-44
    17e4:	df000a15 	stw	fp,40(sp)
    17e8:	df000a04 	addi	fp,sp,40
    17ec:	e13ffc15 	stw	r4,-16(fp)
    17f0:	e17ffd15 	stw	r5,-12(fp)
    17f4:	e1bffe15 	stw	r6,-8(fp)
    17f8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    17fc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1800:	d0a6d317 	ldw	r2,-25780(gp)
  
  if (alt_ticks_per_second ())
    1804:	10003c26 	beq	r2,zero,18f8 <alt_alarm_start+0x118>
  {
    if (alarm)
    1808:	e0bffc17 	ldw	r2,-16(fp)
    180c:	10003826 	beq	r2,zero,18f0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    1810:	e0bffc17 	ldw	r2,-16(fp)
    1814:	e0fffe17 	ldw	r3,-8(fp)
    1818:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    181c:	e0bffc17 	ldw	r2,-16(fp)
    1820:	e0ffff17 	ldw	r3,-4(fp)
    1824:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1828:	0005303a 	rdctl	r2,status
    182c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1830:	e0fff917 	ldw	r3,-28(fp)
    1834:	00bfff84 	movi	r2,-2
    1838:	1884703a 	and	r2,r3,r2
    183c:	1001703a 	wrctl	status,r2
  
  return context;
    1840:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    1844:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1848:	d0a6d417 	ldw	r2,-25776(gp)
      
      current_nticks = alt_nticks();
    184c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    1850:	e0fffd17 	ldw	r3,-12(fp)
    1854:	e0bff617 	ldw	r2,-40(fp)
    1858:	1885883a 	add	r2,r3,r2
    185c:	10c00044 	addi	r3,r2,1
    1860:	e0bffc17 	ldw	r2,-16(fp)
    1864:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1868:	e0bffc17 	ldw	r2,-16(fp)
    186c:	10c00217 	ldw	r3,8(r2)
    1870:	e0bff617 	ldw	r2,-40(fp)
    1874:	1880042e 	bgeu	r3,r2,1888 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    1878:	e0bffc17 	ldw	r2,-16(fp)
    187c:	00c00044 	movi	r3,1
    1880:	10c00405 	stb	r3,16(r2)
    1884:	00000206 	br	1890 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    1888:	e0bffc17 	ldw	r2,-16(fp)
    188c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1890:	e0bffc17 	ldw	r2,-16(fp)
    1894:	d0e00704 	addi	r3,gp,-32740
    1898:	e0fffa15 	stw	r3,-24(fp)
    189c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    18a0:	e0bffb17 	ldw	r2,-20(fp)
    18a4:	e0fffa17 	ldw	r3,-24(fp)
    18a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    18ac:	e0bffa17 	ldw	r2,-24(fp)
    18b0:	10c00017 	ldw	r3,0(r2)
    18b4:	e0bffb17 	ldw	r2,-20(fp)
    18b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    18bc:	e0bffa17 	ldw	r2,-24(fp)
    18c0:	10800017 	ldw	r2,0(r2)
    18c4:	e0fffb17 	ldw	r3,-20(fp)
    18c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    18cc:	e0bffa17 	ldw	r2,-24(fp)
    18d0:	e0fffb17 	ldw	r3,-20(fp)
    18d4:	10c00015 	stw	r3,0(r2)
    18d8:	e0bff817 	ldw	r2,-32(fp)
    18dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    18e0:	e0bff717 	ldw	r2,-36(fp)
    18e4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    18e8:	0005883a 	mov	r2,zero
    18ec:	00000306 	br	18fc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    18f0:	00bffa84 	movi	r2,-22
    18f4:	00000106 	br	18fc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    18f8:	00bfde84 	movi	r2,-134
  }
}
    18fc:	e037883a 	mov	sp,fp
    1900:	df000017 	ldw	fp,0(sp)
    1904:	dec00104 	addi	sp,sp,4
    1908:	f800283a 	ret

0000190c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    190c:	defffe04 	addi	sp,sp,-8
    1910:	dfc00115 	stw	ra,4(sp)
    1914:	df000015 	stw	fp,0(sp)
    1918:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    191c:	d0a00517 	ldw	r2,-32748(gp)
    1920:	10000326 	beq	r2,zero,1930 <alt_get_errno+0x24>
    1924:	d0a00517 	ldw	r2,-32748(gp)
    1928:	103ee83a 	callr	r2
    192c:	00000106 	br	1934 <alt_get_errno+0x28>
    1930:	d0a6d604 	addi	r2,gp,-25768
}
    1934:	e037883a 	mov	sp,fp
    1938:	dfc00117 	ldw	ra,4(sp)
    193c:	df000017 	ldw	fp,0(sp)
    1940:	dec00204 	addi	sp,sp,8
    1944:	f800283a 	ret

00001948 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1948:	defffb04 	addi	sp,sp,-20
    194c:	dfc00415 	stw	ra,16(sp)
    1950:	df000315 	stw	fp,12(sp)
    1954:	df000304 	addi	fp,sp,12
    1958:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    195c:	e0bfff17 	ldw	r2,-4(fp)
    1960:	10000616 	blt	r2,zero,197c <close+0x34>
    1964:	e0bfff17 	ldw	r2,-4(fp)
    1968:	10c00324 	muli	r3,r2,12
    196c:	00800034 	movhi	r2,0
    1970:	109b9704 	addi	r2,r2,28252
    1974:	1885883a 	add	r2,r3,r2
    1978:	00000106 	br	1980 <close+0x38>
    197c:	0005883a 	mov	r2,zero
    1980:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    1984:	e0bffd17 	ldw	r2,-12(fp)
    1988:	10001926 	beq	r2,zero,19f0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    198c:	e0bffd17 	ldw	r2,-12(fp)
    1990:	10800017 	ldw	r2,0(r2)
    1994:	10800417 	ldw	r2,16(r2)
    1998:	10000626 	beq	r2,zero,19b4 <close+0x6c>
    199c:	e0bffd17 	ldw	r2,-12(fp)
    19a0:	10800017 	ldw	r2,0(r2)
    19a4:	10800417 	ldw	r2,16(r2)
    19a8:	e13ffd17 	ldw	r4,-12(fp)
    19ac:	103ee83a 	callr	r2
    19b0:	00000106 	br	19b8 <close+0x70>
    19b4:	0005883a 	mov	r2,zero
    19b8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    19bc:	e13fff17 	ldw	r4,-4(fp)
    19c0:	00021440 	call	2144 <alt_release_fd>
    if (rval < 0)
    19c4:	e0bffe17 	ldw	r2,-8(fp)
    19c8:	1000070e 	bge	r2,zero,19e8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    19cc:	000190c0 	call	190c <alt_get_errno>
    19d0:	1007883a 	mov	r3,r2
    19d4:	e0bffe17 	ldw	r2,-8(fp)
    19d8:	0085c83a 	sub	r2,zero,r2
    19dc:	18800015 	stw	r2,0(r3)
      return -1;
    19e0:	00bfffc4 	movi	r2,-1
    19e4:	00000706 	br	1a04 <close+0xbc>
    }
    return 0;
    19e8:	0005883a 	mov	r2,zero
    19ec:	00000506 	br	1a04 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    19f0:	000190c0 	call	190c <alt_get_errno>
    19f4:	1007883a 	mov	r3,r2
    19f8:	00801444 	movi	r2,81
    19fc:	18800015 	stw	r2,0(r3)
    return -1;
    1a00:	00bfffc4 	movi	r2,-1
  }
}
    1a04:	e037883a 	mov	sp,fp
    1a08:	dfc00117 	ldw	ra,4(sp)
    1a0c:	df000017 	ldw	fp,0(sp)
    1a10:	dec00204 	addi	sp,sp,8
    1a14:	f800283a 	ret

00001a18 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1a18:	defffe04 	addi	sp,sp,-8
    1a1c:	df000115 	stw	fp,4(sp)
    1a20:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    1a24:	e03fff15 	stw	zero,-4(fp)
    1a28:	00000506 	br	1a40 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    1a2c:	e0bfff17 	ldw	r2,-4(fp)
    1a30:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    1a34:	e0bfff17 	ldw	r2,-4(fp)
    1a38:	10800804 	addi	r2,r2,32
    1a3c:	e0bfff15 	stw	r2,-4(fp)
    1a40:	e0bfff17 	ldw	r2,-4(fp)
    1a44:	10820030 	cmpltui	r2,r2,2048
    1a48:	103ff81e 	bne	r2,zero,1a2c <__alt_mem_onchip_memory2_0+0xf7bfda2c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1a4c:	0001883a 	nop
    1a50:	e037883a 	mov	sp,fp
    1a54:	df000017 	ldw	fp,0(sp)
    1a58:	dec00104 	addi	sp,sp,4
    1a5c:	f800283a 	ret

00001a60 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1a60:	defffc04 	addi	sp,sp,-16
    1a64:	df000315 	stw	fp,12(sp)
    1a68:	df000304 	addi	fp,sp,12
    1a6c:	e13ffd15 	stw	r4,-12(fp)
    1a70:	e17ffe15 	stw	r5,-8(fp)
    1a74:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1a78:	e0bfff17 	ldw	r2,-4(fp)
}
    1a7c:	e037883a 	mov	sp,fp
    1a80:	df000017 	ldw	fp,0(sp)
    1a84:	dec00104 	addi	sp,sp,4
    1a88:	f800283a 	ret

00001a8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1a8c:	defffe04 	addi	sp,sp,-8
    1a90:	dfc00115 	stw	ra,4(sp)
    1a94:	df000015 	stw	fp,0(sp)
    1a98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1a9c:	d0a00517 	ldw	r2,-32748(gp)
    1aa0:	10000326 	beq	r2,zero,1ab0 <alt_get_errno+0x24>
    1aa4:	d0a00517 	ldw	r2,-32748(gp)
    1aa8:	103ee83a 	callr	r2
    1aac:	00000106 	br	1ab4 <alt_get_errno+0x28>
    1ab0:	d0a6d604 	addi	r2,gp,-25768
}
    1ab4:	e037883a 	mov	sp,fp
    1ab8:	dfc00117 	ldw	ra,4(sp)
    1abc:	df000017 	ldw	fp,0(sp)
    1ac0:	dec00204 	addi	sp,sp,8
    1ac4:	f800283a 	ret

00001ac8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1ac8:	defffa04 	addi	sp,sp,-24
    1acc:	dfc00515 	stw	ra,20(sp)
    1ad0:	df000415 	stw	fp,16(sp)
    1ad4:	df000404 	addi	fp,sp,16
    1ad8:	e13ffe15 	stw	r4,-8(fp)
    1adc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1ae0:	e0bffe17 	ldw	r2,-8(fp)
    1ae4:	10000326 	beq	r2,zero,1af4 <alt_dev_llist_insert+0x2c>
    1ae8:	e0bffe17 	ldw	r2,-8(fp)
    1aec:	10800217 	ldw	r2,8(r2)
    1af0:	1000061e 	bne	r2,zero,1b0c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    1af4:	0001a8c0 	call	1a8c <alt_get_errno>
    1af8:	1007883a 	mov	r3,r2
    1afc:	00800584 	movi	r2,22
    1b00:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    1b04:	00bffa84 	movi	r2,-22
    1b08:	00001306 	br	1b58 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1b0c:	e0bffe17 	ldw	r2,-8(fp)
    1b10:	e0ffff17 	ldw	r3,-4(fp)
    1b14:	e0fffc15 	stw	r3,-16(fp)
    1b18:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1b1c:	e0bffd17 	ldw	r2,-12(fp)
    1b20:	e0fffc17 	ldw	r3,-16(fp)
    1b24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1b28:	e0bffc17 	ldw	r2,-16(fp)
    1b2c:	10c00017 	ldw	r3,0(r2)
    1b30:	e0bffd17 	ldw	r2,-12(fp)
    1b34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1b38:	e0bffc17 	ldw	r2,-16(fp)
    1b3c:	10800017 	ldw	r2,0(r2)
    1b40:	e0fffd17 	ldw	r3,-12(fp)
    1b44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1b48:	e0bffc17 	ldw	r2,-16(fp)
    1b4c:	e0fffd17 	ldw	r3,-12(fp)
    1b50:	10c00015 	stw	r3,0(r2)

  return 0;  
    1b54:	0005883a 	mov	r2,zero
}
    1b58:	e037883a 	mov	sp,fp
    1b5c:	dfc00117 	ldw	ra,4(sp)
    1b60:	df000017 	ldw	fp,0(sp)
    1b64:	dec00204 	addi	sp,sp,8
    1b68:	f800283a 	ret

00001b6c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1b6c:	defffa04 	addi	sp,sp,-24
    1b70:	dfc00515 	stw	ra,20(sp)
    1b74:	df000415 	stw	fp,16(sp)
    1b78:	df000404 	addi	fp,sp,16
    1b7c:	e13ffe15 	stw	r4,-8(fp)
    1b80:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    1b84:	e0bfff17 	ldw	r2,-4(fp)
    1b88:	10800017 	ldw	r2,0(r2)
    1b8c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    1b90:	e13ffe17 	ldw	r4,-8(fp)
    1b94:	0003db80 	call	3db8 <strlen>
    1b98:	10800044 	addi	r2,r2,1
    1b9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1ba0:	00000d06 	br	1bd8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    1ba4:	e0bffc17 	ldw	r2,-16(fp)
    1ba8:	10800217 	ldw	r2,8(r2)
    1bac:	e0fffd17 	ldw	r3,-12(fp)
    1bb0:	180d883a 	mov	r6,r3
    1bb4:	e17ffe17 	ldw	r5,-8(fp)
    1bb8:	1009883a 	mov	r4,r2
    1bbc:	00034e00 	call	34e0 <memcmp>
    1bc0:	1000021e 	bne	r2,zero,1bcc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    1bc4:	e0bffc17 	ldw	r2,-16(fp)
    1bc8:	00000706 	br	1be8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    1bcc:	e0bffc17 	ldw	r2,-16(fp)
    1bd0:	10800017 	ldw	r2,0(r2)
    1bd4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1bd8:	e0fffc17 	ldw	r3,-16(fp)
    1bdc:	e0bfff17 	ldw	r2,-4(fp)
    1be0:	18bff01e 	bne	r3,r2,1ba4 <__alt_mem_onchip_memory2_0+0xf7bfdba4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    1be4:	0005883a 	mov	r2,zero
}
    1be8:	e037883a 	mov	sp,fp
    1bec:	dfc00117 	ldw	ra,4(sp)
    1bf0:	df000017 	ldw	fp,0(sp)
    1bf4:	dec00204 	addi	sp,sp,8
    1bf8:	f800283a 	ret

00001bfc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1bfc:	defffe04 	addi	sp,sp,-8
    1c00:	dfc00115 	stw	ra,4(sp)
    1c04:	df000015 	stw	fp,0(sp)
    1c08:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    1c0c:	01440004 	movi	r5,4096
    1c10:	0009883a 	mov	r4,zero
    1c14:	000251c0 	call	251c <alt_icache_flush>
#endif
}
    1c18:	0001883a 	nop
    1c1c:	e037883a 	mov	sp,fp
    1c20:	dfc00117 	ldw	ra,4(sp)
    1c24:	df000017 	ldw	fp,0(sp)
    1c28:	dec00204 	addi	sp,sp,8
    1c2c:	f800283a 	ret

00001c30 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    1c30:	defff904 	addi	sp,sp,-28
    1c34:	dfc00615 	stw	ra,24(sp)
    1c38:	df000515 	stw	fp,20(sp)
    1c3c:	df000504 	addi	fp,sp,20
    1c40:	e13ffc15 	stw	r4,-16(fp)
    1c44:	e17ffd15 	stw	r5,-12(fp)
    1c48:	e1bffe15 	stw	r6,-8(fp)
    1c4c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    1c50:	e1bfff17 	ldw	r6,-4(fp)
    1c54:	e17ffe17 	ldw	r5,-8(fp)
    1c58:	e13ffd17 	ldw	r4,-12(fp)
    1c5c:	0001ff00 	call	1ff0 <open>
    1c60:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    1c64:	e0bffb17 	ldw	r2,-20(fp)
    1c68:	10001c16 	blt	r2,zero,1cdc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    1c6c:	00800034 	movhi	r2,0
    1c70:	109b9704 	addi	r2,r2,28252
    1c74:	e0fffb17 	ldw	r3,-20(fp)
    1c78:	18c00324 	muli	r3,r3,12
    1c7c:	10c5883a 	add	r2,r2,r3
    1c80:	10c00017 	ldw	r3,0(r2)
    1c84:	e0bffc17 	ldw	r2,-16(fp)
    1c88:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    1c8c:	00800034 	movhi	r2,0
    1c90:	109b9704 	addi	r2,r2,28252
    1c94:	e0fffb17 	ldw	r3,-20(fp)
    1c98:	18c00324 	muli	r3,r3,12
    1c9c:	10c5883a 	add	r2,r2,r3
    1ca0:	10800104 	addi	r2,r2,4
    1ca4:	10c00017 	ldw	r3,0(r2)
    1ca8:	e0bffc17 	ldw	r2,-16(fp)
    1cac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    1cb0:	00800034 	movhi	r2,0
    1cb4:	109b9704 	addi	r2,r2,28252
    1cb8:	e0fffb17 	ldw	r3,-20(fp)
    1cbc:	18c00324 	muli	r3,r3,12
    1cc0:	10c5883a 	add	r2,r2,r3
    1cc4:	10800204 	addi	r2,r2,8
    1cc8:	10c00017 	ldw	r3,0(r2)
    1ccc:	e0bffc17 	ldw	r2,-16(fp)
    1cd0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    1cd4:	e13ffb17 	ldw	r4,-20(fp)
    1cd8:	00021440 	call	2144 <alt_release_fd>
  }
} 
    1cdc:	0001883a 	nop
    1ce0:	e037883a 	mov	sp,fp
    1ce4:	dfc00117 	ldw	ra,4(sp)
    1ce8:	df000017 	ldw	fp,0(sp)
    1cec:	dec00204 	addi	sp,sp,8
    1cf0:	f800283a 	ret

00001cf4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1cf4:	defffb04 	addi	sp,sp,-20
    1cf8:	dfc00415 	stw	ra,16(sp)
    1cfc:	df000315 	stw	fp,12(sp)
    1d00:	df000304 	addi	fp,sp,12
    1d04:	e13ffd15 	stw	r4,-12(fp)
    1d08:	e17ffe15 	stw	r5,-8(fp)
    1d0c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    1d10:	01c07fc4 	movi	r7,511
    1d14:	01800044 	movi	r6,1
    1d18:	e17ffd17 	ldw	r5,-12(fp)
    1d1c:	01000034 	movhi	r4,0
    1d20:	211b9a04 	addi	r4,r4,28264
    1d24:	0001c300 	call	1c30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1d28:	01c07fc4 	movi	r7,511
    1d2c:	000d883a 	mov	r6,zero
    1d30:	e17ffe17 	ldw	r5,-8(fp)
    1d34:	01000034 	movhi	r4,0
    1d38:	211b9704 	addi	r4,r4,28252
    1d3c:	0001c300 	call	1c30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1d40:	01c07fc4 	movi	r7,511
    1d44:	01800044 	movi	r6,1
    1d48:	e17fff17 	ldw	r5,-4(fp)
    1d4c:	01000034 	movhi	r4,0
    1d50:	211b9d04 	addi	r4,r4,28276
    1d54:	0001c300 	call	1c30 <alt_open_fd>
}  
    1d58:	0001883a 	nop
    1d5c:	e037883a 	mov	sp,fp
    1d60:	dfc00117 	ldw	ra,4(sp)
    1d64:	df000017 	ldw	fp,0(sp)
    1d68:	dec00204 	addi	sp,sp,8
    1d6c:	f800283a 	ret

00001d70 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    1d70:	defff004 	addi	sp,sp,-64
    1d74:	df000f15 	stw	fp,60(sp)
    1d78:	df000f04 	addi	fp,sp,60
    1d7c:	e13ffd15 	stw	r4,-12(fp)
    1d80:	e17ffe15 	stw	r5,-8(fp)
    1d84:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    1d88:	00bffa84 	movi	r2,-22
    1d8c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1d90:	e0bffd17 	ldw	r2,-12(fp)
    1d94:	10800828 	cmpgeui	r2,r2,32
    1d98:	1000501e 	bne	r2,zero,1edc <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1d9c:	0005303a 	rdctl	r2,status
    1da0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1da4:	e0fff617 	ldw	r3,-40(fp)
    1da8:	00bfff84 	movi	r2,-2
    1dac:	1884703a 	and	r2,r3,r2
    1db0:	1001703a 	wrctl	status,r2
  
  return context;
    1db4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    1db8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    1dbc:	00800074 	movhi	r2,1
    1dc0:	10a4e604 	addi	r2,r2,-27752
    1dc4:	e0fffd17 	ldw	r3,-12(fp)
    1dc8:	180690fa 	slli	r3,r3,3
    1dcc:	10c5883a 	add	r2,r2,r3
    1dd0:	e0ffff17 	ldw	r3,-4(fp)
    1dd4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    1dd8:	00800074 	movhi	r2,1
    1ddc:	10a4e604 	addi	r2,r2,-27752
    1de0:	e0fffd17 	ldw	r3,-12(fp)
    1de4:	180690fa 	slli	r3,r3,3
    1de8:	10c5883a 	add	r2,r2,r3
    1dec:	10800104 	addi	r2,r2,4
    1df0:	e0fffe17 	ldw	r3,-8(fp)
    1df4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    1df8:	e0bfff17 	ldw	r2,-4(fp)
    1dfc:	10001926 	beq	r2,zero,1e64 <alt_irq_register+0xf4>
    1e00:	e0bffd17 	ldw	r2,-12(fp)
    1e04:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1e08:	0005303a 	rdctl	r2,status
    1e0c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1e10:	e0fff717 	ldw	r3,-36(fp)
    1e14:	00bfff84 	movi	r2,-2
    1e18:	1884703a 	and	r2,r3,r2
    1e1c:	1001703a 	wrctl	status,r2
  
  return context;
    1e20:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1e24:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    1e28:	00c00044 	movi	r3,1
    1e2c:	e0bff217 	ldw	r2,-56(fp)
    1e30:	1884983a 	sll	r2,r3,r2
    1e34:	1007883a 	mov	r3,r2
    1e38:	d0a6d217 	ldw	r2,-25784(gp)
    1e3c:	1884b03a 	or	r2,r3,r2
    1e40:	d0a6d215 	stw	r2,-25784(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1e44:	d0a6d217 	ldw	r2,-25784(gp)
    1e48:	100170fa 	wrctl	ienable,r2
    1e4c:	e0bff817 	ldw	r2,-32(fp)
    1e50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1e54:	e0bff917 	ldw	r2,-28(fp)
    1e58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1e5c:	0005883a 	mov	r2,zero
    1e60:	00001906 	br	1ec8 <alt_irq_register+0x158>
    1e64:	e0bffd17 	ldw	r2,-12(fp)
    1e68:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1e6c:	0005303a 	rdctl	r2,status
    1e70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1e74:	e0fffa17 	ldw	r3,-24(fp)
    1e78:	00bfff84 	movi	r2,-2
    1e7c:	1884703a 	and	r2,r3,r2
    1e80:	1001703a 	wrctl	status,r2
  
  return context;
    1e84:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1e88:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    1e8c:	00c00044 	movi	r3,1
    1e90:	e0bff417 	ldw	r2,-48(fp)
    1e94:	1884983a 	sll	r2,r3,r2
    1e98:	0084303a 	nor	r2,zero,r2
    1e9c:	1007883a 	mov	r3,r2
    1ea0:	d0a6d217 	ldw	r2,-25784(gp)
    1ea4:	1884703a 	and	r2,r3,r2
    1ea8:	d0a6d215 	stw	r2,-25784(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1eac:	d0a6d217 	ldw	r2,-25784(gp)
    1eb0:	100170fa 	wrctl	ienable,r2
    1eb4:	e0bffb17 	ldw	r2,-20(fp)
    1eb8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1ebc:	e0bffc17 	ldw	r2,-16(fp)
    1ec0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1ec4:	0005883a 	mov	r2,zero
    1ec8:	e0bff115 	stw	r2,-60(fp)
    1ecc:	e0bff317 	ldw	r2,-52(fp)
    1ed0:	e0bff515 	stw	r2,-44(fp)
    1ed4:	e0bff517 	ldw	r2,-44(fp)
    1ed8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    1edc:	e0bff117 	ldw	r2,-60(fp)
}
    1ee0:	e037883a 	mov	sp,fp
    1ee4:	df000017 	ldw	fp,0(sp)
    1ee8:	dec00104 	addi	sp,sp,4
    1eec:	f800283a 	ret

00001ef0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1ef0:	defffe04 	addi	sp,sp,-8
    1ef4:	dfc00115 	stw	ra,4(sp)
    1ef8:	df000015 	stw	fp,0(sp)
    1efc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1f00:	d0a00517 	ldw	r2,-32748(gp)
    1f04:	10000326 	beq	r2,zero,1f14 <alt_get_errno+0x24>
    1f08:	d0a00517 	ldw	r2,-32748(gp)
    1f0c:	103ee83a 	callr	r2
    1f10:	00000106 	br	1f18 <alt_get_errno+0x28>
    1f14:	d0a6d604 	addi	r2,gp,-25768
}
    1f18:	e037883a 	mov	sp,fp
    1f1c:	dfc00117 	ldw	ra,4(sp)
    1f20:	df000017 	ldw	fp,0(sp)
    1f24:	dec00204 	addi	sp,sp,8
    1f28:	f800283a 	ret

00001f2c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    1f2c:	defffd04 	addi	sp,sp,-12
    1f30:	df000215 	stw	fp,8(sp)
    1f34:	df000204 	addi	fp,sp,8
    1f38:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    1f3c:	e0bfff17 	ldw	r2,-4(fp)
    1f40:	10800217 	ldw	r2,8(r2)
    1f44:	10d00034 	orhi	r3,r2,16384
    1f48:	e0bfff17 	ldw	r2,-4(fp)
    1f4c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1f50:	e03ffe15 	stw	zero,-8(fp)
    1f54:	00001d06 	br	1fcc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1f58:	00800034 	movhi	r2,0
    1f5c:	109b9704 	addi	r2,r2,28252
    1f60:	e0fffe17 	ldw	r3,-8(fp)
    1f64:	18c00324 	muli	r3,r3,12
    1f68:	10c5883a 	add	r2,r2,r3
    1f6c:	10c00017 	ldw	r3,0(r2)
    1f70:	e0bfff17 	ldw	r2,-4(fp)
    1f74:	10800017 	ldw	r2,0(r2)
    1f78:	1880111e 	bne	r3,r2,1fc0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1f7c:	00800034 	movhi	r2,0
    1f80:	109b9704 	addi	r2,r2,28252
    1f84:	e0fffe17 	ldw	r3,-8(fp)
    1f88:	18c00324 	muli	r3,r3,12
    1f8c:	10c5883a 	add	r2,r2,r3
    1f90:	10800204 	addi	r2,r2,8
    1f94:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1f98:	1000090e 	bge	r2,zero,1fc0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    1f9c:	e0bffe17 	ldw	r2,-8(fp)
    1fa0:	10c00324 	muli	r3,r2,12
    1fa4:	00800034 	movhi	r2,0
    1fa8:	109b9704 	addi	r2,r2,28252
    1fac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1fb0:	e0bfff17 	ldw	r2,-4(fp)
    1fb4:	18800226 	beq	r3,r2,1fc0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    1fb8:	00bffcc4 	movi	r2,-13
    1fbc:	00000806 	br	1fe0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1fc0:	e0bffe17 	ldw	r2,-8(fp)
    1fc4:	10800044 	addi	r2,r2,1
    1fc8:	e0bffe15 	stw	r2,-8(fp)
    1fcc:	d0a00417 	ldw	r2,-32752(gp)
    1fd0:	1007883a 	mov	r3,r2
    1fd4:	e0bffe17 	ldw	r2,-8(fp)
    1fd8:	18bfdf2e 	bgeu	r3,r2,1f58 <__alt_mem_onchip_memory2_0+0xf7bfdf58>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    1fdc:	0005883a 	mov	r2,zero
}
    1fe0:	e037883a 	mov	sp,fp
    1fe4:	df000017 	ldw	fp,0(sp)
    1fe8:	dec00104 	addi	sp,sp,4
    1fec:	f800283a 	ret

00001ff0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1ff0:	defff604 	addi	sp,sp,-40
    1ff4:	dfc00915 	stw	ra,36(sp)
    1ff8:	df000815 	stw	fp,32(sp)
    1ffc:	df000804 	addi	fp,sp,32
    2000:	e13ffd15 	stw	r4,-12(fp)
    2004:	e17ffe15 	stw	r5,-8(fp)
    2008:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    200c:	00bfffc4 	movi	r2,-1
    2010:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    2014:	00bffb44 	movi	r2,-19
    2018:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    201c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2020:	d1600204 	addi	r5,gp,-32760
    2024:	e13ffd17 	ldw	r4,-12(fp)
    2028:	0001b6c0 	call	1b6c <alt_find_dev>
    202c:	e0bff815 	stw	r2,-32(fp)
    2030:	e0bff817 	ldw	r2,-32(fp)
    2034:	1000051e 	bne	r2,zero,204c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2038:	e13ffd17 	ldw	r4,-12(fp)
    203c:	00023700 	call	2370 <alt_find_file>
    2040:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    2044:	00800044 	movi	r2,1
    2048:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    204c:	e0bff817 	ldw	r2,-32(fp)
    2050:	10002926 	beq	r2,zero,20f8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    2054:	e13ff817 	ldw	r4,-32(fp)
    2058:	00024780 	call	2478 <alt_get_fd>
    205c:	e0bff915 	stw	r2,-28(fp)
    2060:	e0bff917 	ldw	r2,-28(fp)
    2064:	1000030e 	bge	r2,zero,2074 <open+0x84>
    {
      status = index;
    2068:	e0bff917 	ldw	r2,-28(fp)
    206c:	e0bffa15 	stw	r2,-24(fp)
    2070:	00002306 	br	2100 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    2074:	e0bff917 	ldw	r2,-28(fp)
    2078:	10c00324 	muli	r3,r2,12
    207c:	00800034 	movhi	r2,0
    2080:	109b9704 	addi	r2,r2,28252
    2084:	1885883a 	add	r2,r3,r2
    2088:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    208c:	e0fffe17 	ldw	r3,-8(fp)
    2090:	00900034 	movhi	r2,16384
    2094:	10bfffc4 	addi	r2,r2,-1
    2098:	1886703a 	and	r3,r3,r2
    209c:	e0bffc17 	ldw	r2,-16(fp)
    20a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    20a4:	e0bffb17 	ldw	r2,-20(fp)
    20a8:	1000051e 	bne	r2,zero,20c0 <open+0xd0>
    20ac:	e13ffc17 	ldw	r4,-16(fp)
    20b0:	0001f2c0 	call	1f2c <alt_file_locked>
    20b4:	e0bffa15 	stw	r2,-24(fp)
    20b8:	e0bffa17 	ldw	r2,-24(fp)
    20bc:	10001016 	blt	r2,zero,2100 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    20c0:	e0bff817 	ldw	r2,-32(fp)
    20c4:	10800317 	ldw	r2,12(r2)
    20c8:	10000826 	beq	r2,zero,20ec <open+0xfc>
    20cc:	e0bff817 	ldw	r2,-32(fp)
    20d0:	10800317 	ldw	r2,12(r2)
    20d4:	e1ffff17 	ldw	r7,-4(fp)
    20d8:	e1bffe17 	ldw	r6,-8(fp)
    20dc:	e17ffd17 	ldw	r5,-12(fp)
    20e0:	e13ffc17 	ldw	r4,-16(fp)
    20e4:	103ee83a 	callr	r2
    20e8:	00000106 	br	20f0 <open+0x100>
    20ec:	0005883a 	mov	r2,zero
    20f0:	e0bffa15 	stw	r2,-24(fp)
    20f4:	00000206 	br	2100 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    20f8:	00bffb44 	movi	r2,-19
    20fc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2100:	e0bffa17 	ldw	r2,-24(fp)
    2104:	1000090e 	bge	r2,zero,212c <open+0x13c>
  {
    alt_release_fd (index);  
    2108:	e13ff917 	ldw	r4,-28(fp)
    210c:	00021440 	call	2144 <alt_release_fd>
    ALT_ERRNO = -status;
    2110:	0001ef00 	call	1ef0 <alt_get_errno>
    2114:	1007883a 	mov	r3,r2
    2118:	e0bffa17 	ldw	r2,-24(fp)
    211c:	0085c83a 	sub	r2,zero,r2
    2120:	18800015 	stw	r2,0(r3)
    return -1;
    2124:	00bfffc4 	movi	r2,-1
    2128:	00000106 	br	2130 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    212c:	e0bff917 	ldw	r2,-28(fp)
}
    2130:	e037883a 	mov	sp,fp
    2134:	dfc00117 	ldw	ra,4(sp)
    2138:	df000017 	ldw	fp,0(sp)
    213c:	dec00204 	addi	sp,sp,8
    2140:	f800283a 	ret

00002144 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2144:	defffe04 	addi	sp,sp,-8
    2148:	df000115 	stw	fp,4(sp)
    214c:	df000104 	addi	fp,sp,4
    2150:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    2154:	e0bfff17 	ldw	r2,-4(fp)
    2158:	108000d0 	cmplti	r2,r2,3
    215c:	10000d1e 	bne	r2,zero,2194 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    2160:	00800034 	movhi	r2,0
    2164:	109b9704 	addi	r2,r2,28252
    2168:	e0ffff17 	ldw	r3,-4(fp)
    216c:	18c00324 	muli	r3,r3,12
    2170:	10c5883a 	add	r2,r2,r3
    2174:	10800204 	addi	r2,r2,8
    2178:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    217c:	00800034 	movhi	r2,0
    2180:	109b9704 	addi	r2,r2,28252
    2184:	e0ffff17 	ldw	r3,-4(fp)
    2188:	18c00324 	muli	r3,r3,12
    218c:	10c5883a 	add	r2,r2,r3
    2190:	10000015 	stw	zero,0(r2)
  }
}
    2194:	0001883a 	nop
    2198:	e037883a 	mov	sp,fp
    219c:	df000017 	ldw	fp,0(sp)
    21a0:	dec00104 	addi	sp,sp,4
    21a4:	f800283a 	ret

000021a8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    21a8:	defffa04 	addi	sp,sp,-24
    21ac:	df000515 	stw	fp,20(sp)
    21b0:	df000504 	addi	fp,sp,20
    21b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    21b8:	0005303a 	rdctl	r2,status
    21bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    21c0:	e0fffc17 	ldw	r3,-16(fp)
    21c4:	00bfff84 	movi	r2,-2
    21c8:	1884703a 	and	r2,r3,r2
    21cc:	1001703a 	wrctl	status,r2
  
  return context;
    21d0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    21d4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    21d8:	e0bfff17 	ldw	r2,-4(fp)
    21dc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    21e0:	e0bffd17 	ldw	r2,-12(fp)
    21e4:	10800017 	ldw	r2,0(r2)
    21e8:	e0fffd17 	ldw	r3,-12(fp)
    21ec:	18c00117 	ldw	r3,4(r3)
    21f0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    21f4:	e0bffd17 	ldw	r2,-12(fp)
    21f8:	10800117 	ldw	r2,4(r2)
    21fc:	e0fffd17 	ldw	r3,-12(fp)
    2200:	18c00017 	ldw	r3,0(r3)
    2204:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2208:	e0bffd17 	ldw	r2,-12(fp)
    220c:	e0fffd17 	ldw	r3,-12(fp)
    2210:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    2214:	e0bffd17 	ldw	r2,-12(fp)
    2218:	e0fffd17 	ldw	r3,-12(fp)
    221c:	10c00015 	stw	r3,0(r2)
    2220:	e0bffb17 	ldw	r2,-20(fp)
    2224:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2228:	e0bffe17 	ldw	r2,-8(fp)
    222c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    2230:	0001883a 	nop
    2234:	e037883a 	mov	sp,fp
    2238:	df000017 	ldw	fp,0(sp)
    223c:	dec00104 	addi	sp,sp,4
    2240:	f800283a 	ret

00002244 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2244:	defffb04 	addi	sp,sp,-20
    2248:	dfc00415 	stw	ra,16(sp)
    224c:	df000315 	stw	fp,12(sp)
    2250:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2254:	d0a00717 	ldw	r2,-32740(gp)
    2258:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    225c:	d0a6d417 	ldw	r2,-25776(gp)
    2260:	10800044 	addi	r2,r2,1
    2264:	d0a6d415 	stw	r2,-25776(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2268:	00002e06 	br	2324 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    226c:	e0bffd17 	ldw	r2,-12(fp)
    2270:	10800017 	ldw	r2,0(r2)
    2274:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2278:	e0bffd17 	ldw	r2,-12(fp)
    227c:	10800403 	ldbu	r2,16(r2)
    2280:	10803fcc 	andi	r2,r2,255
    2284:	10000426 	beq	r2,zero,2298 <alt_tick+0x54>
    2288:	d0a6d417 	ldw	r2,-25776(gp)
    228c:	1000021e 	bne	r2,zero,2298 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    2290:	e0bffd17 	ldw	r2,-12(fp)
    2294:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2298:	e0bffd17 	ldw	r2,-12(fp)
    229c:	10800217 	ldw	r2,8(r2)
    22a0:	d0e6d417 	ldw	r3,-25776(gp)
    22a4:	18801d36 	bltu	r3,r2,231c <alt_tick+0xd8>
    22a8:	e0bffd17 	ldw	r2,-12(fp)
    22ac:	10800403 	ldbu	r2,16(r2)
    22b0:	10803fcc 	andi	r2,r2,255
    22b4:	1000191e 	bne	r2,zero,231c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    22b8:	e0bffd17 	ldw	r2,-12(fp)
    22bc:	10800317 	ldw	r2,12(r2)
    22c0:	e0fffd17 	ldw	r3,-12(fp)
    22c4:	18c00517 	ldw	r3,20(r3)
    22c8:	1809883a 	mov	r4,r3
    22cc:	103ee83a 	callr	r2
    22d0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    22d4:	e0bfff17 	ldw	r2,-4(fp)
    22d8:	1000031e 	bne	r2,zero,22e8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    22dc:	e13ffd17 	ldw	r4,-12(fp)
    22e0:	00021a80 	call	21a8 <alt_alarm_stop>
    22e4:	00000d06 	br	231c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    22e8:	e0bffd17 	ldw	r2,-12(fp)
    22ec:	10c00217 	ldw	r3,8(r2)
    22f0:	e0bfff17 	ldw	r2,-4(fp)
    22f4:	1887883a 	add	r3,r3,r2
    22f8:	e0bffd17 	ldw	r2,-12(fp)
    22fc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2300:	e0bffd17 	ldw	r2,-12(fp)
    2304:	10c00217 	ldw	r3,8(r2)
    2308:	d0a6d417 	ldw	r2,-25776(gp)
    230c:	1880032e 	bgeu	r3,r2,231c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    2310:	e0bffd17 	ldw	r2,-12(fp)
    2314:	00c00044 	movi	r3,1
    2318:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    231c:	e0bffe17 	ldw	r2,-8(fp)
    2320:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2324:	e0fffd17 	ldw	r3,-12(fp)
    2328:	d0a00704 	addi	r2,gp,-32740
    232c:	18bfcf1e 	bne	r3,r2,226c <__alt_mem_onchip_memory2_0+0xf7bfe26c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    2330:	0001883a 	nop
}
    2334:	0001883a 	nop
    2338:	e037883a 	mov	sp,fp
    233c:	dfc00117 	ldw	ra,4(sp)
    2340:	df000017 	ldw	fp,0(sp)
    2344:	dec00204 	addi	sp,sp,8
    2348:	f800283a 	ret

0000234c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    234c:	deffff04 	addi	sp,sp,-4
    2350:	df000015 	stw	fp,0(sp)
    2354:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2358:	000170fa 	wrctl	ienable,zero
}
    235c:	0001883a 	nop
    2360:	e037883a 	mov	sp,fp
    2364:	df000017 	ldw	fp,0(sp)
    2368:	dec00104 	addi	sp,sp,4
    236c:	f800283a 	ret

00002370 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2370:	defffb04 	addi	sp,sp,-20
    2374:	dfc00415 	stw	ra,16(sp)
    2378:	df000315 	stw	fp,12(sp)
    237c:	df000304 	addi	fp,sp,12
    2380:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2384:	d0a00017 	ldw	r2,-32768(gp)
    2388:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    238c:	00003106 	br	2454 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    2390:	e0bffd17 	ldw	r2,-12(fp)
    2394:	10800217 	ldw	r2,8(r2)
    2398:	1009883a 	mov	r4,r2
    239c:	0003db80 	call	3db8 <strlen>
    23a0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    23a4:	e0bffd17 	ldw	r2,-12(fp)
    23a8:	10c00217 	ldw	r3,8(r2)
    23ac:	e0bffe17 	ldw	r2,-8(fp)
    23b0:	10bfffc4 	addi	r2,r2,-1
    23b4:	1885883a 	add	r2,r3,r2
    23b8:	10800003 	ldbu	r2,0(r2)
    23bc:	10803fcc 	andi	r2,r2,255
    23c0:	1080201c 	xori	r2,r2,128
    23c4:	10bfe004 	addi	r2,r2,-128
    23c8:	10800bd8 	cmpnei	r2,r2,47
    23cc:	1000031e 	bne	r2,zero,23dc <alt_find_file+0x6c>
    {
      len -= 1;
    23d0:	e0bffe17 	ldw	r2,-8(fp)
    23d4:	10bfffc4 	addi	r2,r2,-1
    23d8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    23dc:	e0bffe17 	ldw	r2,-8(fp)
    23e0:	e0ffff17 	ldw	r3,-4(fp)
    23e4:	1885883a 	add	r2,r3,r2
    23e8:	10800003 	ldbu	r2,0(r2)
    23ec:	10803fcc 	andi	r2,r2,255
    23f0:	1080201c 	xori	r2,r2,128
    23f4:	10bfe004 	addi	r2,r2,-128
    23f8:	10800be0 	cmpeqi	r2,r2,47
    23fc:	1000081e 	bne	r2,zero,2420 <alt_find_file+0xb0>
    2400:	e0bffe17 	ldw	r2,-8(fp)
    2404:	e0ffff17 	ldw	r3,-4(fp)
    2408:	1885883a 	add	r2,r3,r2
    240c:	10800003 	ldbu	r2,0(r2)
    2410:	10803fcc 	andi	r2,r2,255
    2414:	1080201c 	xori	r2,r2,128
    2418:	10bfe004 	addi	r2,r2,-128
    241c:	10000a1e 	bne	r2,zero,2448 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    2420:	e0bffd17 	ldw	r2,-12(fp)
    2424:	10800217 	ldw	r2,8(r2)
    2428:	e0fffe17 	ldw	r3,-8(fp)
    242c:	180d883a 	mov	r6,r3
    2430:	e17fff17 	ldw	r5,-4(fp)
    2434:	1009883a 	mov	r4,r2
    2438:	00034e00 	call	34e0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    243c:	1000021e 	bne	r2,zero,2448 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    2440:	e0bffd17 	ldw	r2,-12(fp)
    2444:	00000706 	br	2464 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    2448:	e0bffd17 	ldw	r2,-12(fp)
    244c:	10800017 	ldw	r2,0(r2)
    2450:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2454:	e0fffd17 	ldw	r3,-12(fp)
    2458:	d0a00004 	addi	r2,gp,-32768
    245c:	18bfcc1e 	bne	r3,r2,2390 <__alt_mem_onchip_memory2_0+0xf7bfe390>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    2460:	0005883a 	mov	r2,zero
}
    2464:	e037883a 	mov	sp,fp
    2468:	dfc00117 	ldw	ra,4(sp)
    246c:	df000017 	ldw	fp,0(sp)
    2470:	dec00204 	addi	sp,sp,8
    2474:	f800283a 	ret

00002478 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2478:	defffc04 	addi	sp,sp,-16
    247c:	df000315 	stw	fp,12(sp)
    2480:	df000304 	addi	fp,sp,12
    2484:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    2488:	00bffa04 	movi	r2,-24
    248c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2490:	e03ffd15 	stw	zero,-12(fp)
    2494:	00001906 	br	24fc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    2498:	00800034 	movhi	r2,0
    249c:	109b9704 	addi	r2,r2,28252
    24a0:	e0fffd17 	ldw	r3,-12(fp)
    24a4:	18c00324 	muli	r3,r3,12
    24a8:	10c5883a 	add	r2,r2,r3
    24ac:	10800017 	ldw	r2,0(r2)
    24b0:	10000f1e 	bne	r2,zero,24f0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    24b4:	00800034 	movhi	r2,0
    24b8:	109b9704 	addi	r2,r2,28252
    24bc:	e0fffd17 	ldw	r3,-12(fp)
    24c0:	18c00324 	muli	r3,r3,12
    24c4:	10c5883a 	add	r2,r2,r3
    24c8:	e0ffff17 	ldw	r3,-4(fp)
    24cc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    24d0:	d0e00417 	ldw	r3,-32752(gp)
    24d4:	e0bffd17 	ldw	r2,-12(fp)
    24d8:	1880020e 	bge	r3,r2,24e4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    24dc:	e0bffd17 	ldw	r2,-12(fp)
    24e0:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
    24e4:	e0bffd17 	ldw	r2,-12(fp)
    24e8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    24ec:	00000606 	br	2508 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    24f0:	e0bffd17 	ldw	r2,-12(fp)
    24f4:	10800044 	addi	r2,r2,1
    24f8:	e0bffd15 	stw	r2,-12(fp)
    24fc:	e0bffd17 	ldw	r2,-12(fp)
    2500:	10800810 	cmplti	r2,r2,32
    2504:	103fe41e 	bne	r2,zero,2498 <__alt_mem_onchip_memory2_0+0xf7bfe498>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    2508:	e0bffe17 	ldw	r2,-8(fp)
}
    250c:	e037883a 	mov	sp,fp
    2510:	df000017 	ldw	fp,0(sp)
    2514:	dec00104 	addi	sp,sp,4
    2518:	f800283a 	ret

0000251c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    251c:	defffb04 	addi	sp,sp,-20
    2520:	df000415 	stw	fp,16(sp)
    2524:	df000404 	addi	fp,sp,16
    2528:	e13ffe15 	stw	r4,-8(fp)
    252c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    2530:	e0bfff17 	ldw	r2,-4(fp)
    2534:	10840070 	cmpltui	r2,r2,4097
    2538:	1000021e 	bne	r2,zero,2544 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    253c:	00840004 	movi	r2,4096
    2540:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    2544:	e0fffe17 	ldw	r3,-8(fp)
    2548:	e0bfff17 	ldw	r2,-4(fp)
    254c:	1885883a 	add	r2,r3,r2
    2550:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2554:	e0bffe17 	ldw	r2,-8(fp)
    2558:	e0bffc15 	stw	r2,-16(fp)
    255c:	00000506 	br	2574 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    2560:	e0bffc17 	ldw	r2,-16(fp)
    2564:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2568:	e0bffc17 	ldw	r2,-16(fp)
    256c:	10800804 	addi	r2,r2,32
    2570:	e0bffc15 	stw	r2,-16(fp)
    2574:	e0fffc17 	ldw	r3,-16(fp)
    2578:	e0bffd17 	ldw	r2,-12(fp)
    257c:	18bff836 	bltu	r3,r2,2560 <__alt_mem_onchip_memory2_0+0xf7bfe560>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    2580:	e0bffe17 	ldw	r2,-8(fp)
    2584:	108007cc 	andi	r2,r2,31
    2588:	10000226 	beq	r2,zero,2594 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    258c:	e0bffc17 	ldw	r2,-16(fp)
    2590:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2594:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    2598:	0001883a 	nop
    259c:	e037883a 	mov	sp,fp
    25a0:	df000017 	ldw	fp,0(sp)
    25a4:	dec00104 	addi	sp,sp,4
    25a8:	f800283a 	ret

000025ac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    25ac:	defffe04 	addi	sp,sp,-8
    25b0:	df000115 	stw	fp,4(sp)
    25b4:	df000104 	addi	fp,sp,4
    25b8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    25bc:	e0bfff17 	ldw	r2,-4(fp)
    25c0:	10bffe84 	addi	r2,r2,-6
    25c4:	10c00428 	cmpgeui	r3,r2,16
    25c8:	18001a1e 	bne	r3,zero,2634 <alt_exception_cause_generated_bad_addr+0x88>
    25cc:	100690ba 	slli	r3,r2,2
    25d0:	00800034 	movhi	r2,0
    25d4:	10897904 	addi	r2,r2,9700
    25d8:	1885883a 	add	r2,r3,r2
    25dc:	10800017 	ldw	r2,0(r2)
    25e0:	1000683a 	jmp	r2
    25e4:	00002624 	muli	zero,zero,152
    25e8:	00002624 	muli	zero,zero,152
    25ec:	00002634 	movhi	zero,152
    25f0:	00002634 	movhi	zero,152
    25f4:	00002634 	movhi	zero,152
    25f8:	00002624 	muli	zero,zero,152
    25fc:	0000262c 	andhi	zero,zero,152
    2600:	00002634 	movhi	zero,152
    2604:	00002624 	muli	zero,zero,152
    2608:	00002624 	muli	zero,zero,152
    260c:	00002634 	movhi	zero,152
    2610:	00002624 	muli	zero,zero,152
    2614:	0000262c 	andhi	zero,zero,152
    2618:	00002634 	movhi	zero,152
    261c:	00002634 	movhi	zero,152
    2620:	00002624 	muli	zero,zero,152
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    2624:	00800044 	movi	r2,1
    2628:	00000306 	br	2638 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    262c:	0005883a 	mov	r2,zero
    2630:	00000106 	br	2638 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    2634:	0005883a 	mov	r2,zero
  }
}
    2638:	e037883a 	mov	sp,fp
    263c:	df000017 	ldw	fp,0(sp)
    2640:	dec00104 	addi	sp,sp,4
    2644:	f800283a 	ret

00002648 <exit>:
    2648:	defffe04 	addi	sp,sp,-8
    264c:	000b883a 	mov	r5,zero
    2650:	dc000015 	stw	r16,0(sp)
    2654:	dfc00115 	stw	ra,4(sp)
    2658:	2021883a 	mov	r16,r4
    265c:	0003fa40 	call	3fa4 <__call_exitprocs>
    2660:	00800034 	movhi	r2,0
    2664:	109e0b04 	addi	r2,r2,30764
    2668:	11000017 	ldw	r4,0(r2)
    266c:	20800f17 	ldw	r2,60(r4)
    2670:	10000126 	beq	r2,zero,2678 <exit+0x30>
    2674:	103ee83a 	callr	r2
    2678:	8009883a 	mov	r4,r16
    267c:	00056240 	call	5624 <_exit>

00002680 <_fputs_r>:
    2680:	defff804 	addi	sp,sp,-32
    2684:	dc400615 	stw	r17,24(sp)
    2688:	2023883a 	mov	r17,r4
    268c:	2809883a 	mov	r4,r5
    2690:	dc000515 	stw	r16,20(sp)
    2694:	dfc00715 	stw	ra,28(sp)
    2698:	3021883a 	mov	r16,r6
    269c:	d9400315 	stw	r5,12(sp)
    26a0:	0003db80 	call	3db8 <strlen>
    26a4:	d8800215 	stw	r2,8(sp)
    26a8:	d8800415 	stw	r2,16(sp)
    26ac:	d8800304 	addi	r2,sp,12
    26b0:	d8800015 	stw	r2,0(sp)
    26b4:	00800044 	movi	r2,1
    26b8:	d8800115 	stw	r2,4(sp)
    26bc:	88000226 	beq	r17,zero,26c8 <_fputs_r+0x48>
    26c0:	88800e17 	ldw	r2,56(r17)
    26c4:	10001226 	beq	r2,zero,2710 <_fputs_r+0x90>
    26c8:	8080030b 	ldhu	r2,12(r16)
    26cc:	10c8000c 	andi	r3,r2,8192
    26d0:	1800061e 	bne	r3,zero,26ec <_fputs_r+0x6c>
    26d4:	81001917 	ldw	r4,100(r16)
    26d8:	00f7ffc4 	movi	r3,-8193
    26dc:	10880014 	ori	r2,r2,8192
    26e0:	20c6703a 	and	r3,r4,r3
    26e4:	8080030d 	sth	r2,12(r16)
    26e8:	80c01915 	stw	r3,100(r16)
    26ec:	d80d883a 	mov	r6,sp
    26f0:	800b883a 	mov	r5,r16
    26f4:	8809883a 	mov	r4,r17
    26f8:	00027340 	call	2734 <__sfvwrite_r>
    26fc:	dfc00717 	ldw	ra,28(sp)
    2700:	dc400617 	ldw	r17,24(sp)
    2704:	dc000517 	ldw	r16,20(sp)
    2708:	dec00804 	addi	sp,sp,32
    270c:	f800283a 	ret
    2710:	8809883a 	mov	r4,r17
    2714:	000471c0 	call	471c <__sinit>
    2718:	003feb06 	br	26c8 <__alt_mem_onchip_memory2_0+0xf7bfe6c8>

0000271c <fputs>:
    271c:	00800034 	movhi	r2,0
    2720:	109e0c04 	addi	r2,r2,30768
    2724:	280d883a 	mov	r6,r5
    2728:	200b883a 	mov	r5,r4
    272c:	11000017 	ldw	r4,0(r2)
    2730:	00026801 	jmpi	2680 <_fputs_r>

00002734 <__sfvwrite_r>:
    2734:	30800217 	ldw	r2,8(r6)
    2738:	10006726 	beq	r2,zero,28d8 <__sfvwrite_r+0x1a4>
    273c:	28c0030b 	ldhu	r3,12(r5)
    2740:	defff404 	addi	sp,sp,-48
    2744:	dd400715 	stw	r21,28(sp)
    2748:	dd000615 	stw	r20,24(sp)
    274c:	dc000215 	stw	r16,8(sp)
    2750:	dfc00b15 	stw	ra,44(sp)
    2754:	df000a15 	stw	fp,40(sp)
    2758:	ddc00915 	stw	r23,36(sp)
    275c:	dd800815 	stw	r22,32(sp)
    2760:	dcc00515 	stw	r19,20(sp)
    2764:	dc800415 	stw	r18,16(sp)
    2768:	dc400315 	stw	r17,12(sp)
    276c:	1880020c 	andi	r2,r3,8
    2770:	2821883a 	mov	r16,r5
    2774:	202b883a 	mov	r21,r4
    2778:	3029883a 	mov	r20,r6
    277c:	10002726 	beq	r2,zero,281c <__sfvwrite_r+0xe8>
    2780:	28800417 	ldw	r2,16(r5)
    2784:	10002526 	beq	r2,zero,281c <__sfvwrite_r+0xe8>
    2788:	1880008c 	andi	r2,r3,2
    278c:	a4400017 	ldw	r17,0(r20)
    2790:	10002a26 	beq	r2,zero,283c <__sfvwrite_r+0x108>
    2794:	05a00034 	movhi	r22,32768
    2798:	0027883a 	mov	r19,zero
    279c:	0025883a 	mov	r18,zero
    27a0:	b5bf0004 	addi	r22,r22,-1024
    27a4:	980d883a 	mov	r6,r19
    27a8:	a809883a 	mov	r4,r21
    27ac:	90004626 	beq	r18,zero,28c8 <__sfvwrite_r+0x194>
    27b0:	900f883a 	mov	r7,r18
    27b4:	b480022e 	bgeu	r22,r18,27c0 <__sfvwrite_r+0x8c>
    27b8:	01e00034 	movhi	r7,32768
    27bc:	39ff0004 	addi	r7,r7,-1024
    27c0:	80800917 	ldw	r2,36(r16)
    27c4:	81400717 	ldw	r5,28(r16)
    27c8:	103ee83a 	callr	r2
    27cc:	0080570e 	bge	zero,r2,292c <__sfvwrite_r+0x1f8>
    27d0:	a0c00217 	ldw	r3,8(r20)
    27d4:	98a7883a 	add	r19,r19,r2
    27d8:	90a5c83a 	sub	r18,r18,r2
    27dc:	1885c83a 	sub	r2,r3,r2
    27e0:	a0800215 	stw	r2,8(r20)
    27e4:	103fef1e 	bne	r2,zero,27a4 <__alt_mem_onchip_memory2_0+0xf7bfe7a4>
    27e8:	0005883a 	mov	r2,zero
    27ec:	dfc00b17 	ldw	ra,44(sp)
    27f0:	df000a17 	ldw	fp,40(sp)
    27f4:	ddc00917 	ldw	r23,36(sp)
    27f8:	dd800817 	ldw	r22,32(sp)
    27fc:	dd400717 	ldw	r21,28(sp)
    2800:	dd000617 	ldw	r20,24(sp)
    2804:	dcc00517 	ldw	r19,20(sp)
    2808:	dc800417 	ldw	r18,16(sp)
    280c:	dc400317 	ldw	r17,12(sp)
    2810:	dc000217 	ldw	r16,8(sp)
    2814:	dec00c04 	addi	sp,sp,48
    2818:	f800283a 	ret
    281c:	800b883a 	mov	r5,r16
    2820:	a809883a 	mov	r4,r21
    2824:	0003e500 	call	3e50 <__swsetup_r>
    2828:	1000eb1e 	bne	r2,zero,2bd8 <__sfvwrite_r+0x4a4>
    282c:	80c0030b 	ldhu	r3,12(r16)
    2830:	a4400017 	ldw	r17,0(r20)
    2834:	1880008c 	andi	r2,r3,2
    2838:	103fd61e 	bne	r2,zero,2794 <__alt_mem_onchip_memory2_0+0xf7bfe794>
    283c:	1880004c 	andi	r2,r3,1
    2840:	10003f1e 	bne	r2,zero,2940 <__sfvwrite_r+0x20c>
    2844:	0039883a 	mov	fp,zero
    2848:	0025883a 	mov	r18,zero
    284c:	90001a26 	beq	r18,zero,28b8 <__sfvwrite_r+0x184>
    2850:	1880800c 	andi	r2,r3,512
    2854:	84c00217 	ldw	r19,8(r16)
    2858:	10002126 	beq	r2,zero,28e0 <__sfvwrite_r+0x1ac>
    285c:	982f883a 	mov	r23,r19
    2860:	94c09336 	bltu	r18,r19,2ab0 <__sfvwrite_r+0x37c>
    2864:	1881200c 	andi	r2,r3,1152
    2868:	10009e1e 	bne	r2,zero,2ae4 <__sfvwrite_r+0x3b0>
    286c:	81000017 	ldw	r4,0(r16)
    2870:	b80d883a 	mov	r6,r23
    2874:	e00b883a 	mov	r5,fp
    2878:	00036a40 	call	36a4 <memmove>
    287c:	80c00217 	ldw	r3,8(r16)
    2880:	81000017 	ldw	r4,0(r16)
    2884:	9005883a 	mov	r2,r18
    2888:	1ce7c83a 	sub	r19,r3,r19
    288c:	25cf883a 	add	r7,r4,r23
    2890:	84c00215 	stw	r19,8(r16)
    2894:	81c00015 	stw	r7,0(r16)
    2898:	a0c00217 	ldw	r3,8(r20)
    289c:	e0b9883a 	add	fp,fp,r2
    28a0:	90a5c83a 	sub	r18,r18,r2
    28a4:	18a7c83a 	sub	r19,r3,r2
    28a8:	a4c00215 	stw	r19,8(r20)
    28ac:	983fce26 	beq	r19,zero,27e8 <__alt_mem_onchip_memory2_0+0xf7bfe7e8>
    28b0:	80c0030b 	ldhu	r3,12(r16)
    28b4:	903fe61e 	bne	r18,zero,2850 <__alt_mem_onchip_memory2_0+0xf7bfe850>
    28b8:	8f000017 	ldw	fp,0(r17)
    28bc:	8c800117 	ldw	r18,4(r17)
    28c0:	8c400204 	addi	r17,r17,8
    28c4:	003fe106 	br	284c <__alt_mem_onchip_memory2_0+0xf7bfe84c>
    28c8:	8cc00017 	ldw	r19,0(r17)
    28cc:	8c800117 	ldw	r18,4(r17)
    28d0:	8c400204 	addi	r17,r17,8
    28d4:	003fb306 	br	27a4 <__alt_mem_onchip_memory2_0+0xf7bfe7a4>
    28d8:	0005883a 	mov	r2,zero
    28dc:	f800283a 	ret
    28e0:	81000017 	ldw	r4,0(r16)
    28e4:	80800417 	ldw	r2,16(r16)
    28e8:	11005736 	bltu	r2,r4,2a48 <__sfvwrite_r+0x314>
    28ec:	85c00517 	ldw	r23,20(r16)
    28f0:	95c05536 	bltu	r18,r23,2a48 <__sfvwrite_r+0x314>
    28f4:	00a00034 	movhi	r2,32768
    28f8:	10bfffc4 	addi	r2,r2,-1
    28fc:	9009883a 	mov	r4,r18
    2900:	1480012e 	bgeu	r2,r18,2908 <__sfvwrite_r+0x1d4>
    2904:	1009883a 	mov	r4,r2
    2908:	b80b883a 	mov	r5,r23
    290c:	00054700 	call	5470 <__divsi3>
    2910:	15cf383a 	mul	r7,r2,r23
    2914:	81400717 	ldw	r5,28(r16)
    2918:	80800917 	ldw	r2,36(r16)
    291c:	e00d883a 	mov	r6,fp
    2920:	a809883a 	mov	r4,r21
    2924:	103ee83a 	callr	r2
    2928:	00bfdb16 	blt	zero,r2,2898 <__alt_mem_onchip_memory2_0+0xf7bfe898>
    292c:	8080030b 	ldhu	r2,12(r16)
    2930:	10801014 	ori	r2,r2,64
    2934:	8080030d 	sth	r2,12(r16)
    2938:	00bfffc4 	movi	r2,-1
    293c:	003fab06 	br	27ec <__alt_mem_onchip_memory2_0+0xf7bfe7ec>
    2940:	0027883a 	mov	r19,zero
    2944:	0011883a 	mov	r8,zero
    2948:	0039883a 	mov	fp,zero
    294c:	0025883a 	mov	r18,zero
    2950:	90001f26 	beq	r18,zero,29d0 <__sfvwrite_r+0x29c>
    2954:	40005a26 	beq	r8,zero,2ac0 <__sfvwrite_r+0x38c>
    2958:	982d883a 	mov	r22,r19
    295c:	94c0012e 	bgeu	r18,r19,2964 <__sfvwrite_r+0x230>
    2960:	902d883a 	mov	r22,r18
    2964:	81000017 	ldw	r4,0(r16)
    2968:	80800417 	ldw	r2,16(r16)
    296c:	b02f883a 	mov	r23,r22
    2970:	81c00517 	ldw	r7,20(r16)
    2974:	1100032e 	bgeu	r2,r4,2984 <__sfvwrite_r+0x250>
    2978:	80c00217 	ldw	r3,8(r16)
    297c:	38c7883a 	add	r3,r7,r3
    2980:	1d801816 	blt	r3,r22,29e4 <__sfvwrite_r+0x2b0>
    2984:	b1c03e16 	blt	r22,r7,2a80 <__sfvwrite_r+0x34c>
    2988:	80800917 	ldw	r2,36(r16)
    298c:	81400717 	ldw	r5,28(r16)
    2990:	e00d883a 	mov	r6,fp
    2994:	da000115 	stw	r8,4(sp)
    2998:	a809883a 	mov	r4,r21
    299c:	103ee83a 	callr	r2
    29a0:	102f883a 	mov	r23,r2
    29a4:	da000117 	ldw	r8,4(sp)
    29a8:	00bfe00e 	bge	zero,r2,292c <__alt_mem_onchip_memory2_0+0xf7bfe92c>
    29ac:	9de7c83a 	sub	r19,r19,r23
    29b0:	98001f26 	beq	r19,zero,2a30 <__sfvwrite_r+0x2fc>
    29b4:	a0800217 	ldw	r2,8(r20)
    29b8:	e5f9883a 	add	fp,fp,r23
    29bc:	95e5c83a 	sub	r18,r18,r23
    29c0:	15efc83a 	sub	r23,r2,r23
    29c4:	a5c00215 	stw	r23,8(r20)
    29c8:	b83f8726 	beq	r23,zero,27e8 <__alt_mem_onchip_memory2_0+0xf7bfe7e8>
    29cc:	903fe11e 	bne	r18,zero,2954 <__alt_mem_onchip_memory2_0+0xf7bfe954>
    29d0:	8f000017 	ldw	fp,0(r17)
    29d4:	8c800117 	ldw	r18,4(r17)
    29d8:	0011883a 	mov	r8,zero
    29dc:	8c400204 	addi	r17,r17,8
    29e0:	003fdb06 	br	2950 <__alt_mem_onchip_memory2_0+0xf7bfe950>
    29e4:	180d883a 	mov	r6,r3
    29e8:	e00b883a 	mov	r5,fp
    29ec:	da000115 	stw	r8,4(sp)
    29f0:	d8c00015 	stw	r3,0(sp)
    29f4:	00036a40 	call	36a4 <memmove>
    29f8:	d8c00017 	ldw	r3,0(sp)
    29fc:	80800017 	ldw	r2,0(r16)
    2a00:	800b883a 	mov	r5,r16
    2a04:	a809883a 	mov	r4,r21
    2a08:	10c5883a 	add	r2,r2,r3
    2a0c:	80800015 	stw	r2,0(r16)
    2a10:	d8c00015 	stw	r3,0(sp)
    2a14:	00043400 	call	4340 <_fflush_r>
    2a18:	d8c00017 	ldw	r3,0(sp)
    2a1c:	da000117 	ldw	r8,4(sp)
    2a20:	103fc21e 	bne	r2,zero,292c <__alt_mem_onchip_memory2_0+0xf7bfe92c>
    2a24:	182f883a 	mov	r23,r3
    2a28:	9de7c83a 	sub	r19,r19,r23
    2a2c:	983fe11e 	bne	r19,zero,29b4 <__alt_mem_onchip_memory2_0+0xf7bfe9b4>
    2a30:	800b883a 	mov	r5,r16
    2a34:	a809883a 	mov	r4,r21
    2a38:	00043400 	call	4340 <_fflush_r>
    2a3c:	103fbb1e 	bne	r2,zero,292c <__alt_mem_onchip_memory2_0+0xf7bfe92c>
    2a40:	0011883a 	mov	r8,zero
    2a44:	003fdb06 	br	29b4 <__alt_mem_onchip_memory2_0+0xf7bfe9b4>
    2a48:	94c0012e 	bgeu	r18,r19,2a50 <__sfvwrite_r+0x31c>
    2a4c:	9027883a 	mov	r19,r18
    2a50:	980d883a 	mov	r6,r19
    2a54:	e00b883a 	mov	r5,fp
    2a58:	00036a40 	call	36a4 <memmove>
    2a5c:	80800217 	ldw	r2,8(r16)
    2a60:	80c00017 	ldw	r3,0(r16)
    2a64:	14c5c83a 	sub	r2,r2,r19
    2a68:	1cc7883a 	add	r3,r3,r19
    2a6c:	80800215 	stw	r2,8(r16)
    2a70:	80c00015 	stw	r3,0(r16)
    2a74:	10004326 	beq	r2,zero,2b84 <__sfvwrite_r+0x450>
    2a78:	9805883a 	mov	r2,r19
    2a7c:	003f8606 	br	2898 <__alt_mem_onchip_memory2_0+0xf7bfe898>
    2a80:	b00d883a 	mov	r6,r22
    2a84:	e00b883a 	mov	r5,fp
    2a88:	da000115 	stw	r8,4(sp)
    2a8c:	00036a40 	call	36a4 <memmove>
    2a90:	80800217 	ldw	r2,8(r16)
    2a94:	80c00017 	ldw	r3,0(r16)
    2a98:	da000117 	ldw	r8,4(sp)
    2a9c:	1585c83a 	sub	r2,r2,r22
    2aa0:	1dad883a 	add	r22,r3,r22
    2aa4:	80800215 	stw	r2,8(r16)
    2aa8:	85800015 	stw	r22,0(r16)
    2aac:	003fbf06 	br	29ac <__alt_mem_onchip_memory2_0+0xf7bfe9ac>
    2ab0:	81000017 	ldw	r4,0(r16)
    2ab4:	9027883a 	mov	r19,r18
    2ab8:	902f883a 	mov	r23,r18
    2abc:	003f6c06 	br	2870 <__alt_mem_onchip_memory2_0+0xf7bfe870>
    2ac0:	900d883a 	mov	r6,r18
    2ac4:	01400284 	movi	r5,10
    2ac8:	e009883a 	mov	r4,fp
    2acc:	00033fc0 	call	33fc <memchr>
    2ad0:	10003e26 	beq	r2,zero,2bcc <__sfvwrite_r+0x498>
    2ad4:	10800044 	addi	r2,r2,1
    2ad8:	1727c83a 	sub	r19,r2,fp
    2adc:	02000044 	movi	r8,1
    2ae0:	003f9d06 	br	2958 <__alt_mem_onchip_memory2_0+0xf7bfe958>
    2ae4:	80800517 	ldw	r2,20(r16)
    2ae8:	81400417 	ldw	r5,16(r16)
    2aec:	81c00017 	ldw	r7,0(r16)
    2af0:	10a7883a 	add	r19,r2,r2
    2af4:	9885883a 	add	r2,r19,r2
    2af8:	1026d7fa 	srli	r19,r2,31
    2afc:	396dc83a 	sub	r22,r7,r5
    2b00:	b1000044 	addi	r4,r22,1
    2b04:	9885883a 	add	r2,r19,r2
    2b08:	1027d07a 	srai	r19,r2,1
    2b0c:	2485883a 	add	r2,r4,r18
    2b10:	980d883a 	mov	r6,r19
    2b14:	9880022e 	bgeu	r19,r2,2b20 <__sfvwrite_r+0x3ec>
    2b18:	1027883a 	mov	r19,r2
    2b1c:	100d883a 	mov	r6,r2
    2b20:	18c1000c 	andi	r3,r3,1024
    2b24:	18001c26 	beq	r3,zero,2b98 <__sfvwrite_r+0x464>
    2b28:	300b883a 	mov	r5,r6
    2b2c:	a809883a 	mov	r4,r21
    2b30:	0002bf00 	call	2bf0 <_malloc_r>
    2b34:	102f883a 	mov	r23,r2
    2b38:	10002926 	beq	r2,zero,2be0 <__sfvwrite_r+0x4ac>
    2b3c:	81400417 	ldw	r5,16(r16)
    2b40:	b00d883a 	mov	r6,r22
    2b44:	1009883a 	mov	r4,r2
    2b48:	000355c0 	call	355c <memcpy>
    2b4c:	8080030b 	ldhu	r2,12(r16)
    2b50:	00fedfc4 	movi	r3,-1153
    2b54:	10c4703a 	and	r2,r2,r3
    2b58:	10802014 	ori	r2,r2,128
    2b5c:	8080030d 	sth	r2,12(r16)
    2b60:	bd89883a 	add	r4,r23,r22
    2b64:	9d8fc83a 	sub	r7,r19,r22
    2b68:	85c00415 	stw	r23,16(r16)
    2b6c:	84c00515 	stw	r19,20(r16)
    2b70:	81000015 	stw	r4,0(r16)
    2b74:	9027883a 	mov	r19,r18
    2b78:	81c00215 	stw	r7,8(r16)
    2b7c:	902f883a 	mov	r23,r18
    2b80:	003f3b06 	br	2870 <__alt_mem_onchip_memory2_0+0xf7bfe870>
    2b84:	800b883a 	mov	r5,r16
    2b88:	a809883a 	mov	r4,r21
    2b8c:	00043400 	call	4340 <_fflush_r>
    2b90:	103fb926 	beq	r2,zero,2a78 <__alt_mem_onchip_memory2_0+0xf7bfea78>
    2b94:	003f6506 	br	292c <__alt_mem_onchip_memory2_0+0xf7bfe92c>
    2b98:	a809883a 	mov	r4,r21
    2b9c:	00038000 	call	3800 <_realloc_r>
    2ba0:	102f883a 	mov	r23,r2
    2ba4:	103fee1e 	bne	r2,zero,2b60 <__alt_mem_onchip_memory2_0+0xf7bfeb60>
    2ba8:	81400417 	ldw	r5,16(r16)
    2bac:	a809883a 	mov	r4,r21
    2bb0:	00048900 	call	4890 <_free_r>
    2bb4:	8080030b 	ldhu	r2,12(r16)
    2bb8:	00ffdfc4 	movi	r3,-129
    2bbc:	1884703a 	and	r2,r3,r2
    2bc0:	00c00304 	movi	r3,12
    2bc4:	a8c00015 	stw	r3,0(r21)
    2bc8:	003f5906 	br	2930 <__alt_mem_onchip_memory2_0+0xf7bfe930>
    2bcc:	94c00044 	addi	r19,r18,1
    2bd0:	02000044 	movi	r8,1
    2bd4:	003f6006 	br	2958 <__alt_mem_onchip_memory2_0+0xf7bfe958>
    2bd8:	00bfffc4 	movi	r2,-1
    2bdc:	003f0306 	br	27ec <__alt_mem_onchip_memory2_0+0xf7bfe7ec>
    2be0:	00800304 	movi	r2,12
    2be4:	a8800015 	stw	r2,0(r21)
    2be8:	8080030b 	ldhu	r2,12(r16)
    2bec:	003f5006 	br	2930 <__alt_mem_onchip_memory2_0+0xf7bfe930>

00002bf0 <_malloc_r>:
    2bf0:	defff504 	addi	sp,sp,-44
    2bf4:	dc800315 	stw	r18,12(sp)
    2bf8:	dfc00a15 	stw	ra,40(sp)
    2bfc:	df000915 	stw	fp,36(sp)
    2c00:	ddc00815 	stw	r23,32(sp)
    2c04:	dd800715 	stw	r22,28(sp)
    2c08:	dd400615 	stw	r21,24(sp)
    2c0c:	dd000515 	stw	r20,20(sp)
    2c10:	dcc00415 	stw	r19,16(sp)
    2c14:	dc400215 	stw	r17,8(sp)
    2c18:	dc000115 	stw	r16,4(sp)
    2c1c:	288002c4 	addi	r2,r5,11
    2c20:	00c00584 	movi	r3,22
    2c24:	2025883a 	mov	r18,r4
    2c28:	18807f2e 	bgeu	r3,r2,2e28 <_malloc_r+0x238>
    2c2c:	047ffe04 	movi	r17,-8
    2c30:	1462703a 	and	r17,r2,r17
    2c34:	8800a316 	blt	r17,zero,2ec4 <_malloc_r+0x2d4>
    2c38:	8940a236 	bltu	r17,r5,2ec4 <_malloc_r+0x2d4>
    2c3c:	00059340 	call	5934 <__malloc_lock>
    2c40:	00807dc4 	movi	r2,503
    2c44:	1441e92e 	bgeu	r2,r17,33ec <_malloc_r+0x7fc>
    2c48:	8804d27a 	srli	r2,r17,9
    2c4c:	1000a126 	beq	r2,zero,2ed4 <_malloc_r+0x2e4>
    2c50:	00c00104 	movi	r3,4
    2c54:	18811e36 	bltu	r3,r2,30d0 <_malloc_r+0x4e0>
    2c58:	8804d1ba 	srli	r2,r17,6
    2c5c:	12000e44 	addi	r8,r2,57
    2c60:	11c00e04 	addi	r7,r2,56
    2c64:	4209883a 	add	r4,r8,r8
    2c68:	04c00034 	movhi	r19,0
    2c6c:	2109883a 	add	r4,r4,r4
    2c70:	9cdd0004 	addi	r19,r19,29696
    2c74:	2109883a 	add	r4,r4,r4
    2c78:	9909883a 	add	r4,r19,r4
    2c7c:	24000117 	ldw	r16,4(r4)
    2c80:	213ffe04 	addi	r4,r4,-8
    2c84:	24009726 	beq	r4,r16,2ee4 <_malloc_r+0x2f4>
    2c88:	80800117 	ldw	r2,4(r16)
    2c8c:	01bfff04 	movi	r6,-4
    2c90:	014003c4 	movi	r5,15
    2c94:	1184703a 	and	r2,r2,r6
    2c98:	1447c83a 	sub	r3,r2,r17
    2c9c:	28c00716 	blt	r5,r3,2cbc <_malloc_r+0xcc>
    2ca0:	1800920e 	bge	r3,zero,2eec <_malloc_r+0x2fc>
    2ca4:	84000317 	ldw	r16,12(r16)
    2ca8:	24008e26 	beq	r4,r16,2ee4 <_malloc_r+0x2f4>
    2cac:	80800117 	ldw	r2,4(r16)
    2cb0:	1184703a 	and	r2,r2,r6
    2cb4:	1447c83a 	sub	r3,r2,r17
    2cb8:	28fff90e 	bge	r5,r3,2ca0 <__alt_mem_onchip_memory2_0+0xf7bfeca0>
    2cbc:	3809883a 	mov	r4,r7
    2cc0:	01800034 	movhi	r6,0
    2cc4:	9c000417 	ldw	r16,16(r19)
    2cc8:	319d0004 	addi	r6,r6,29696
    2ccc:	32000204 	addi	r8,r6,8
    2cd0:	82013426 	beq	r16,r8,31a4 <_malloc_r+0x5b4>
    2cd4:	80c00117 	ldw	r3,4(r16)
    2cd8:	00bfff04 	movi	r2,-4
    2cdc:	188e703a 	and	r7,r3,r2
    2ce0:	3c45c83a 	sub	r2,r7,r17
    2ce4:	00c003c4 	movi	r3,15
    2ce8:	18811f16 	blt	r3,r2,3168 <_malloc_r+0x578>
    2cec:	32000515 	stw	r8,20(r6)
    2cf0:	32000415 	stw	r8,16(r6)
    2cf4:	10007f0e 	bge	r2,zero,2ef4 <_malloc_r+0x304>
    2cf8:	00807fc4 	movi	r2,511
    2cfc:	11c0fd36 	bltu	r2,r7,30f4 <_malloc_r+0x504>
    2d00:	3806d0fa 	srli	r3,r7,3
    2d04:	01c00044 	movi	r7,1
    2d08:	30800117 	ldw	r2,4(r6)
    2d0c:	19400044 	addi	r5,r3,1
    2d10:	294b883a 	add	r5,r5,r5
    2d14:	1807d0ba 	srai	r3,r3,2
    2d18:	294b883a 	add	r5,r5,r5
    2d1c:	294b883a 	add	r5,r5,r5
    2d20:	298b883a 	add	r5,r5,r6
    2d24:	38c6983a 	sll	r3,r7,r3
    2d28:	29c00017 	ldw	r7,0(r5)
    2d2c:	2a7ffe04 	addi	r9,r5,-8
    2d30:	1886b03a 	or	r3,r3,r2
    2d34:	82400315 	stw	r9,12(r16)
    2d38:	81c00215 	stw	r7,8(r16)
    2d3c:	30c00115 	stw	r3,4(r6)
    2d40:	2c000015 	stw	r16,0(r5)
    2d44:	3c000315 	stw	r16,12(r7)
    2d48:	2005d0ba 	srai	r2,r4,2
    2d4c:	01400044 	movi	r5,1
    2d50:	288a983a 	sll	r5,r5,r2
    2d54:	19406f36 	bltu	r3,r5,2f14 <_malloc_r+0x324>
    2d58:	28c4703a 	and	r2,r5,r3
    2d5c:	10000a1e 	bne	r2,zero,2d88 <_malloc_r+0x198>
    2d60:	00bfff04 	movi	r2,-4
    2d64:	294b883a 	add	r5,r5,r5
    2d68:	2088703a 	and	r4,r4,r2
    2d6c:	28c4703a 	and	r2,r5,r3
    2d70:	21000104 	addi	r4,r4,4
    2d74:	1000041e 	bne	r2,zero,2d88 <_malloc_r+0x198>
    2d78:	294b883a 	add	r5,r5,r5
    2d7c:	28c4703a 	and	r2,r5,r3
    2d80:	21000104 	addi	r4,r4,4
    2d84:	103ffc26 	beq	r2,zero,2d78 <__alt_mem_onchip_memory2_0+0xf7bfed78>
    2d88:	02bfff04 	movi	r10,-4
    2d8c:	024003c4 	movi	r9,15
    2d90:	21800044 	addi	r6,r4,1
    2d94:	318d883a 	add	r6,r6,r6
    2d98:	318d883a 	add	r6,r6,r6
    2d9c:	318d883a 	add	r6,r6,r6
    2da0:	998d883a 	add	r6,r19,r6
    2da4:	333ffe04 	addi	r12,r6,-8
    2da8:	2017883a 	mov	r11,r4
    2dac:	31800104 	addi	r6,r6,4
    2db0:	34000017 	ldw	r16,0(r6)
    2db4:	31fffd04 	addi	r7,r6,-12
    2db8:	81c0041e 	bne	r16,r7,2dcc <_malloc_r+0x1dc>
    2dbc:	0000fb06 	br	31ac <_malloc_r+0x5bc>
    2dc0:	1801030e 	bge	r3,zero,31d0 <_malloc_r+0x5e0>
    2dc4:	84000317 	ldw	r16,12(r16)
    2dc8:	81c0f826 	beq	r16,r7,31ac <_malloc_r+0x5bc>
    2dcc:	80800117 	ldw	r2,4(r16)
    2dd0:	1284703a 	and	r2,r2,r10
    2dd4:	1447c83a 	sub	r3,r2,r17
    2dd8:	48fff90e 	bge	r9,r3,2dc0 <__alt_mem_onchip_memory2_0+0xf7bfedc0>
    2ddc:	80800317 	ldw	r2,12(r16)
    2de0:	81000217 	ldw	r4,8(r16)
    2de4:	89400054 	ori	r5,r17,1
    2de8:	81400115 	stw	r5,4(r16)
    2dec:	20800315 	stw	r2,12(r4)
    2df0:	11000215 	stw	r4,8(r2)
    2df4:	8463883a 	add	r17,r16,r17
    2df8:	9c400515 	stw	r17,20(r19)
    2dfc:	9c400415 	stw	r17,16(r19)
    2e00:	18800054 	ori	r2,r3,1
    2e04:	88800115 	stw	r2,4(r17)
    2e08:	8a000315 	stw	r8,12(r17)
    2e0c:	8a000215 	stw	r8,8(r17)
    2e10:	88e3883a 	add	r17,r17,r3
    2e14:	88c00015 	stw	r3,0(r17)
    2e18:	9009883a 	mov	r4,r18
    2e1c:	00059580 	call	5958 <__malloc_unlock>
    2e20:	80800204 	addi	r2,r16,8
    2e24:	00001b06 	br	2e94 <_malloc_r+0x2a4>
    2e28:	04400404 	movi	r17,16
    2e2c:	89402536 	bltu	r17,r5,2ec4 <_malloc_r+0x2d4>
    2e30:	00059340 	call	5934 <__malloc_lock>
    2e34:	00800184 	movi	r2,6
    2e38:	01000084 	movi	r4,2
    2e3c:	04c00034 	movhi	r19,0
    2e40:	1085883a 	add	r2,r2,r2
    2e44:	9cdd0004 	addi	r19,r19,29696
    2e48:	1085883a 	add	r2,r2,r2
    2e4c:	9885883a 	add	r2,r19,r2
    2e50:	14000117 	ldw	r16,4(r2)
    2e54:	10fffe04 	addi	r3,r2,-8
    2e58:	80c0d926 	beq	r16,r3,31c0 <_malloc_r+0x5d0>
    2e5c:	80c00117 	ldw	r3,4(r16)
    2e60:	81000317 	ldw	r4,12(r16)
    2e64:	00bfff04 	movi	r2,-4
    2e68:	1884703a 	and	r2,r3,r2
    2e6c:	81400217 	ldw	r5,8(r16)
    2e70:	8085883a 	add	r2,r16,r2
    2e74:	10c00117 	ldw	r3,4(r2)
    2e78:	29000315 	stw	r4,12(r5)
    2e7c:	21400215 	stw	r5,8(r4)
    2e80:	18c00054 	ori	r3,r3,1
    2e84:	10c00115 	stw	r3,4(r2)
    2e88:	9009883a 	mov	r4,r18
    2e8c:	00059580 	call	5958 <__malloc_unlock>
    2e90:	80800204 	addi	r2,r16,8
    2e94:	dfc00a17 	ldw	ra,40(sp)
    2e98:	df000917 	ldw	fp,36(sp)
    2e9c:	ddc00817 	ldw	r23,32(sp)
    2ea0:	dd800717 	ldw	r22,28(sp)
    2ea4:	dd400617 	ldw	r21,24(sp)
    2ea8:	dd000517 	ldw	r20,20(sp)
    2eac:	dcc00417 	ldw	r19,16(sp)
    2eb0:	dc800317 	ldw	r18,12(sp)
    2eb4:	dc400217 	ldw	r17,8(sp)
    2eb8:	dc000117 	ldw	r16,4(sp)
    2ebc:	dec00b04 	addi	sp,sp,44
    2ec0:	f800283a 	ret
    2ec4:	00800304 	movi	r2,12
    2ec8:	90800015 	stw	r2,0(r18)
    2ecc:	0005883a 	mov	r2,zero
    2ed0:	003ff006 	br	2e94 <__alt_mem_onchip_memory2_0+0xf7bfee94>
    2ed4:	01002004 	movi	r4,128
    2ed8:	02001004 	movi	r8,64
    2edc:	01c00fc4 	movi	r7,63
    2ee0:	003f6106 	br	2c68 <__alt_mem_onchip_memory2_0+0xf7bfec68>
    2ee4:	4009883a 	mov	r4,r8
    2ee8:	003f7506 	br	2cc0 <__alt_mem_onchip_memory2_0+0xf7bfecc0>
    2eec:	81000317 	ldw	r4,12(r16)
    2ef0:	003fde06 	br	2e6c <__alt_mem_onchip_memory2_0+0xf7bfee6c>
    2ef4:	81c5883a 	add	r2,r16,r7
    2ef8:	11400117 	ldw	r5,4(r2)
    2efc:	9009883a 	mov	r4,r18
    2f00:	29400054 	ori	r5,r5,1
    2f04:	11400115 	stw	r5,4(r2)
    2f08:	00059580 	call	5958 <__malloc_unlock>
    2f0c:	80800204 	addi	r2,r16,8
    2f10:	003fe006 	br	2e94 <__alt_mem_onchip_memory2_0+0xf7bfee94>
    2f14:	9c000217 	ldw	r16,8(r19)
    2f18:	00bfff04 	movi	r2,-4
    2f1c:	85800117 	ldw	r22,4(r16)
    2f20:	b0ac703a 	and	r22,r22,r2
    2f24:	b4400336 	bltu	r22,r17,2f34 <_malloc_r+0x344>
    2f28:	b445c83a 	sub	r2,r22,r17
    2f2c:	00c003c4 	movi	r3,15
    2f30:	18805d16 	blt	r3,r2,30a8 <_malloc_r+0x4b8>
    2f34:	05c00034 	movhi	r23,0
    2f38:	00800074 	movhi	r2,1
    2f3c:	10a4db04 	addi	r2,r2,-27796
    2f40:	bdde0d04 	addi	r23,r23,30772
    2f44:	15400017 	ldw	r21,0(r2)
    2f48:	b8c00017 	ldw	r3,0(r23)
    2f4c:	00bfffc4 	movi	r2,-1
    2f50:	858d883a 	add	r6,r16,r22
    2f54:	8d6b883a 	add	r21,r17,r21
    2f58:	1880ea26 	beq	r3,r2,3304 <_malloc_r+0x714>
    2f5c:	ad4403c4 	addi	r21,r21,4111
    2f60:	00bc0004 	movi	r2,-4096
    2f64:	a8aa703a 	and	r21,r21,r2
    2f68:	a80b883a 	mov	r5,r21
    2f6c:	9009883a 	mov	r4,r18
    2f70:	d9800015 	stw	r6,0(sp)
    2f74:	0003d640 	call	3d64 <_sbrk_r>
    2f78:	1029883a 	mov	r20,r2
    2f7c:	00bfffc4 	movi	r2,-1
    2f80:	d9800017 	ldw	r6,0(sp)
    2f84:	a080e826 	beq	r20,r2,3328 <_malloc_r+0x738>
    2f88:	a180a636 	bltu	r20,r6,3224 <_malloc_r+0x634>
    2f8c:	07000074 	movhi	fp,1
    2f90:	e724dc04 	addi	fp,fp,-27792
    2f94:	e0800017 	ldw	r2,0(fp)
    2f98:	a887883a 	add	r3,r21,r2
    2f9c:	e0c00015 	stw	r3,0(fp)
    2fa0:	3500e626 	beq	r6,r20,333c <_malloc_r+0x74c>
    2fa4:	b9000017 	ldw	r4,0(r23)
    2fa8:	00bfffc4 	movi	r2,-1
    2fac:	2080ee26 	beq	r4,r2,3368 <_malloc_r+0x778>
    2fb0:	a185c83a 	sub	r2,r20,r6
    2fb4:	10c5883a 	add	r2,r2,r3
    2fb8:	e0800015 	stw	r2,0(fp)
    2fbc:	a0c001cc 	andi	r3,r20,7
    2fc0:	1800bc26 	beq	r3,zero,32b4 <_malloc_r+0x6c4>
    2fc4:	a0e9c83a 	sub	r20,r20,r3
    2fc8:	00840204 	movi	r2,4104
    2fcc:	a5000204 	addi	r20,r20,8
    2fd0:	10c7c83a 	sub	r3,r2,r3
    2fd4:	a545883a 	add	r2,r20,r21
    2fd8:	1083ffcc 	andi	r2,r2,4095
    2fdc:	18abc83a 	sub	r21,r3,r2
    2fe0:	a80b883a 	mov	r5,r21
    2fe4:	9009883a 	mov	r4,r18
    2fe8:	0003d640 	call	3d64 <_sbrk_r>
    2fec:	00ffffc4 	movi	r3,-1
    2ff0:	10c0e126 	beq	r2,r3,3378 <_malloc_r+0x788>
    2ff4:	1505c83a 	sub	r2,r2,r20
    2ff8:	1545883a 	add	r2,r2,r21
    2ffc:	10800054 	ori	r2,r2,1
    3000:	e0c00017 	ldw	r3,0(fp)
    3004:	9d000215 	stw	r20,8(r19)
    3008:	a0800115 	stw	r2,4(r20)
    300c:	a8c7883a 	add	r3,r21,r3
    3010:	e0c00015 	stw	r3,0(fp)
    3014:	84c00e26 	beq	r16,r19,3050 <_malloc_r+0x460>
    3018:	018003c4 	movi	r6,15
    301c:	3580a72e 	bgeu	r6,r22,32bc <_malloc_r+0x6cc>
    3020:	81400117 	ldw	r5,4(r16)
    3024:	013ffe04 	movi	r4,-8
    3028:	b0bffd04 	addi	r2,r22,-12
    302c:	1104703a 	and	r2,r2,r4
    3030:	2900004c 	andi	r4,r5,1
    3034:	2088b03a 	or	r4,r4,r2
    3038:	81000115 	stw	r4,4(r16)
    303c:	01400144 	movi	r5,5
    3040:	8089883a 	add	r4,r16,r2
    3044:	21400115 	stw	r5,4(r4)
    3048:	21400215 	stw	r5,8(r4)
    304c:	3080cd36 	bltu	r6,r2,3384 <_malloc_r+0x794>
    3050:	00800074 	movhi	r2,1
    3054:	10a4da04 	addi	r2,r2,-27800
    3058:	11000017 	ldw	r4,0(r2)
    305c:	20c0012e 	bgeu	r4,r3,3064 <_malloc_r+0x474>
    3060:	10c00015 	stw	r3,0(r2)
    3064:	00800074 	movhi	r2,1
    3068:	10a4d904 	addi	r2,r2,-27804
    306c:	11000017 	ldw	r4,0(r2)
    3070:	9c000217 	ldw	r16,8(r19)
    3074:	20c0012e 	bgeu	r4,r3,307c <_malloc_r+0x48c>
    3078:	10c00015 	stw	r3,0(r2)
    307c:	80c00117 	ldw	r3,4(r16)
    3080:	00bfff04 	movi	r2,-4
    3084:	1886703a 	and	r3,r3,r2
    3088:	1c45c83a 	sub	r2,r3,r17
    308c:	1c400236 	bltu	r3,r17,3098 <_malloc_r+0x4a8>
    3090:	00c003c4 	movi	r3,15
    3094:	18800416 	blt	r3,r2,30a8 <_malloc_r+0x4b8>
    3098:	9009883a 	mov	r4,r18
    309c:	00059580 	call	5958 <__malloc_unlock>
    30a0:	0005883a 	mov	r2,zero
    30a4:	003f7b06 	br	2e94 <__alt_mem_onchip_memory2_0+0xf7bfee94>
    30a8:	88c00054 	ori	r3,r17,1
    30ac:	80c00115 	stw	r3,4(r16)
    30b0:	8463883a 	add	r17,r16,r17
    30b4:	10800054 	ori	r2,r2,1
    30b8:	9c400215 	stw	r17,8(r19)
    30bc:	88800115 	stw	r2,4(r17)
    30c0:	9009883a 	mov	r4,r18
    30c4:	00059580 	call	5958 <__malloc_unlock>
    30c8:	80800204 	addi	r2,r16,8
    30cc:	003f7106 	br	2e94 <__alt_mem_onchip_memory2_0+0xf7bfee94>
    30d0:	00c00504 	movi	r3,20
    30d4:	18804a2e 	bgeu	r3,r2,3200 <_malloc_r+0x610>
    30d8:	00c01504 	movi	r3,84
    30dc:	18806e36 	bltu	r3,r2,3298 <_malloc_r+0x6a8>
    30e0:	8804d33a 	srli	r2,r17,12
    30e4:	12001bc4 	addi	r8,r2,111
    30e8:	11c01b84 	addi	r7,r2,110
    30ec:	4209883a 	add	r4,r8,r8
    30f0:	003edd06 	br	2c68 <__alt_mem_onchip_memory2_0+0xf7bfec68>
    30f4:	3804d27a 	srli	r2,r7,9
    30f8:	00c00104 	movi	r3,4
    30fc:	1880442e 	bgeu	r3,r2,3210 <_malloc_r+0x620>
    3100:	00c00504 	movi	r3,20
    3104:	18808136 	bltu	r3,r2,330c <_malloc_r+0x71c>
    3108:	11401704 	addi	r5,r2,92
    310c:	10c016c4 	addi	r3,r2,91
    3110:	294b883a 	add	r5,r5,r5
    3114:	294b883a 	add	r5,r5,r5
    3118:	294b883a 	add	r5,r5,r5
    311c:	994b883a 	add	r5,r19,r5
    3120:	28800017 	ldw	r2,0(r5)
    3124:	01800034 	movhi	r6,0
    3128:	297ffe04 	addi	r5,r5,-8
    312c:	319d0004 	addi	r6,r6,29696
    3130:	28806526 	beq	r5,r2,32c8 <_malloc_r+0x6d8>
    3134:	01bfff04 	movi	r6,-4
    3138:	10c00117 	ldw	r3,4(r2)
    313c:	1986703a 	and	r3,r3,r6
    3140:	38c0022e 	bgeu	r7,r3,314c <_malloc_r+0x55c>
    3144:	10800217 	ldw	r2,8(r2)
    3148:	28bffb1e 	bne	r5,r2,3138 <__alt_mem_onchip_memory2_0+0xf7bff138>
    314c:	11400317 	ldw	r5,12(r2)
    3150:	98c00117 	ldw	r3,4(r19)
    3154:	81400315 	stw	r5,12(r16)
    3158:	80800215 	stw	r2,8(r16)
    315c:	2c000215 	stw	r16,8(r5)
    3160:	14000315 	stw	r16,12(r2)
    3164:	003ef806 	br	2d48 <__alt_mem_onchip_memory2_0+0xf7bfed48>
    3168:	88c00054 	ori	r3,r17,1
    316c:	80c00115 	stw	r3,4(r16)
    3170:	8463883a 	add	r17,r16,r17
    3174:	34400515 	stw	r17,20(r6)
    3178:	34400415 	stw	r17,16(r6)
    317c:	10c00054 	ori	r3,r2,1
    3180:	8a000315 	stw	r8,12(r17)
    3184:	8a000215 	stw	r8,8(r17)
    3188:	88c00115 	stw	r3,4(r17)
    318c:	88a3883a 	add	r17,r17,r2
    3190:	88800015 	stw	r2,0(r17)
    3194:	9009883a 	mov	r4,r18
    3198:	00059580 	call	5958 <__malloc_unlock>
    319c:	80800204 	addi	r2,r16,8
    31a0:	003f3c06 	br	2e94 <__alt_mem_onchip_memory2_0+0xf7bfee94>
    31a4:	30c00117 	ldw	r3,4(r6)
    31a8:	003ee706 	br	2d48 <__alt_mem_onchip_memory2_0+0xf7bfed48>
    31ac:	5ac00044 	addi	r11,r11,1
    31b0:	588000cc 	andi	r2,r11,3
    31b4:	31800204 	addi	r6,r6,8
    31b8:	103efd1e 	bne	r2,zero,2db0 <__alt_mem_onchip_memory2_0+0xf7bfedb0>
    31bc:	00002406 	br	3250 <_malloc_r+0x660>
    31c0:	14000317 	ldw	r16,12(r2)
    31c4:	143f251e 	bne	r2,r16,2e5c <__alt_mem_onchip_memory2_0+0xf7bfee5c>
    31c8:	21000084 	addi	r4,r4,2
    31cc:	003ebc06 	br	2cc0 <__alt_mem_onchip_memory2_0+0xf7bfecc0>
    31d0:	8085883a 	add	r2,r16,r2
    31d4:	10c00117 	ldw	r3,4(r2)
    31d8:	81000317 	ldw	r4,12(r16)
    31dc:	81400217 	ldw	r5,8(r16)
    31e0:	18c00054 	ori	r3,r3,1
    31e4:	10c00115 	stw	r3,4(r2)
    31e8:	29000315 	stw	r4,12(r5)
    31ec:	21400215 	stw	r5,8(r4)
    31f0:	9009883a 	mov	r4,r18
    31f4:	00059580 	call	5958 <__malloc_unlock>
    31f8:	80800204 	addi	r2,r16,8
    31fc:	003f2506 	br	2e94 <__alt_mem_onchip_memory2_0+0xf7bfee94>
    3200:	12001704 	addi	r8,r2,92
    3204:	11c016c4 	addi	r7,r2,91
    3208:	4209883a 	add	r4,r8,r8
    320c:	003e9606 	br	2c68 <__alt_mem_onchip_memory2_0+0xf7bfec68>
    3210:	3804d1ba 	srli	r2,r7,6
    3214:	11400e44 	addi	r5,r2,57
    3218:	10c00e04 	addi	r3,r2,56
    321c:	294b883a 	add	r5,r5,r5
    3220:	003fbc06 	br	3114 <__alt_mem_onchip_memory2_0+0xf7bff114>
    3224:	84ff5926 	beq	r16,r19,2f8c <__alt_mem_onchip_memory2_0+0xf7bfef8c>
    3228:	00800034 	movhi	r2,0
    322c:	109d0004 	addi	r2,r2,29696
    3230:	14000217 	ldw	r16,8(r2)
    3234:	00bfff04 	movi	r2,-4
    3238:	80c00117 	ldw	r3,4(r16)
    323c:	1886703a 	and	r3,r3,r2
    3240:	003f9106 	br	3088 <__alt_mem_onchip_memory2_0+0xf7bff088>
    3244:	60800217 	ldw	r2,8(r12)
    3248:	213fffc4 	addi	r4,r4,-1
    324c:	1300651e 	bne	r2,r12,33e4 <_malloc_r+0x7f4>
    3250:	208000cc 	andi	r2,r4,3
    3254:	633ffe04 	addi	r12,r12,-8
    3258:	103ffa1e 	bne	r2,zero,3244 <__alt_mem_onchip_memory2_0+0xf7bff244>
    325c:	98800117 	ldw	r2,4(r19)
    3260:	0146303a 	nor	r3,zero,r5
    3264:	1884703a 	and	r2,r3,r2
    3268:	98800115 	stw	r2,4(r19)
    326c:	294b883a 	add	r5,r5,r5
    3270:	117f2836 	bltu	r2,r5,2f14 <__alt_mem_onchip_memory2_0+0xf7bfef14>
    3274:	283f2726 	beq	r5,zero,2f14 <__alt_mem_onchip_memory2_0+0xf7bfef14>
    3278:	2886703a 	and	r3,r5,r2
    327c:	5809883a 	mov	r4,r11
    3280:	183ec31e 	bne	r3,zero,2d90 <__alt_mem_onchip_memory2_0+0xf7bfed90>
    3284:	294b883a 	add	r5,r5,r5
    3288:	2886703a 	and	r3,r5,r2
    328c:	21000104 	addi	r4,r4,4
    3290:	183ffc26 	beq	r3,zero,3284 <__alt_mem_onchip_memory2_0+0xf7bff284>
    3294:	003ebe06 	br	2d90 <__alt_mem_onchip_memory2_0+0xf7bfed90>
    3298:	00c05504 	movi	r3,340
    329c:	18801236 	bltu	r3,r2,32e8 <_malloc_r+0x6f8>
    32a0:	8804d3fa 	srli	r2,r17,15
    32a4:	12001e04 	addi	r8,r2,120
    32a8:	11c01dc4 	addi	r7,r2,119
    32ac:	4209883a 	add	r4,r8,r8
    32b0:	003e6d06 	br	2c68 <__alt_mem_onchip_memory2_0+0xf7bfec68>
    32b4:	00c40004 	movi	r3,4096
    32b8:	003f4606 	br	2fd4 <__alt_mem_onchip_memory2_0+0xf7bfefd4>
    32bc:	00800044 	movi	r2,1
    32c0:	a0800115 	stw	r2,4(r20)
    32c4:	003f7406 	br	3098 <__alt_mem_onchip_memory2_0+0xf7bff098>
    32c8:	1805d0ba 	srai	r2,r3,2
    32cc:	01c00044 	movi	r7,1
    32d0:	30c00117 	ldw	r3,4(r6)
    32d4:	388e983a 	sll	r7,r7,r2
    32d8:	2805883a 	mov	r2,r5
    32dc:	38c6b03a 	or	r3,r7,r3
    32e0:	30c00115 	stw	r3,4(r6)
    32e4:	003f9b06 	br	3154 <__alt_mem_onchip_memory2_0+0xf7bff154>
    32e8:	00c15504 	movi	r3,1364
    32ec:	18801a36 	bltu	r3,r2,3358 <_malloc_r+0x768>
    32f0:	8804d4ba 	srli	r2,r17,18
    32f4:	12001f44 	addi	r8,r2,125
    32f8:	11c01f04 	addi	r7,r2,124
    32fc:	4209883a 	add	r4,r8,r8
    3300:	003e5906 	br	2c68 <__alt_mem_onchip_memory2_0+0xf7bfec68>
    3304:	ad400404 	addi	r21,r21,16
    3308:	003f1706 	br	2f68 <__alt_mem_onchip_memory2_0+0xf7bfef68>
    330c:	00c01504 	movi	r3,84
    3310:	18802336 	bltu	r3,r2,33a0 <_malloc_r+0x7b0>
    3314:	3804d33a 	srli	r2,r7,12
    3318:	11401bc4 	addi	r5,r2,111
    331c:	10c01b84 	addi	r3,r2,110
    3320:	294b883a 	add	r5,r5,r5
    3324:	003f7b06 	br	3114 <__alt_mem_onchip_memory2_0+0xf7bff114>
    3328:	9c000217 	ldw	r16,8(r19)
    332c:	00bfff04 	movi	r2,-4
    3330:	80c00117 	ldw	r3,4(r16)
    3334:	1886703a 	and	r3,r3,r2
    3338:	003f5306 	br	3088 <__alt_mem_onchip_memory2_0+0xf7bff088>
    333c:	3083ffcc 	andi	r2,r6,4095
    3340:	103f181e 	bne	r2,zero,2fa4 <__alt_mem_onchip_memory2_0+0xf7bfefa4>
    3344:	99000217 	ldw	r4,8(r19)
    3348:	b545883a 	add	r2,r22,r21
    334c:	10800054 	ori	r2,r2,1
    3350:	20800115 	stw	r2,4(r4)
    3354:	003f3e06 	br	3050 <__alt_mem_onchip_memory2_0+0xf7bff050>
    3358:	01003f84 	movi	r4,254
    335c:	02001fc4 	movi	r8,127
    3360:	01c01f84 	movi	r7,126
    3364:	003e4006 	br	2c68 <__alt_mem_onchip_memory2_0+0xf7bfec68>
    3368:	00800034 	movhi	r2,0
    336c:	109e0d04 	addi	r2,r2,30772
    3370:	15000015 	stw	r20,0(r2)
    3374:	003f1106 	br	2fbc <__alt_mem_onchip_memory2_0+0xf7bfefbc>
    3378:	00800044 	movi	r2,1
    337c:	002b883a 	mov	r21,zero
    3380:	003f1f06 	br	3000 <__alt_mem_onchip_memory2_0+0xf7bff000>
    3384:	81400204 	addi	r5,r16,8
    3388:	9009883a 	mov	r4,r18
    338c:	00048900 	call	4890 <_free_r>
    3390:	00800074 	movhi	r2,1
    3394:	10a4dc04 	addi	r2,r2,-27792
    3398:	10c00017 	ldw	r3,0(r2)
    339c:	003f2c06 	br	3050 <__alt_mem_onchip_memory2_0+0xf7bff050>
    33a0:	00c05504 	movi	r3,340
    33a4:	18800536 	bltu	r3,r2,33bc <_malloc_r+0x7cc>
    33a8:	3804d3fa 	srli	r2,r7,15
    33ac:	11401e04 	addi	r5,r2,120
    33b0:	10c01dc4 	addi	r3,r2,119
    33b4:	294b883a 	add	r5,r5,r5
    33b8:	003f5606 	br	3114 <__alt_mem_onchip_memory2_0+0xf7bff114>
    33bc:	00c15504 	movi	r3,1364
    33c0:	18800536 	bltu	r3,r2,33d8 <_malloc_r+0x7e8>
    33c4:	3804d4ba 	srli	r2,r7,18
    33c8:	11401f44 	addi	r5,r2,125
    33cc:	10c01f04 	addi	r3,r2,124
    33d0:	294b883a 	add	r5,r5,r5
    33d4:	003f4f06 	br	3114 <__alt_mem_onchip_memory2_0+0xf7bff114>
    33d8:	01403f84 	movi	r5,254
    33dc:	00c01f84 	movi	r3,126
    33e0:	003f4c06 	br	3114 <__alt_mem_onchip_memory2_0+0xf7bff114>
    33e4:	98800117 	ldw	r2,4(r19)
    33e8:	003fa006 	br	326c <__alt_mem_onchip_memory2_0+0xf7bff26c>
    33ec:	8808d0fa 	srli	r4,r17,3
    33f0:	20800044 	addi	r2,r4,1
    33f4:	1085883a 	add	r2,r2,r2
    33f8:	003e9006 	br	2e3c <__alt_mem_onchip_memory2_0+0xf7bfee3c>

000033fc <memchr>:
    33fc:	208000cc 	andi	r2,r4,3
    3400:	280f883a 	mov	r7,r5
    3404:	10003426 	beq	r2,zero,34d8 <memchr+0xdc>
    3408:	30bfffc4 	addi	r2,r6,-1
    340c:	30001a26 	beq	r6,zero,3478 <memchr+0x7c>
    3410:	20c00003 	ldbu	r3,0(r4)
    3414:	29803fcc 	andi	r6,r5,255
    3418:	30c0051e 	bne	r6,r3,3430 <memchr+0x34>
    341c:	00001806 	br	3480 <memchr+0x84>
    3420:	10001526 	beq	r2,zero,3478 <memchr+0x7c>
    3424:	20c00003 	ldbu	r3,0(r4)
    3428:	10bfffc4 	addi	r2,r2,-1
    342c:	30c01426 	beq	r6,r3,3480 <memchr+0x84>
    3430:	21000044 	addi	r4,r4,1
    3434:	20c000cc 	andi	r3,r4,3
    3438:	183ff91e 	bne	r3,zero,3420 <__alt_mem_onchip_memory2_0+0xf7bff420>
    343c:	020000c4 	movi	r8,3
    3440:	40801136 	bltu	r8,r2,3488 <memchr+0x8c>
    3444:	10000c26 	beq	r2,zero,3478 <memchr+0x7c>
    3448:	20c00003 	ldbu	r3,0(r4)
    344c:	29403fcc 	andi	r5,r5,255
    3450:	28c00b26 	beq	r5,r3,3480 <memchr+0x84>
    3454:	20c00044 	addi	r3,r4,1
    3458:	39803fcc 	andi	r6,r7,255
    345c:	2089883a 	add	r4,r4,r2
    3460:	00000306 	br	3470 <memchr+0x74>
    3464:	18c00044 	addi	r3,r3,1
    3468:	197fffc3 	ldbu	r5,-1(r3)
    346c:	31400526 	beq	r6,r5,3484 <memchr+0x88>
    3470:	1805883a 	mov	r2,r3
    3474:	20fffb1e 	bne	r4,r3,3464 <__alt_mem_onchip_memory2_0+0xf7bff464>
    3478:	0005883a 	mov	r2,zero
    347c:	f800283a 	ret
    3480:	2005883a 	mov	r2,r4
    3484:	f800283a 	ret
    3488:	28c03fcc 	andi	r3,r5,255
    348c:	1812923a 	slli	r9,r3,8
    3490:	02ffbff4 	movhi	r11,65279
    3494:	02a02074 	movhi	r10,32897
    3498:	48d2b03a 	or	r9,r9,r3
    349c:	4806943a 	slli	r3,r9,16
    34a0:	5affbfc4 	addi	r11,r11,-257
    34a4:	52a02004 	addi	r10,r10,-32640
    34a8:	48d2b03a 	or	r9,r9,r3
    34ac:	20c00017 	ldw	r3,0(r4)
    34b0:	48c6f03a 	xor	r3,r9,r3
    34b4:	1acd883a 	add	r6,r3,r11
    34b8:	00c6303a 	nor	r3,zero,r3
    34bc:	30c6703a 	and	r3,r6,r3
    34c0:	1a86703a 	and	r3,r3,r10
    34c4:	183fe01e 	bne	r3,zero,3448 <__alt_mem_onchip_memory2_0+0xf7bff448>
    34c8:	10bfff04 	addi	r2,r2,-4
    34cc:	21000104 	addi	r4,r4,4
    34d0:	40bff636 	bltu	r8,r2,34ac <__alt_mem_onchip_memory2_0+0xf7bff4ac>
    34d4:	003fdb06 	br	3444 <__alt_mem_onchip_memory2_0+0xf7bff444>
    34d8:	3005883a 	mov	r2,r6
    34dc:	003fd706 	br	343c <__alt_mem_onchip_memory2_0+0xf7bff43c>

000034e0 <memcmp>:
    34e0:	01c000c4 	movi	r7,3
    34e4:	3980192e 	bgeu	r7,r6,354c <memcmp+0x6c>
    34e8:	2144b03a 	or	r2,r4,r5
    34ec:	11c4703a 	and	r2,r2,r7
    34f0:	10000f26 	beq	r2,zero,3530 <memcmp+0x50>
    34f4:	20800003 	ldbu	r2,0(r4)
    34f8:	28c00003 	ldbu	r3,0(r5)
    34fc:	10c0151e 	bne	r2,r3,3554 <memcmp+0x74>
    3500:	31bfff84 	addi	r6,r6,-2
    3504:	01ffffc4 	movi	r7,-1
    3508:	00000406 	br	351c <memcmp+0x3c>
    350c:	20800003 	ldbu	r2,0(r4)
    3510:	28c00003 	ldbu	r3,0(r5)
    3514:	31bfffc4 	addi	r6,r6,-1
    3518:	10c00e1e 	bne	r2,r3,3554 <memcmp+0x74>
    351c:	21000044 	addi	r4,r4,1
    3520:	29400044 	addi	r5,r5,1
    3524:	31fff91e 	bne	r6,r7,350c <__alt_mem_onchip_memory2_0+0xf7bff50c>
    3528:	0005883a 	mov	r2,zero
    352c:	f800283a 	ret
    3530:	20c00017 	ldw	r3,0(r4)
    3534:	28800017 	ldw	r2,0(r5)
    3538:	18bfee1e 	bne	r3,r2,34f4 <__alt_mem_onchip_memory2_0+0xf7bff4f4>
    353c:	31bfff04 	addi	r6,r6,-4
    3540:	21000104 	addi	r4,r4,4
    3544:	29400104 	addi	r5,r5,4
    3548:	39bff936 	bltu	r7,r6,3530 <__alt_mem_onchip_memory2_0+0xf7bff530>
    354c:	303fe91e 	bne	r6,zero,34f4 <__alt_mem_onchip_memory2_0+0xf7bff4f4>
    3550:	003ff506 	br	3528 <__alt_mem_onchip_memory2_0+0xf7bff528>
    3554:	10c5c83a 	sub	r2,r2,r3
    3558:	f800283a 	ret

0000355c <memcpy>:
    355c:	defffd04 	addi	sp,sp,-12
    3560:	dfc00215 	stw	ra,8(sp)
    3564:	dc400115 	stw	r17,4(sp)
    3568:	dc000015 	stw	r16,0(sp)
    356c:	00c003c4 	movi	r3,15
    3570:	2005883a 	mov	r2,r4
    3574:	1980452e 	bgeu	r3,r6,368c <memcpy+0x130>
    3578:	2906b03a 	or	r3,r5,r4
    357c:	18c000cc 	andi	r3,r3,3
    3580:	1800441e 	bne	r3,zero,3694 <memcpy+0x138>
    3584:	347ffc04 	addi	r17,r6,-16
    3588:	8822d13a 	srli	r17,r17,4
    358c:	28c00104 	addi	r3,r5,4
    3590:	23400104 	addi	r13,r4,4
    3594:	8820913a 	slli	r16,r17,4
    3598:	2b000204 	addi	r12,r5,8
    359c:	22c00204 	addi	r11,r4,8
    35a0:	84000504 	addi	r16,r16,20
    35a4:	2a800304 	addi	r10,r5,12
    35a8:	22400304 	addi	r9,r4,12
    35ac:	2c21883a 	add	r16,r5,r16
    35b0:	2811883a 	mov	r8,r5
    35b4:	200f883a 	mov	r7,r4
    35b8:	41000017 	ldw	r4,0(r8)
    35bc:	1fc00017 	ldw	ra,0(r3)
    35c0:	63c00017 	ldw	r15,0(r12)
    35c4:	39000015 	stw	r4,0(r7)
    35c8:	53800017 	ldw	r14,0(r10)
    35cc:	6fc00015 	stw	ra,0(r13)
    35d0:	5bc00015 	stw	r15,0(r11)
    35d4:	4b800015 	stw	r14,0(r9)
    35d8:	18c00404 	addi	r3,r3,16
    35dc:	39c00404 	addi	r7,r7,16
    35e0:	42000404 	addi	r8,r8,16
    35e4:	6b400404 	addi	r13,r13,16
    35e8:	63000404 	addi	r12,r12,16
    35ec:	5ac00404 	addi	r11,r11,16
    35f0:	52800404 	addi	r10,r10,16
    35f4:	4a400404 	addi	r9,r9,16
    35f8:	1c3fef1e 	bne	r3,r16,35b8 <__alt_mem_onchip_memory2_0+0xf7bff5b8>
    35fc:	89c00044 	addi	r7,r17,1
    3600:	380e913a 	slli	r7,r7,4
    3604:	310003cc 	andi	r4,r6,15
    3608:	02c000c4 	movi	r11,3
    360c:	11c7883a 	add	r3,r2,r7
    3610:	29cb883a 	add	r5,r5,r7
    3614:	5900212e 	bgeu	r11,r4,369c <memcpy+0x140>
    3618:	1813883a 	mov	r9,r3
    361c:	2811883a 	mov	r8,r5
    3620:	200f883a 	mov	r7,r4
    3624:	42800017 	ldw	r10,0(r8)
    3628:	4a400104 	addi	r9,r9,4
    362c:	39ffff04 	addi	r7,r7,-4
    3630:	4abfff15 	stw	r10,-4(r9)
    3634:	42000104 	addi	r8,r8,4
    3638:	59fffa36 	bltu	r11,r7,3624 <__alt_mem_onchip_memory2_0+0xf7bff624>
    363c:	213fff04 	addi	r4,r4,-4
    3640:	2008d0ba 	srli	r4,r4,2
    3644:	318000cc 	andi	r6,r6,3
    3648:	21000044 	addi	r4,r4,1
    364c:	2109883a 	add	r4,r4,r4
    3650:	2109883a 	add	r4,r4,r4
    3654:	1907883a 	add	r3,r3,r4
    3658:	290b883a 	add	r5,r5,r4
    365c:	30000626 	beq	r6,zero,3678 <memcpy+0x11c>
    3660:	198d883a 	add	r6,r3,r6
    3664:	29c00003 	ldbu	r7,0(r5)
    3668:	18c00044 	addi	r3,r3,1
    366c:	29400044 	addi	r5,r5,1
    3670:	19ffffc5 	stb	r7,-1(r3)
    3674:	19bffb1e 	bne	r3,r6,3664 <__alt_mem_onchip_memory2_0+0xf7bff664>
    3678:	dfc00217 	ldw	ra,8(sp)
    367c:	dc400117 	ldw	r17,4(sp)
    3680:	dc000017 	ldw	r16,0(sp)
    3684:	dec00304 	addi	sp,sp,12
    3688:	f800283a 	ret
    368c:	2007883a 	mov	r3,r4
    3690:	003ff206 	br	365c <__alt_mem_onchip_memory2_0+0xf7bff65c>
    3694:	2007883a 	mov	r3,r4
    3698:	003ff106 	br	3660 <__alt_mem_onchip_memory2_0+0xf7bff660>
    369c:	200d883a 	mov	r6,r4
    36a0:	003fee06 	br	365c <__alt_mem_onchip_memory2_0+0xf7bff65c>

000036a4 <memmove>:
    36a4:	2005883a 	mov	r2,r4
    36a8:	29000b2e 	bgeu	r5,r4,36d8 <memmove+0x34>
    36ac:	298f883a 	add	r7,r5,r6
    36b0:	21c0092e 	bgeu	r4,r7,36d8 <memmove+0x34>
    36b4:	2187883a 	add	r3,r4,r6
    36b8:	198bc83a 	sub	r5,r3,r6
    36bc:	30004826 	beq	r6,zero,37e0 <memmove+0x13c>
    36c0:	39ffffc4 	addi	r7,r7,-1
    36c4:	39000003 	ldbu	r4,0(r7)
    36c8:	18ffffc4 	addi	r3,r3,-1
    36cc:	19000005 	stb	r4,0(r3)
    36d0:	28fffb1e 	bne	r5,r3,36c0 <__alt_mem_onchip_memory2_0+0xf7bff6c0>
    36d4:	f800283a 	ret
    36d8:	00c003c4 	movi	r3,15
    36dc:	1980412e 	bgeu	r3,r6,37e4 <memmove+0x140>
    36e0:	2886b03a 	or	r3,r5,r2
    36e4:	18c000cc 	andi	r3,r3,3
    36e8:	1800401e 	bne	r3,zero,37ec <memmove+0x148>
    36ec:	33fffc04 	addi	r15,r6,-16
    36f0:	781ed13a 	srli	r15,r15,4
    36f4:	28c00104 	addi	r3,r5,4
    36f8:	13400104 	addi	r13,r2,4
    36fc:	781c913a 	slli	r14,r15,4
    3700:	2b000204 	addi	r12,r5,8
    3704:	12c00204 	addi	r11,r2,8
    3708:	73800504 	addi	r14,r14,20
    370c:	2a800304 	addi	r10,r5,12
    3710:	12400304 	addi	r9,r2,12
    3714:	2b9d883a 	add	r14,r5,r14
    3718:	2811883a 	mov	r8,r5
    371c:	100f883a 	mov	r7,r2
    3720:	41000017 	ldw	r4,0(r8)
    3724:	39c00404 	addi	r7,r7,16
    3728:	18c00404 	addi	r3,r3,16
    372c:	393ffc15 	stw	r4,-16(r7)
    3730:	193ffc17 	ldw	r4,-16(r3)
    3734:	6b400404 	addi	r13,r13,16
    3738:	5ac00404 	addi	r11,r11,16
    373c:	693ffc15 	stw	r4,-16(r13)
    3740:	61000017 	ldw	r4,0(r12)
    3744:	4a400404 	addi	r9,r9,16
    3748:	42000404 	addi	r8,r8,16
    374c:	593ffc15 	stw	r4,-16(r11)
    3750:	51000017 	ldw	r4,0(r10)
    3754:	63000404 	addi	r12,r12,16
    3758:	52800404 	addi	r10,r10,16
    375c:	493ffc15 	stw	r4,-16(r9)
    3760:	1bbfef1e 	bne	r3,r14,3720 <__alt_mem_onchip_memory2_0+0xf7bff720>
    3764:	79000044 	addi	r4,r15,1
    3768:	2008913a 	slli	r4,r4,4
    376c:	328003cc 	andi	r10,r6,15
    3770:	02c000c4 	movi	r11,3
    3774:	1107883a 	add	r3,r2,r4
    3778:	290b883a 	add	r5,r5,r4
    377c:	5a801e2e 	bgeu	r11,r10,37f8 <memmove+0x154>
    3780:	1813883a 	mov	r9,r3
    3784:	2811883a 	mov	r8,r5
    3788:	500f883a 	mov	r7,r10
    378c:	41000017 	ldw	r4,0(r8)
    3790:	4a400104 	addi	r9,r9,4
    3794:	39ffff04 	addi	r7,r7,-4
    3798:	493fff15 	stw	r4,-4(r9)
    379c:	42000104 	addi	r8,r8,4
    37a0:	59fffa36 	bltu	r11,r7,378c <__alt_mem_onchip_memory2_0+0xf7bff78c>
    37a4:	513fff04 	addi	r4,r10,-4
    37a8:	2008d0ba 	srli	r4,r4,2
    37ac:	318000cc 	andi	r6,r6,3
    37b0:	21000044 	addi	r4,r4,1
    37b4:	2109883a 	add	r4,r4,r4
    37b8:	2109883a 	add	r4,r4,r4
    37bc:	1907883a 	add	r3,r3,r4
    37c0:	290b883a 	add	r5,r5,r4
    37c4:	30000b26 	beq	r6,zero,37f4 <memmove+0x150>
    37c8:	198d883a 	add	r6,r3,r6
    37cc:	29c00003 	ldbu	r7,0(r5)
    37d0:	18c00044 	addi	r3,r3,1
    37d4:	29400044 	addi	r5,r5,1
    37d8:	19ffffc5 	stb	r7,-1(r3)
    37dc:	19bffb1e 	bne	r3,r6,37cc <__alt_mem_onchip_memory2_0+0xf7bff7cc>
    37e0:	f800283a 	ret
    37e4:	1007883a 	mov	r3,r2
    37e8:	003ff606 	br	37c4 <__alt_mem_onchip_memory2_0+0xf7bff7c4>
    37ec:	1007883a 	mov	r3,r2
    37f0:	003ff506 	br	37c8 <__alt_mem_onchip_memory2_0+0xf7bff7c8>
    37f4:	f800283a 	ret
    37f8:	500d883a 	mov	r6,r10
    37fc:	003ff106 	br	37c4 <__alt_mem_onchip_memory2_0+0xf7bff7c4>

00003800 <_realloc_r>:
    3800:	defff604 	addi	sp,sp,-40
    3804:	dc800215 	stw	r18,8(sp)
    3808:	dfc00915 	stw	ra,36(sp)
    380c:	df000815 	stw	fp,32(sp)
    3810:	ddc00715 	stw	r23,28(sp)
    3814:	dd800615 	stw	r22,24(sp)
    3818:	dd400515 	stw	r21,20(sp)
    381c:	dd000415 	stw	r20,16(sp)
    3820:	dcc00315 	stw	r19,12(sp)
    3824:	dc400115 	stw	r17,4(sp)
    3828:	dc000015 	stw	r16,0(sp)
    382c:	3025883a 	mov	r18,r6
    3830:	2800b726 	beq	r5,zero,3b10 <_realloc_r+0x310>
    3834:	282b883a 	mov	r21,r5
    3838:	2029883a 	mov	r20,r4
    383c:	00059340 	call	5934 <__malloc_lock>
    3840:	a8bfff17 	ldw	r2,-4(r21)
    3844:	043fff04 	movi	r16,-4
    3848:	90c002c4 	addi	r3,r18,11
    384c:	01000584 	movi	r4,22
    3850:	acfffe04 	addi	r19,r21,-8
    3854:	1420703a 	and	r16,r2,r16
    3858:	20c0332e 	bgeu	r4,r3,3928 <_realloc_r+0x128>
    385c:	047ffe04 	movi	r17,-8
    3860:	1c62703a 	and	r17,r3,r17
    3864:	8807883a 	mov	r3,r17
    3868:	88005816 	blt	r17,zero,39cc <_realloc_r+0x1cc>
    386c:	8c805736 	bltu	r17,r18,39cc <_realloc_r+0x1cc>
    3870:	80c0300e 	bge	r16,r3,3934 <_realloc_r+0x134>
    3874:	07000034 	movhi	fp,0
    3878:	e71d0004 	addi	fp,fp,29696
    387c:	e1c00217 	ldw	r7,8(fp)
    3880:	9c09883a 	add	r4,r19,r16
    3884:	22000117 	ldw	r8,4(r4)
    3888:	21c06326 	beq	r4,r7,3a18 <_realloc_r+0x218>
    388c:	017fff84 	movi	r5,-2
    3890:	414a703a 	and	r5,r8,r5
    3894:	214b883a 	add	r5,r4,r5
    3898:	29800117 	ldw	r6,4(r5)
    389c:	3180004c 	andi	r6,r6,1
    38a0:	30003f26 	beq	r6,zero,39a0 <_realloc_r+0x1a0>
    38a4:	1080004c 	andi	r2,r2,1
    38a8:	10008326 	beq	r2,zero,3ab8 <_realloc_r+0x2b8>
    38ac:	900b883a 	mov	r5,r18
    38b0:	a009883a 	mov	r4,r20
    38b4:	0002bf00 	call	2bf0 <_malloc_r>
    38b8:	1025883a 	mov	r18,r2
    38bc:	10011e26 	beq	r2,zero,3d38 <_realloc_r+0x538>
    38c0:	a93fff17 	ldw	r4,-4(r21)
    38c4:	10fffe04 	addi	r3,r2,-8
    38c8:	00bfff84 	movi	r2,-2
    38cc:	2084703a 	and	r2,r4,r2
    38d0:	9885883a 	add	r2,r19,r2
    38d4:	1880ee26 	beq	r3,r2,3c90 <_realloc_r+0x490>
    38d8:	81bfff04 	addi	r6,r16,-4
    38dc:	00800904 	movi	r2,36
    38e0:	1180b836 	bltu	r2,r6,3bc4 <_realloc_r+0x3c4>
    38e4:	00c004c4 	movi	r3,19
    38e8:	19809636 	bltu	r3,r6,3b44 <_realloc_r+0x344>
    38ec:	9005883a 	mov	r2,r18
    38f0:	a807883a 	mov	r3,r21
    38f4:	19000017 	ldw	r4,0(r3)
    38f8:	11000015 	stw	r4,0(r2)
    38fc:	19000117 	ldw	r4,4(r3)
    3900:	11000115 	stw	r4,4(r2)
    3904:	18c00217 	ldw	r3,8(r3)
    3908:	10c00215 	stw	r3,8(r2)
    390c:	a80b883a 	mov	r5,r21
    3910:	a009883a 	mov	r4,r20
    3914:	00048900 	call	4890 <_free_r>
    3918:	a009883a 	mov	r4,r20
    391c:	00059580 	call	5958 <__malloc_unlock>
    3920:	9005883a 	mov	r2,r18
    3924:	00001206 	br	3970 <_realloc_r+0x170>
    3928:	00c00404 	movi	r3,16
    392c:	1823883a 	mov	r17,r3
    3930:	003fce06 	br	386c <__alt_mem_onchip_memory2_0+0xf7bff86c>
    3934:	a825883a 	mov	r18,r21
    3938:	8445c83a 	sub	r2,r16,r17
    393c:	00c003c4 	movi	r3,15
    3940:	18802636 	bltu	r3,r2,39dc <_realloc_r+0x1dc>
    3944:	99800117 	ldw	r6,4(r19)
    3948:	9c07883a 	add	r3,r19,r16
    394c:	3180004c 	andi	r6,r6,1
    3950:	3420b03a 	or	r16,r6,r16
    3954:	9c000115 	stw	r16,4(r19)
    3958:	18800117 	ldw	r2,4(r3)
    395c:	10800054 	ori	r2,r2,1
    3960:	18800115 	stw	r2,4(r3)
    3964:	a009883a 	mov	r4,r20
    3968:	00059580 	call	5958 <__malloc_unlock>
    396c:	9005883a 	mov	r2,r18
    3970:	dfc00917 	ldw	ra,36(sp)
    3974:	df000817 	ldw	fp,32(sp)
    3978:	ddc00717 	ldw	r23,28(sp)
    397c:	dd800617 	ldw	r22,24(sp)
    3980:	dd400517 	ldw	r21,20(sp)
    3984:	dd000417 	ldw	r20,16(sp)
    3988:	dcc00317 	ldw	r19,12(sp)
    398c:	dc800217 	ldw	r18,8(sp)
    3990:	dc400117 	ldw	r17,4(sp)
    3994:	dc000017 	ldw	r16,0(sp)
    3998:	dec00a04 	addi	sp,sp,40
    399c:	f800283a 	ret
    39a0:	017fff04 	movi	r5,-4
    39a4:	414a703a 	and	r5,r8,r5
    39a8:	814d883a 	add	r6,r16,r5
    39ac:	30c01f16 	blt	r6,r3,3a2c <_realloc_r+0x22c>
    39b0:	20800317 	ldw	r2,12(r4)
    39b4:	20c00217 	ldw	r3,8(r4)
    39b8:	a825883a 	mov	r18,r21
    39bc:	3021883a 	mov	r16,r6
    39c0:	18800315 	stw	r2,12(r3)
    39c4:	10c00215 	stw	r3,8(r2)
    39c8:	003fdb06 	br	3938 <__alt_mem_onchip_memory2_0+0xf7bff938>
    39cc:	00800304 	movi	r2,12
    39d0:	a0800015 	stw	r2,0(r20)
    39d4:	0005883a 	mov	r2,zero
    39d8:	003fe506 	br	3970 <__alt_mem_onchip_memory2_0+0xf7bff970>
    39dc:	98c00117 	ldw	r3,4(r19)
    39e0:	9c4b883a 	add	r5,r19,r17
    39e4:	11000054 	ori	r4,r2,1
    39e8:	18c0004c 	andi	r3,r3,1
    39ec:	1c62b03a 	or	r17,r3,r17
    39f0:	9c400115 	stw	r17,4(r19)
    39f4:	29000115 	stw	r4,4(r5)
    39f8:	2885883a 	add	r2,r5,r2
    39fc:	10c00117 	ldw	r3,4(r2)
    3a00:	29400204 	addi	r5,r5,8
    3a04:	a009883a 	mov	r4,r20
    3a08:	18c00054 	ori	r3,r3,1
    3a0c:	10c00115 	stw	r3,4(r2)
    3a10:	00048900 	call	4890 <_free_r>
    3a14:	003fd306 	br	3964 <__alt_mem_onchip_memory2_0+0xf7bff964>
    3a18:	017fff04 	movi	r5,-4
    3a1c:	414a703a 	and	r5,r8,r5
    3a20:	89800404 	addi	r6,r17,16
    3a24:	8151883a 	add	r8,r16,r5
    3a28:	4180590e 	bge	r8,r6,3b90 <_realloc_r+0x390>
    3a2c:	1080004c 	andi	r2,r2,1
    3a30:	103f9e1e 	bne	r2,zero,38ac <__alt_mem_onchip_memory2_0+0xf7bff8ac>
    3a34:	adbffe17 	ldw	r22,-8(r21)
    3a38:	00bfff04 	movi	r2,-4
    3a3c:	9dadc83a 	sub	r22,r19,r22
    3a40:	b1800117 	ldw	r6,4(r22)
    3a44:	3084703a 	and	r2,r6,r2
    3a48:	20002026 	beq	r4,zero,3acc <_realloc_r+0x2cc>
    3a4c:	80af883a 	add	r23,r16,r2
    3a50:	b96f883a 	add	r23,r23,r5
    3a54:	21c05f26 	beq	r4,r7,3bd4 <_realloc_r+0x3d4>
    3a58:	b8c01c16 	blt	r23,r3,3acc <_realloc_r+0x2cc>
    3a5c:	20800317 	ldw	r2,12(r4)
    3a60:	20c00217 	ldw	r3,8(r4)
    3a64:	81bfff04 	addi	r6,r16,-4
    3a68:	01000904 	movi	r4,36
    3a6c:	18800315 	stw	r2,12(r3)
    3a70:	10c00215 	stw	r3,8(r2)
    3a74:	b0c00217 	ldw	r3,8(r22)
    3a78:	b0800317 	ldw	r2,12(r22)
    3a7c:	b4800204 	addi	r18,r22,8
    3a80:	18800315 	stw	r2,12(r3)
    3a84:	10c00215 	stw	r3,8(r2)
    3a88:	21801b36 	bltu	r4,r6,3af8 <_realloc_r+0x2f8>
    3a8c:	008004c4 	movi	r2,19
    3a90:	1180352e 	bgeu	r2,r6,3b68 <_realloc_r+0x368>
    3a94:	a8800017 	ldw	r2,0(r21)
    3a98:	b0800215 	stw	r2,8(r22)
    3a9c:	a8800117 	ldw	r2,4(r21)
    3aa0:	b0800315 	stw	r2,12(r22)
    3aa4:	008006c4 	movi	r2,27
    3aa8:	11807f36 	bltu	r2,r6,3ca8 <_realloc_r+0x4a8>
    3aac:	b0800404 	addi	r2,r22,16
    3ab0:	ad400204 	addi	r21,r21,8
    3ab4:	00002d06 	br	3b6c <_realloc_r+0x36c>
    3ab8:	adbffe17 	ldw	r22,-8(r21)
    3abc:	00bfff04 	movi	r2,-4
    3ac0:	9dadc83a 	sub	r22,r19,r22
    3ac4:	b1000117 	ldw	r4,4(r22)
    3ac8:	2084703a 	and	r2,r4,r2
    3acc:	b03f7726 	beq	r22,zero,38ac <__alt_mem_onchip_memory2_0+0xf7bff8ac>
    3ad0:	80af883a 	add	r23,r16,r2
    3ad4:	b8ff7516 	blt	r23,r3,38ac <__alt_mem_onchip_memory2_0+0xf7bff8ac>
    3ad8:	b0800317 	ldw	r2,12(r22)
    3adc:	b0c00217 	ldw	r3,8(r22)
    3ae0:	81bfff04 	addi	r6,r16,-4
    3ae4:	01000904 	movi	r4,36
    3ae8:	18800315 	stw	r2,12(r3)
    3aec:	10c00215 	stw	r3,8(r2)
    3af0:	b4800204 	addi	r18,r22,8
    3af4:	21bfe52e 	bgeu	r4,r6,3a8c <__alt_mem_onchip_memory2_0+0xf7bffa8c>
    3af8:	a80b883a 	mov	r5,r21
    3afc:	9009883a 	mov	r4,r18
    3b00:	00036a40 	call	36a4 <memmove>
    3b04:	b821883a 	mov	r16,r23
    3b08:	b027883a 	mov	r19,r22
    3b0c:	003f8a06 	br	3938 <__alt_mem_onchip_memory2_0+0xf7bff938>
    3b10:	300b883a 	mov	r5,r6
    3b14:	dfc00917 	ldw	ra,36(sp)
    3b18:	df000817 	ldw	fp,32(sp)
    3b1c:	ddc00717 	ldw	r23,28(sp)
    3b20:	dd800617 	ldw	r22,24(sp)
    3b24:	dd400517 	ldw	r21,20(sp)
    3b28:	dd000417 	ldw	r20,16(sp)
    3b2c:	dcc00317 	ldw	r19,12(sp)
    3b30:	dc800217 	ldw	r18,8(sp)
    3b34:	dc400117 	ldw	r17,4(sp)
    3b38:	dc000017 	ldw	r16,0(sp)
    3b3c:	dec00a04 	addi	sp,sp,40
    3b40:	0002bf01 	jmpi	2bf0 <_malloc_r>
    3b44:	a8c00017 	ldw	r3,0(r21)
    3b48:	90c00015 	stw	r3,0(r18)
    3b4c:	a8c00117 	ldw	r3,4(r21)
    3b50:	90c00115 	stw	r3,4(r18)
    3b54:	00c006c4 	movi	r3,27
    3b58:	19804536 	bltu	r3,r6,3c70 <_realloc_r+0x470>
    3b5c:	90800204 	addi	r2,r18,8
    3b60:	a8c00204 	addi	r3,r21,8
    3b64:	003f6306 	br	38f4 <__alt_mem_onchip_memory2_0+0xf7bff8f4>
    3b68:	9005883a 	mov	r2,r18
    3b6c:	a8c00017 	ldw	r3,0(r21)
    3b70:	b821883a 	mov	r16,r23
    3b74:	b027883a 	mov	r19,r22
    3b78:	10c00015 	stw	r3,0(r2)
    3b7c:	a8c00117 	ldw	r3,4(r21)
    3b80:	10c00115 	stw	r3,4(r2)
    3b84:	a8c00217 	ldw	r3,8(r21)
    3b88:	10c00215 	stw	r3,8(r2)
    3b8c:	003f6a06 	br	3938 <__alt_mem_onchip_memory2_0+0xf7bff938>
    3b90:	9c67883a 	add	r19,r19,r17
    3b94:	4445c83a 	sub	r2,r8,r17
    3b98:	e4c00215 	stw	r19,8(fp)
    3b9c:	10800054 	ori	r2,r2,1
    3ba0:	98800115 	stw	r2,4(r19)
    3ba4:	a8bfff17 	ldw	r2,-4(r21)
    3ba8:	a009883a 	mov	r4,r20
    3bac:	1080004c 	andi	r2,r2,1
    3bb0:	1462b03a 	or	r17,r2,r17
    3bb4:	ac7fff15 	stw	r17,-4(r21)
    3bb8:	00059580 	call	5958 <__malloc_unlock>
    3bbc:	a805883a 	mov	r2,r21
    3bc0:	003f6b06 	br	3970 <__alt_mem_onchip_memory2_0+0xf7bff970>
    3bc4:	a80b883a 	mov	r5,r21
    3bc8:	9009883a 	mov	r4,r18
    3bcc:	00036a40 	call	36a4 <memmove>
    3bd0:	003f4e06 	br	390c <__alt_mem_onchip_memory2_0+0xf7bff90c>
    3bd4:	89000404 	addi	r4,r17,16
    3bd8:	b93fbc16 	blt	r23,r4,3acc <__alt_mem_onchip_memory2_0+0xf7bffacc>
    3bdc:	b0800317 	ldw	r2,12(r22)
    3be0:	b0c00217 	ldw	r3,8(r22)
    3be4:	81bfff04 	addi	r6,r16,-4
    3be8:	01000904 	movi	r4,36
    3bec:	18800315 	stw	r2,12(r3)
    3bf0:	10c00215 	stw	r3,8(r2)
    3bf4:	b4800204 	addi	r18,r22,8
    3bf8:	21804336 	bltu	r4,r6,3d08 <_realloc_r+0x508>
    3bfc:	008004c4 	movi	r2,19
    3c00:	11803f2e 	bgeu	r2,r6,3d00 <_realloc_r+0x500>
    3c04:	a8800017 	ldw	r2,0(r21)
    3c08:	b0800215 	stw	r2,8(r22)
    3c0c:	a8800117 	ldw	r2,4(r21)
    3c10:	b0800315 	stw	r2,12(r22)
    3c14:	008006c4 	movi	r2,27
    3c18:	11803f36 	bltu	r2,r6,3d18 <_realloc_r+0x518>
    3c1c:	b0800404 	addi	r2,r22,16
    3c20:	ad400204 	addi	r21,r21,8
    3c24:	a8c00017 	ldw	r3,0(r21)
    3c28:	10c00015 	stw	r3,0(r2)
    3c2c:	a8c00117 	ldw	r3,4(r21)
    3c30:	10c00115 	stw	r3,4(r2)
    3c34:	a8c00217 	ldw	r3,8(r21)
    3c38:	10c00215 	stw	r3,8(r2)
    3c3c:	b447883a 	add	r3,r22,r17
    3c40:	bc45c83a 	sub	r2,r23,r17
    3c44:	e0c00215 	stw	r3,8(fp)
    3c48:	10800054 	ori	r2,r2,1
    3c4c:	18800115 	stw	r2,4(r3)
    3c50:	b0800117 	ldw	r2,4(r22)
    3c54:	a009883a 	mov	r4,r20
    3c58:	1080004c 	andi	r2,r2,1
    3c5c:	1462b03a 	or	r17,r2,r17
    3c60:	b4400115 	stw	r17,4(r22)
    3c64:	00059580 	call	5958 <__malloc_unlock>
    3c68:	9005883a 	mov	r2,r18
    3c6c:	003f4006 	br	3970 <__alt_mem_onchip_memory2_0+0xf7bff970>
    3c70:	a8c00217 	ldw	r3,8(r21)
    3c74:	90c00215 	stw	r3,8(r18)
    3c78:	a8c00317 	ldw	r3,12(r21)
    3c7c:	90c00315 	stw	r3,12(r18)
    3c80:	30801126 	beq	r6,r2,3cc8 <_realloc_r+0x4c8>
    3c84:	90800404 	addi	r2,r18,16
    3c88:	a8c00404 	addi	r3,r21,16
    3c8c:	003f1906 	br	38f4 <__alt_mem_onchip_memory2_0+0xf7bff8f4>
    3c90:	90ffff17 	ldw	r3,-4(r18)
    3c94:	00bfff04 	movi	r2,-4
    3c98:	a825883a 	mov	r18,r21
    3c9c:	1884703a 	and	r2,r3,r2
    3ca0:	80a1883a 	add	r16,r16,r2
    3ca4:	003f2406 	br	3938 <__alt_mem_onchip_memory2_0+0xf7bff938>
    3ca8:	a8800217 	ldw	r2,8(r21)
    3cac:	b0800415 	stw	r2,16(r22)
    3cb0:	a8800317 	ldw	r2,12(r21)
    3cb4:	b0800515 	stw	r2,20(r22)
    3cb8:	31000a26 	beq	r6,r4,3ce4 <_realloc_r+0x4e4>
    3cbc:	b0800604 	addi	r2,r22,24
    3cc0:	ad400404 	addi	r21,r21,16
    3cc4:	003fa906 	br	3b6c <__alt_mem_onchip_memory2_0+0xf7bffb6c>
    3cc8:	a9000417 	ldw	r4,16(r21)
    3ccc:	90800604 	addi	r2,r18,24
    3cd0:	a8c00604 	addi	r3,r21,24
    3cd4:	91000415 	stw	r4,16(r18)
    3cd8:	a9000517 	ldw	r4,20(r21)
    3cdc:	91000515 	stw	r4,20(r18)
    3ce0:	003f0406 	br	38f4 <__alt_mem_onchip_memory2_0+0xf7bff8f4>
    3ce4:	a8c00417 	ldw	r3,16(r21)
    3ce8:	ad400604 	addi	r21,r21,24
    3cec:	b0800804 	addi	r2,r22,32
    3cf0:	b0c00615 	stw	r3,24(r22)
    3cf4:	a8ffff17 	ldw	r3,-4(r21)
    3cf8:	b0c00715 	stw	r3,28(r22)
    3cfc:	003f9b06 	br	3b6c <__alt_mem_onchip_memory2_0+0xf7bffb6c>
    3d00:	9005883a 	mov	r2,r18
    3d04:	003fc706 	br	3c24 <__alt_mem_onchip_memory2_0+0xf7bffc24>
    3d08:	a80b883a 	mov	r5,r21
    3d0c:	9009883a 	mov	r4,r18
    3d10:	00036a40 	call	36a4 <memmove>
    3d14:	003fc906 	br	3c3c <__alt_mem_onchip_memory2_0+0xf7bffc3c>
    3d18:	a8800217 	ldw	r2,8(r21)
    3d1c:	b0800415 	stw	r2,16(r22)
    3d20:	a8800317 	ldw	r2,12(r21)
    3d24:	b0800515 	stw	r2,20(r22)
    3d28:	31000726 	beq	r6,r4,3d48 <_realloc_r+0x548>
    3d2c:	b0800604 	addi	r2,r22,24
    3d30:	ad400404 	addi	r21,r21,16
    3d34:	003fbb06 	br	3c24 <__alt_mem_onchip_memory2_0+0xf7bffc24>
    3d38:	a009883a 	mov	r4,r20
    3d3c:	00059580 	call	5958 <__malloc_unlock>
    3d40:	0005883a 	mov	r2,zero
    3d44:	003f0a06 	br	3970 <__alt_mem_onchip_memory2_0+0xf7bff970>
    3d48:	a8c00417 	ldw	r3,16(r21)
    3d4c:	ad400604 	addi	r21,r21,24
    3d50:	b0800804 	addi	r2,r22,32
    3d54:	b0c00615 	stw	r3,24(r22)
    3d58:	a8ffff17 	ldw	r3,-4(r21)
    3d5c:	b0c00715 	stw	r3,28(r22)
    3d60:	003fb006 	br	3c24 <__alt_mem_onchip_memory2_0+0xf7bffc24>

00003d64 <_sbrk_r>:
    3d64:	defffd04 	addi	sp,sp,-12
    3d68:	dc000015 	stw	r16,0(sp)
    3d6c:	04000074 	movhi	r16,1
    3d70:	dc400115 	stw	r17,4(sp)
    3d74:	8424d804 	addi	r16,r16,-27808
    3d78:	2023883a 	mov	r17,r4
    3d7c:	2809883a 	mov	r4,r5
    3d80:	dfc00215 	stw	ra,8(sp)
    3d84:	80000015 	stw	zero,0(r16)
    3d88:	0005ab40 	call	5ab4 <sbrk>
    3d8c:	00ffffc4 	movi	r3,-1
    3d90:	10c00526 	beq	r2,r3,3da8 <_sbrk_r+0x44>
    3d94:	dfc00217 	ldw	ra,8(sp)
    3d98:	dc400117 	ldw	r17,4(sp)
    3d9c:	dc000017 	ldw	r16,0(sp)
    3da0:	dec00304 	addi	sp,sp,12
    3da4:	f800283a 	ret
    3da8:	80c00017 	ldw	r3,0(r16)
    3dac:	183ff926 	beq	r3,zero,3d94 <__alt_mem_onchip_memory2_0+0xf7bffd94>
    3db0:	88c00015 	stw	r3,0(r17)
    3db4:	003ff706 	br	3d94 <__alt_mem_onchip_memory2_0+0xf7bffd94>

00003db8 <strlen>:
    3db8:	208000cc 	andi	r2,r4,3
    3dbc:	10002026 	beq	r2,zero,3e40 <strlen+0x88>
    3dc0:	20800007 	ldb	r2,0(r4)
    3dc4:	10002026 	beq	r2,zero,3e48 <strlen+0x90>
    3dc8:	2005883a 	mov	r2,r4
    3dcc:	00000206 	br	3dd8 <strlen+0x20>
    3dd0:	10c00007 	ldb	r3,0(r2)
    3dd4:	18001826 	beq	r3,zero,3e38 <strlen+0x80>
    3dd8:	10800044 	addi	r2,r2,1
    3ddc:	10c000cc 	andi	r3,r2,3
    3de0:	183ffb1e 	bne	r3,zero,3dd0 <__alt_mem_onchip_memory2_0+0xf7bffdd0>
    3de4:	10c00017 	ldw	r3,0(r2)
    3de8:	01ffbff4 	movhi	r7,65279
    3dec:	39ffbfc4 	addi	r7,r7,-257
    3df0:	00ca303a 	nor	r5,zero,r3
    3df4:	01a02074 	movhi	r6,32897
    3df8:	19c7883a 	add	r3,r3,r7
    3dfc:	31a02004 	addi	r6,r6,-32640
    3e00:	1946703a 	and	r3,r3,r5
    3e04:	1986703a 	and	r3,r3,r6
    3e08:	1800091e 	bne	r3,zero,3e30 <strlen+0x78>
    3e0c:	10800104 	addi	r2,r2,4
    3e10:	10c00017 	ldw	r3,0(r2)
    3e14:	19cb883a 	add	r5,r3,r7
    3e18:	00c6303a 	nor	r3,zero,r3
    3e1c:	28c6703a 	and	r3,r5,r3
    3e20:	1986703a 	and	r3,r3,r6
    3e24:	183ff926 	beq	r3,zero,3e0c <__alt_mem_onchip_memory2_0+0xf7bffe0c>
    3e28:	00000106 	br	3e30 <strlen+0x78>
    3e2c:	10800044 	addi	r2,r2,1
    3e30:	10c00007 	ldb	r3,0(r2)
    3e34:	183ffd1e 	bne	r3,zero,3e2c <__alt_mem_onchip_memory2_0+0xf7bffe2c>
    3e38:	1105c83a 	sub	r2,r2,r4
    3e3c:	f800283a 	ret
    3e40:	2005883a 	mov	r2,r4
    3e44:	003fe706 	br	3de4 <__alt_mem_onchip_memory2_0+0xf7bffde4>
    3e48:	0005883a 	mov	r2,zero
    3e4c:	f800283a 	ret

00003e50 <__swsetup_r>:
    3e50:	00800034 	movhi	r2,0
    3e54:	defffd04 	addi	sp,sp,-12
    3e58:	109e0c04 	addi	r2,r2,30768
    3e5c:	dc400115 	stw	r17,4(sp)
    3e60:	2023883a 	mov	r17,r4
    3e64:	11000017 	ldw	r4,0(r2)
    3e68:	dc000015 	stw	r16,0(sp)
    3e6c:	dfc00215 	stw	ra,8(sp)
    3e70:	2821883a 	mov	r16,r5
    3e74:	20000226 	beq	r4,zero,3e80 <__swsetup_r+0x30>
    3e78:	20800e17 	ldw	r2,56(r4)
    3e7c:	10003126 	beq	r2,zero,3f44 <__swsetup_r+0xf4>
    3e80:	8080030b 	ldhu	r2,12(r16)
    3e84:	10c0020c 	andi	r3,r2,8
    3e88:	1009883a 	mov	r4,r2
    3e8c:	18000f26 	beq	r3,zero,3ecc <__swsetup_r+0x7c>
    3e90:	80c00417 	ldw	r3,16(r16)
    3e94:	18001526 	beq	r3,zero,3eec <__swsetup_r+0x9c>
    3e98:	1100004c 	andi	r4,r2,1
    3e9c:	20001c1e 	bne	r4,zero,3f10 <__swsetup_r+0xc0>
    3ea0:	1080008c 	andi	r2,r2,2
    3ea4:	1000291e 	bne	r2,zero,3f4c <__swsetup_r+0xfc>
    3ea8:	80800517 	ldw	r2,20(r16)
    3eac:	80800215 	stw	r2,8(r16)
    3eb0:	18001c26 	beq	r3,zero,3f24 <__swsetup_r+0xd4>
    3eb4:	0005883a 	mov	r2,zero
    3eb8:	dfc00217 	ldw	ra,8(sp)
    3ebc:	dc400117 	ldw	r17,4(sp)
    3ec0:	dc000017 	ldw	r16,0(sp)
    3ec4:	dec00304 	addi	sp,sp,12
    3ec8:	f800283a 	ret
    3ecc:	2080040c 	andi	r2,r4,16
    3ed0:	10002e26 	beq	r2,zero,3f8c <__swsetup_r+0x13c>
    3ed4:	2080010c 	andi	r2,r4,4
    3ed8:	10001e1e 	bne	r2,zero,3f54 <__swsetup_r+0x104>
    3edc:	80c00417 	ldw	r3,16(r16)
    3ee0:	20800214 	ori	r2,r4,8
    3ee4:	8080030d 	sth	r2,12(r16)
    3ee8:	183feb1e 	bne	r3,zero,3e98 <__alt_mem_onchip_memory2_0+0xf7bffe98>
    3eec:	1100a00c 	andi	r4,r2,640
    3ef0:	01408004 	movi	r5,512
    3ef4:	217fe826 	beq	r4,r5,3e98 <__alt_mem_onchip_memory2_0+0xf7bffe98>
    3ef8:	800b883a 	mov	r5,r16
    3efc:	8809883a 	mov	r4,r17
    3f00:	0004d280 	call	4d28 <__smakebuf_r>
    3f04:	8080030b 	ldhu	r2,12(r16)
    3f08:	80c00417 	ldw	r3,16(r16)
    3f0c:	003fe206 	br	3e98 <__alt_mem_onchip_memory2_0+0xf7bffe98>
    3f10:	80800517 	ldw	r2,20(r16)
    3f14:	80000215 	stw	zero,8(r16)
    3f18:	0085c83a 	sub	r2,zero,r2
    3f1c:	80800615 	stw	r2,24(r16)
    3f20:	183fe41e 	bne	r3,zero,3eb4 <__alt_mem_onchip_memory2_0+0xf7bffeb4>
    3f24:	80c0030b 	ldhu	r3,12(r16)
    3f28:	0005883a 	mov	r2,zero
    3f2c:	1900200c 	andi	r4,r3,128
    3f30:	203fe126 	beq	r4,zero,3eb8 <__alt_mem_onchip_memory2_0+0xf7bffeb8>
    3f34:	18c01014 	ori	r3,r3,64
    3f38:	80c0030d 	sth	r3,12(r16)
    3f3c:	00bfffc4 	movi	r2,-1
    3f40:	003fdd06 	br	3eb8 <__alt_mem_onchip_memory2_0+0xf7bffeb8>
    3f44:	000471c0 	call	471c <__sinit>
    3f48:	003fcd06 	br	3e80 <__alt_mem_onchip_memory2_0+0xf7bffe80>
    3f4c:	0005883a 	mov	r2,zero
    3f50:	003fd606 	br	3eac <__alt_mem_onchip_memory2_0+0xf7bffeac>
    3f54:	81400c17 	ldw	r5,48(r16)
    3f58:	28000626 	beq	r5,zero,3f74 <__swsetup_r+0x124>
    3f5c:	80801004 	addi	r2,r16,64
    3f60:	28800326 	beq	r5,r2,3f70 <__swsetup_r+0x120>
    3f64:	8809883a 	mov	r4,r17
    3f68:	00048900 	call	4890 <_free_r>
    3f6c:	8100030b 	ldhu	r4,12(r16)
    3f70:	80000c15 	stw	zero,48(r16)
    3f74:	80c00417 	ldw	r3,16(r16)
    3f78:	00bff6c4 	movi	r2,-37
    3f7c:	1108703a 	and	r4,r2,r4
    3f80:	80000115 	stw	zero,4(r16)
    3f84:	80c00015 	stw	r3,0(r16)
    3f88:	003fd506 	br	3ee0 <__alt_mem_onchip_memory2_0+0xf7bffee0>
    3f8c:	00800244 	movi	r2,9
    3f90:	88800015 	stw	r2,0(r17)
    3f94:	20801014 	ori	r2,r4,64
    3f98:	8080030d 	sth	r2,12(r16)
    3f9c:	00bfffc4 	movi	r2,-1
    3fa0:	003fc506 	br	3eb8 <__alt_mem_onchip_memory2_0+0xf7bffeb8>

00003fa4 <__call_exitprocs>:
    3fa4:	defff504 	addi	sp,sp,-44
    3fa8:	df000915 	stw	fp,36(sp)
    3fac:	dd400615 	stw	r21,24(sp)
    3fb0:	dc800315 	stw	r18,12(sp)
    3fb4:	dfc00a15 	stw	ra,40(sp)
    3fb8:	ddc00815 	stw	r23,32(sp)
    3fbc:	dd800715 	stw	r22,28(sp)
    3fc0:	dd000515 	stw	r20,20(sp)
    3fc4:	dcc00415 	stw	r19,16(sp)
    3fc8:	dc400215 	stw	r17,8(sp)
    3fcc:	dc000115 	stw	r16,4(sp)
    3fd0:	d9000015 	stw	r4,0(sp)
    3fd4:	2839883a 	mov	fp,r5
    3fd8:	04800044 	movi	r18,1
    3fdc:	057fffc4 	movi	r21,-1
    3fe0:	00800034 	movhi	r2,0
    3fe4:	109e0b04 	addi	r2,r2,30764
    3fe8:	12000017 	ldw	r8,0(r2)
    3fec:	45005217 	ldw	r20,328(r8)
    3ff0:	44c05204 	addi	r19,r8,328
    3ff4:	a0001c26 	beq	r20,zero,4068 <__call_exitprocs+0xc4>
    3ff8:	a0800117 	ldw	r2,4(r20)
    3ffc:	15ffffc4 	addi	r23,r2,-1
    4000:	b8000d16 	blt	r23,zero,4038 <__call_exitprocs+0x94>
    4004:	14000044 	addi	r16,r2,1
    4008:	8421883a 	add	r16,r16,r16
    400c:	8421883a 	add	r16,r16,r16
    4010:	84402004 	addi	r17,r16,128
    4014:	a463883a 	add	r17,r20,r17
    4018:	a421883a 	add	r16,r20,r16
    401c:	e0001e26 	beq	fp,zero,4098 <__call_exitprocs+0xf4>
    4020:	80804017 	ldw	r2,256(r16)
    4024:	e0801c26 	beq	fp,r2,4098 <__call_exitprocs+0xf4>
    4028:	bdffffc4 	addi	r23,r23,-1
    402c:	843fff04 	addi	r16,r16,-4
    4030:	8c7fff04 	addi	r17,r17,-4
    4034:	bd7ff91e 	bne	r23,r21,401c <__alt_mem_onchip_memory2_0+0xf7c0001c>
    4038:	00800034 	movhi	r2,0
    403c:	10800004 	addi	r2,r2,0
    4040:	10000926 	beq	r2,zero,4068 <__call_exitprocs+0xc4>
    4044:	a0800117 	ldw	r2,4(r20)
    4048:	1000301e 	bne	r2,zero,410c <__call_exitprocs+0x168>
    404c:	a0800017 	ldw	r2,0(r20)
    4050:	10003226 	beq	r2,zero,411c <__call_exitprocs+0x178>
    4054:	a009883a 	mov	r4,r20
    4058:	98800015 	stw	r2,0(r19)
    405c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
    4060:	9d000017 	ldw	r20,0(r19)
    4064:	a03fe41e 	bne	r20,zero,3ff8 <__alt_mem_onchip_memory2_0+0xf7bffff8>
    4068:	dfc00a17 	ldw	ra,40(sp)
    406c:	df000917 	ldw	fp,36(sp)
    4070:	ddc00817 	ldw	r23,32(sp)
    4074:	dd800717 	ldw	r22,28(sp)
    4078:	dd400617 	ldw	r21,24(sp)
    407c:	dd000517 	ldw	r20,20(sp)
    4080:	dcc00417 	ldw	r19,16(sp)
    4084:	dc800317 	ldw	r18,12(sp)
    4088:	dc400217 	ldw	r17,8(sp)
    408c:	dc000117 	ldw	r16,4(sp)
    4090:	dec00b04 	addi	sp,sp,44
    4094:	f800283a 	ret
    4098:	a0800117 	ldw	r2,4(r20)
    409c:	80c00017 	ldw	r3,0(r16)
    40a0:	10bfffc4 	addi	r2,r2,-1
    40a4:	15c01426 	beq	r2,r23,40f8 <__call_exitprocs+0x154>
    40a8:	80000015 	stw	zero,0(r16)
    40ac:	183fde26 	beq	r3,zero,4028 <__alt_mem_onchip_memory2_0+0xf7c00028>
    40b0:	95c8983a 	sll	r4,r18,r23
    40b4:	a0806217 	ldw	r2,392(r20)
    40b8:	a5800117 	ldw	r22,4(r20)
    40bc:	2084703a 	and	r2,r4,r2
    40c0:	10000b26 	beq	r2,zero,40f0 <__call_exitprocs+0x14c>
    40c4:	a0806317 	ldw	r2,396(r20)
    40c8:	2088703a 	and	r4,r4,r2
    40cc:	20000c1e 	bne	r4,zero,4100 <__call_exitprocs+0x15c>
    40d0:	89400017 	ldw	r5,0(r17)
    40d4:	d9000017 	ldw	r4,0(sp)
    40d8:	183ee83a 	callr	r3
    40dc:	a0800117 	ldw	r2,4(r20)
    40e0:	15bfbf1e 	bne	r2,r22,3fe0 <__alt_mem_onchip_memory2_0+0xf7bfffe0>
    40e4:	98800017 	ldw	r2,0(r19)
    40e8:	153fcf26 	beq	r2,r20,4028 <__alt_mem_onchip_memory2_0+0xf7c00028>
    40ec:	003fbc06 	br	3fe0 <__alt_mem_onchip_memory2_0+0xf7bfffe0>
    40f0:	183ee83a 	callr	r3
    40f4:	003ff906 	br	40dc <__alt_mem_onchip_memory2_0+0xf7c000dc>
    40f8:	a5c00115 	stw	r23,4(r20)
    40fc:	003feb06 	br	40ac <__alt_mem_onchip_memory2_0+0xf7c000ac>
    4100:	89000017 	ldw	r4,0(r17)
    4104:	183ee83a 	callr	r3
    4108:	003ff406 	br	40dc <__alt_mem_onchip_memory2_0+0xf7c000dc>
    410c:	a0800017 	ldw	r2,0(r20)
    4110:	a027883a 	mov	r19,r20
    4114:	1029883a 	mov	r20,r2
    4118:	003fb606 	br	3ff4 <__alt_mem_onchip_memory2_0+0xf7bffff4>
    411c:	0005883a 	mov	r2,zero
    4120:	003ffb06 	br	4110 <__alt_mem_onchip_memory2_0+0xf7c00110>

00004124 <__sflush_r>:
    4124:	2880030b 	ldhu	r2,12(r5)
    4128:	defffb04 	addi	sp,sp,-20
    412c:	dcc00315 	stw	r19,12(sp)
    4130:	dc400115 	stw	r17,4(sp)
    4134:	dfc00415 	stw	ra,16(sp)
    4138:	dc800215 	stw	r18,8(sp)
    413c:	dc000015 	stw	r16,0(sp)
    4140:	10c0020c 	andi	r3,r2,8
    4144:	2823883a 	mov	r17,r5
    4148:	2027883a 	mov	r19,r4
    414c:	1800311e 	bne	r3,zero,4214 <__sflush_r+0xf0>
    4150:	28c00117 	ldw	r3,4(r5)
    4154:	10820014 	ori	r2,r2,2048
    4158:	2880030d 	sth	r2,12(r5)
    415c:	00c04b0e 	bge	zero,r3,428c <__sflush_r+0x168>
    4160:	8a000a17 	ldw	r8,40(r17)
    4164:	40002326 	beq	r8,zero,41f4 <__sflush_r+0xd0>
    4168:	9c000017 	ldw	r16,0(r19)
    416c:	10c4000c 	andi	r3,r2,4096
    4170:	98000015 	stw	zero,0(r19)
    4174:	18004826 	beq	r3,zero,4298 <__sflush_r+0x174>
    4178:	89801417 	ldw	r6,80(r17)
    417c:	10c0010c 	andi	r3,r2,4
    4180:	18000626 	beq	r3,zero,419c <__sflush_r+0x78>
    4184:	88c00117 	ldw	r3,4(r17)
    4188:	88800c17 	ldw	r2,48(r17)
    418c:	30cdc83a 	sub	r6,r6,r3
    4190:	10000226 	beq	r2,zero,419c <__sflush_r+0x78>
    4194:	88800f17 	ldw	r2,60(r17)
    4198:	308dc83a 	sub	r6,r6,r2
    419c:	89400717 	ldw	r5,28(r17)
    41a0:	000f883a 	mov	r7,zero
    41a4:	9809883a 	mov	r4,r19
    41a8:	403ee83a 	callr	r8
    41ac:	00ffffc4 	movi	r3,-1
    41b0:	10c04426 	beq	r2,r3,42c4 <__sflush_r+0x1a0>
    41b4:	88c0030b 	ldhu	r3,12(r17)
    41b8:	89000417 	ldw	r4,16(r17)
    41bc:	88000115 	stw	zero,4(r17)
    41c0:	197dffcc 	andi	r5,r3,63487
    41c4:	8940030d 	sth	r5,12(r17)
    41c8:	89000015 	stw	r4,0(r17)
    41cc:	18c4000c 	andi	r3,r3,4096
    41d0:	18002c1e 	bne	r3,zero,4284 <__sflush_r+0x160>
    41d4:	89400c17 	ldw	r5,48(r17)
    41d8:	9c000015 	stw	r16,0(r19)
    41dc:	28000526 	beq	r5,zero,41f4 <__sflush_r+0xd0>
    41e0:	88801004 	addi	r2,r17,64
    41e4:	28800226 	beq	r5,r2,41f0 <__sflush_r+0xcc>
    41e8:	9809883a 	mov	r4,r19
    41ec:	00048900 	call	4890 <_free_r>
    41f0:	88000c15 	stw	zero,48(r17)
    41f4:	0005883a 	mov	r2,zero
    41f8:	dfc00417 	ldw	ra,16(sp)
    41fc:	dcc00317 	ldw	r19,12(sp)
    4200:	dc800217 	ldw	r18,8(sp)
    4204:	dc400117 	ldw	r17,4(sp)
    4208:	dc000017 	ldw	r16,0(sp)
    420c:	dec00504 	addi	sp,sp,20
    4210:	f800283a 	ret
    4214:	2c800417 	ldw	r18,16(r5)
    4218:	903ff626 	beq	r18,zero,41f4 <__alt_mem_onchip_memory2_0+0xf7c001f4>
    421c:	2c000017 	ldw	r16,0(r5)
    4220:	108000cc 	andi	r2,r2,3
    4224:	2c800015 	stw	r18,0(r5)
    4228:	84a1c83a 	sub	r16,r16,r18
    422c:	1000131e 	bne	r2,zero,427c <__sflush_r+0x158>
    4230:	28800517 	ldw	r2,20(r5)
    4234:	88800215 	stw	r2,8(r17)
    4238:	04000316 	blt	zero,r16,4248 <__sflush_r+0x124>
    423c:	003fed06 	br	41f4 <__alt_mem_onchip_memory2_0+0xf7c001f4>
    4240:	90a5883a 	add	r18,r18,r2
    4244:	043feb0e 	bge	zero,r16,41f4 <__alt_mem_onchip_memory2_0+0xf7c001f4>
    4248:	88800917 	ldw	r2,36(r17)
    424c:	89400717 	ldw	r5,28(r17)
    4250:	800f883a 	mov	r7,r16
    4254:	900d883a 	mov	r6,r18
    4258:	9809883a 	mov	r4,r19
    425c:	103ee83a 	callr	r2
    4260:	80a1c83a 	sub	r16,r16,r2
    4264:	00bff616 	blt	zero,r2,4240 <__alt_mem_onchip_memory2_0+0xf7c00240>
    4268:	88c0030b 	ldhu	r3,12(r17)
    426c:	00bfffc4 	movi	r2,-1
    4270:	18c01014 	ori	r3,r3,64
    4274:	88c0030d 	sth	r3,12(r17)
    4278:	003fdf06 	br	41f8 <__alt_mem_onchip_memory2_0+0xf7c001f8>
    427c:	0005883a 	mov	r2,zero
    4280:	003fec06 	br	4234 <__alt_mem_onchip_memory2_0+0xf7c00234>
    4284:	88801415 	stw	r2,80(r17)
    4288:	003fd206 	br	41d4 <__alt_mem_onchip_memory2_0+0xf7c001d4>
    428c:	28c00f17 	ldw	r3,60(r5)
    4290:	00ffb316 	blt	zero,r3,4160 <__alt_mem_onchip_memory2_0+0xf7c00160>
    4294:	003fd706 	br	41f4 <__alt_mem_onchip_memory2_0+0xf7c001f4>
    4298:	89400717 	ldw	r5,28(r17)
    429c:	000d883a 	mov	r6,zero
    42a0:	01c00044 	movi	r7,1
    42a4:	9809883a 	mov	r4,r19
    42a8:	403ee83a 	callr	r8
    42ac:	100d883a 	mov	r6,r2
    42b0:	00bfffc4 	movi	r2,-1
    42b4:	30801426 	beq	r6,r2,4308 <__sflush_r+0x1e4>
    42b8:	8880030b 	ldhu	r2,12(r17)
    42bc:	8a000a17 	ldw	r8,40(r17)
    42c0:	003fae06 	br	417c <__alt_mem_onchip_memory2_0+0xf7c0017c>
    42c4:	98c00017 	ldw	r3,0(r19)
    42c8:	183fba26 	beq	r3,zero,41b4 <__alt_mem_onchip_memory2_0+0xf7c001b4>
    42cc:	01000744 	movi	r4,29
    42d0:	19000626 	beq	r3,r4,42ec <__sflush_r+0x1c8>
    42d4:	01000584 	movi	r4,22
    42d8:	19000426 	beq	r3,r4,42ec <__sflush_r+0x1c8>
    42dc:	88c0030b 	ldhu	r3,12(r17)
    42e0:	18c01014 	ori	r3,r3,64
    42e4:	88c0030d 	sth	r3,12(r17)
    42e8:	003fc306 	br	41f8 <__alt_mem_onchip_memory2_0+0xf7c001f8>
    42ec:	8880030b 	ldhu	r2,12(r17)
    42f0:	88c00417 	ldw	r3,16(r17)
    42f4:	88000115 	stw	zero,4(r17)
    42f8:	10bdffcc 	andi	r2,r2,63487
    42fc:	8880030d 	sth	r2,12(r17)
    4300:	88c00015 	stw	r3,0(r17)
    4304:	003fb306 	br	41d4 <__alt_mem_onchip_memory2_0+0xf7c001d4>
    4308:	98800017 	ldw	r2,0(r19)
    430c:	103fea26 	beq	r2,zero,42b8 <__alt_mem_onchip_memory2_0+0xf7c002b8>
    4310:	00c00744 	movi	r3,29
    4314:	10c00226 	beq	r2,r3,4320 <__sflush_r+0x1fc>
    4318:	00c00584 	movi	r3,22
    431c:	10c0031e 	bne	r2,r3,432c <__sflush_r+0x208>
    4320:	9c000015 	stw	r16,0(r19)
    4324:	0005883a 	mov	r2,zero
    4328:	003fb306 	br	41f8 <__alt_mem_onchip_memory2_0+0xf7c001f8>
    432c:	88c0030b 	ldhu	r3,12(r17)
    4330:	3005883a 	mov	r2,r6
    4334:	18c01014 	ori	r3,r3,64
    4338:	88c0030d 	sth	r3,12(r17)
    433c:	003fae06 	br	41f8 <__alt_mem_onchip_memory2_0+0xf7c001f8>

00004340 <_fflush_r>:
    4340:	defffd04 	addi	sp,sp,-12
    4344:	dc000115 	stw	r16,4(sp)
    4348:	dfc00215 	stw	ra,8(sp)
    434c:	2021883a 	mov	r16,r4
    4350:	20000226 	beq	r4,zero,435c <_fflush_r+0x1c>
    4354:	20800e17 	ldw	r2,56(r4)
    4358:	10000c26 	beq	r2,zero,438c <_fflush_r+0x4c>
    435c:	2880030f 	ldh	r2,12(r5)
    4360:	1000051e 	bne	r2,zero,4378 <_fflush_r+0x38>
    4364:	0005883a 	mov	r2,zero
    4368:	dfc00217 	ldw	ra,8(sp)
    436c:	dc000117 	ldw	r16,4(sp)
    4370:	dec00304 	addi	sp,sp,12
    4374:	f800283a 	ret
    4378:	8009883a 	mov	r4,r16
    437c:	dfc00217 	ldw	ra,8(sp)
    4380:	dc000117 	ldw	r16,4(sp)
    4384:	dec00304 	addi	sp,sp,12
    4388:	00041241 	jmpi	4124 <__sflush_r>
    438c:	d9400015 	stw	r5,0(sp)
    4390:	000471c0 	call	471c <__sinit>
    4394:	d9400017 	ldw	r5,0(sp)
    4398:	003ff006 	br	435c <__alt_mem_onchip_memory2_0+0xf7c0035c>

0000439c <fflush>:
    439c:	20000526 	beq	r4,zero,43b4 <fflush+0x18>
    43a0:	00800034 	movhi	r2,0
    43a4:	109e0c04 	addi	r2,r2,30768
    43a8:	200b883a 	mov	r5,r4
    43ac:	11000017 	ldw	r4,0(r2)
    43b0:	00043401 	jmpi	4340 <_fflush_r>
    43b4:	00800034 	movhi	r2,0
    43b8:	109e0b04 	addi	r2,r2,30764
    43bc:	11000017 	ldw	r4,0(r2)
    43c0:	01400034 	movhi	r5,0
    43c4:	2950d004 	addi	r5,r5,17216
    43c8:	0004c641 	jmpi	4c64 <_fwalk_reent>

000043cc <__fp_unlock>:
    43cc:	0005883a 	mov	r2,zero
    43d0:	f800283a 	ret

000043d4 <_cleanup_r>:
    43d4:	01400034 	movhi	r5,0
    43d8:	29547f04 	addi	r5,r5,20988
    43dc:	0004c641 	jmpi	4c64 <_fwalk_reent>

000043e0 <__sinit.part.1>:
    43e0:	defff704 	addi	sp,sp,-36
    43e4:	00c00034 	movhi	r3,0
    43e8:	dfc00815 	stw	ra,32(sp)
    43ec:	ddc00715 	stw	r23,28(sp)
    43f0:	dd800615 	stw	r22,24(sp)
    43f4:	dd400515 	stw	r21,20(sp)
    43f8:	dd000415 	stw	r20,16(sp)
    43fc:	dcc00315 	stw	r19,12(sp)
    4400:	dc800215 	stw	r18,8(sp)
    4404:	dc400115 	stw	r17,4(sp)
    4408:	dc000015 	stw	r16,0(sp)
    440c:	18d0f504 	addi	r3,r3,17364
    4410:	24000117 	ldw	r16,4(r4)
    4414:	20c00f15 	stw	r3,60(r4)
    4418:	2080bb04 	addi	r2,r4,748
    441c:	00c000c4 	movi	r3,3
    4420:	20c0b915 	stw	r3,740(r4)
    4424:	2080ba15 	stw	r2,744(r4)
    4428:	2000b815 	stw	zero,736(r4)
    442c:	05c00204 	movi	r23,8
    4430:	00800104 	movi	r2,4
    4434:	2025883a 	mov	r18,r4
    4438:	b80d883a 	mov	r6,r23
    443c:	81001704 	addi	r4,r16,92
    4440:	000b883a 	mov	r5,zero
    4444:	80000015 	stw	zero,0(r16)
    4448:	80000115 	stw	zero,4(r16)
    444c:	80000215 	stw	zero,8(r16)
    4450:	8080030d 	sth	r2,12(r16)
    4454:	80001915 	stw	zero,100(r16)
    4458:	8000038d 	sth	zero,14(r16)
    445c:	80000415 	stw	zero,16(r16)
    4460:	80000515 	stw	zero,20(r16)
    4464:	80000615 	stw	zero,24(r16)
    4468:	0004ee40 	call	4ee4 <memset>
    446c:	05800034 	movhi	r22,0
    4470:	94400217 	ldw	r17,8(r18)
    4474:	05400034 	movhi	r21,0
    4478:	05000034 	movhi	r20,0
    447c:	04c00034 	movhi	r19,0
    4480:	b5940304 	addi	r22,r22,20492
    4484:	ad541a04 	addi	r21,r21,20584
    4488:	a5143904 	addi	r20,r20,20708
    448c:	9cd45004 	addi	r19,r19,20800
    4490:	85800815 	stw	r22,32(r16)
    4494:	85400915 	stw	r21,36(r16)
    4498:	85000a15 	stw	r20,40(r16)
    449c:	84c00b15 	stw	r19,44(r16)
    44a0:	84000715 	stw	r16,28(r16)
    44a4:	00800284 	movi	r2,10
    44a8:	8880030d 	sth	r2,12(r17)
    44ac:	00800044 	movi	r2,1
    44b0:	b80d883a 	mov	r6,r23
    44b4:	89001704 	addi	r4,r17,92
    44b8:	000b883a 	mov	r5,zero
    44bc:	88000015 	stw	zero,0(r17)
    44c0:	88000115 	stw	zero,4(r17)
    44c4:	88000215 	stw	zero,8(r17)
    44c8:	88001915 	stw	zero,100(r17)
    44cc:	8880038d 	sth	r2,14(r17)
    44d0:	88000415 	stw	zero,16(r17)
    44d4:	88000515 	stw	zero,20(r17)
    44d8:	88000615 	stw	zero,24(r17)
    44dc:	0004ee40 	call	4ee4 <memset>
    44e0:	94000317 	ldw	r16,12(r18)
    44e4:	00800484 	movi	r2,18
    44e8:	8c400715 	stw	r17,28(r17)
    44ec:	8d800815 	stw	r22,32(r17)
    44f0:	8d400915 	stw	r21,36(r17)
    44f4:	8d000a15 	stw	r20,40(r17)
    44f8:	8cc00b15 	stw	r19,44(r17)
    44fc:	8080030d 	sth	r2,12(r16)
    4500:	00800084 	movi	r2,2
    4504:	80000015 	stw	zero,0(r16)
    4508:	80000115 	stw	zero,4(r16)
    450c:	80000215 	stw	zero,8(r16)
    4510:	80001915 	stw	zero,100(r16)
    4514:	8080038d 	sth	r2,14(r16)
    4518:	80000415 	stw	zero,16(r16)
    451c:	80000515 	stw	zero,20(r16)
    4520:	80000615 	stw	zero,24(r16)
    4524:	b80d883a 	mov	r6,r23
    4528:	000b883a 	mov	r5,zero
    452c:	81001704 	addi	r4,r16,92
    4530:	0004ee40 	call	4ee4 <memset>
    4534:	00800044 	movi	r2,1
    4538:	84000715 	stw	r16,28(r16)
    453c:	85800815 	stw	r22,32(r16)
    4540:	85400915 	stw	r21,36(r16)
    4544:	85000a15 	stw	r20,40(r16)
    4548:	84c00b15 	stw	r19,44(r16)
    454c:	90800e15 	stw	r2,56(r18)
    4550:	dfc00817 	ldw	ra,32(sp)
    4554:	ddc00717 	ldw	r23,28(sp)
    4558:	dd800617 	ldw	r22,24(sp)
    455c:	dd400517 	ldw	r21,20(sp)
    4560:	dd000417 	ldw	r20,16(sp)
    4564:	dcc00317 	ldw	r19,12(sp)
    4568:	dc800217 	ldw	r18,8(sp)
    456c:	dc400117 	ldw	r17,4(sp)
    4570:	dc000017 	ldw	r16,0(sp)
    4574:	dec00904 	addi	sp,sp,36
    4578:	f800283a 	ret

0000457c <__fp_lock>:
    457c:	0005883a 	mov	r2,zero
    4580:	f800283a 	ret

00004584 <__sfmoreglue>:
    4584:	defffc04 	addi	sp,sp,-16
    4588:	dc400115 	stw	r17,4(sp)
    458c:	2c7fffc4 	addi	r17,r5,-1
    4590:	8c401a24 	muli	r17,r17,104
    4594:	dc800215 	stw	r18,8(sp)
    4598:	2825883a 	mov	r18,r5
    459c:	89401d04 	addi	r5,r17,116
    45a0:	dc000015 	stw	r16,0(sp)
    45a4:	dfc00315 	stw	ra,12(sp)
    45a8:	0002bf00 	call	2bf0 <_malloc_r>
    45ac:	1021883a 	mov	r16,r2
    45b0:	10000726 	beq	r2,zero,45d0 <__sfmoreglue+0x4c>
    45b4:	11000304 	addi	r4,r2,12
    45b8:	10000015 	stw	zero,0(r2)
    45bc:	14800115 	stw	r18,4(r2)
    45c0:	11000215 	stw	r4,8(r2)
    45c4:	89801a04 	addi	r6,r17,104
    45c8:	000b883a 	mov	r5,zero
    45cc:	0004ee40 	call	4ee4 <memset>
    45d0:	8005883a 	mov	r2,r16
    45d4:	dfc00317 	ldw	ra,12(sp)
    45d8:	dc800217 	ldw	r18,8(sp)
    45dc:	dc400117 	ldw	r17,4(sp)
    45e0:	dc000017 	ldw	r16,0(sp)
    45e4:	dec00404 	addi	sp,sp,16
    45e8:	f800283a 	ret

000045ec <__sfp>:
    45ec:	defffb04 	addi	sp,sp,-20
    45f0:	dc000015 	stw	r16,0(sp)
    45f4:	04000034 	movhi	r16,0
    45f8:	841e0b04 	addi	r16,r16,30764
    45fc:	dcc00315 	stw	r19,12(sp)
    4600:	2027883a 	mov	r19,r4
    4604:	81000017 	ldw	r4,0(r16)
    4608:	dfc00415 	stw	ra,16(sp)
    460c:	dc800215 	stw	r18,8(sp)
    4610:	20800e17 	ldw	r2,56(r4)
    4614:	dc400115 	stw	r17,4(sp)
    4618:	1000021e 	bne	r2,zero,4624 <__sfp+0x38>
    461c:	00043e00 	call	43e0 <__sinit.part.1>
    4620:	81000017 	ldw	r4,0(r16)
    4624:	2480b804 	addi	r18,r4,736
    4628:	047fffc4 	movi	r17,-1
    462c:	91000117 	ldw	r4,4(r18)
    4630:	94000217 	ldw	r16,8(r18)
    4634:	213fffc4 	addi	r4,r4,-1
    4638:	20000a16 	blt	r4,zero,4664 <__sfp+0x78>
    463c:	8080030f 	ldh	r2,12(r16)
    4640:	10000c26 	beq	r2,zero,4674 <__sfp+0x88>
    4644:	80c01d04 	addi	r3,r16,116
    4648:	00000206 	br	4654 <__sfp+0x68>
    464c:	18bfe60f 	ldh	r2,-104(r3)
    4650:	10000826 	beq	r2,zero,4674 <__sfp+0x88>
    4654:	213fffc4 	addi	r4,r4,-1
    4658:	1c3ffd04 	addi	r16,r3,-12
    465c:	18c01a04 	addi	r3,r3,104
    4660:	247ffa1e 	bne	r4,r17,464c <__alt_mem_onchip_memory2_0+0xf7c0064c>
    4664:	90800017 	ldw	r2,0(r18)
    4668:	10001d26 	beq	r2,zero,46e0 <__sfp+0xf4>
    466c:	1025883a 	mov	r18,r2
    4670:	003fee06 	br	462c <__alt_mem_onchip_memory2_0+0xf7c0062c>
    4674:	00bfffc4 	movi	r2,-1
    4678:	8080038d 	sth	r2,14(r16)
    467c:	00800044 	movi	r2,1
    4680:	8080030d 	sth	r2,12(r16)
    4684:	80001915 	stw	zero,100(r16)
    4688:	80000015 	stw	zero,0(r16)
    468c:	80000215 	stw	zero,8(r16)
    4690:	80000115 	stw	zero,4(r16)
    4694:	80000415 	stw	zero,16(r16)
    4698:	80000515 	stw	zero,20(r16)
    469c:	80000615 	stw	zero,24(r16)
    46a0:	01800204 	movi	r6,8
    46a4:	000b883a 	mov	r5,zero
    46a8:	81001704 	addi	r4,r16,92
    46ac:	0004ee40 	call	4ee4 <memset>
    46b0:	8005883a 	mov	r2,r16
    46b4:	80000c15 	stw	zero,48(r16)
    46b8:	80000d15 	stw	zero,52(r16)
    46bc:	80001115 	stw	zero,68(r16)
    46c0:	80001215 	stw	zero,72(r16)
    46c4:	dfc00417 	ldw	ra,16(sp)
    46c8:	dcc00317 	ldw	r19,12(sp)
    46cc:	dc800217 	ldw	r18,8(sp)
    46d0:	dc400117 	ldw	r17,4(sp)
    46d4:	dc000017 	ldw	r16,0(sp)
    46d8:	dec00504 	addi	sp,sp,20
    46dc:	f800283a 	ret
    46e0:	01400104 	movi	r5,4
    46e4:	9809883a 	mov	r4,r19
    46e8:	00045840 	call	4584 <__sfmoreglue>
    46ec:	90800015 	stw	r2,0(r18)
    46f0:	103fde1e 	bne	r2,zero,466c <__alt_mem_onchip_memory2_0+0xf7c0066c>
    46f4:	00800304 	movi	r2,12
    46f8:	98800015 	stw	r2,0(r19)
    46fc:	0005883a 	mov	r2,zero
    4700:	003ff006 	br	46c4 <__alt_mem_onchip_memory2_0+0xf7c006c4>

00004704 <_cleanup>:
    4704:	00800034 	movhi	r2,0
    4708:	109e0b04 	addi	r2,r2,30764
    470c:	11000017 	ldw	r4,0(r2)
    4710:	01400034 	movhi	r5,0
    4714:	29547f04 	addi	r5,r5,20988
    4718:	0004c641 	jmpi	4c64 <_fwalk_reent>

0000471c <__sinit>:
    471c:	20800e17 	ldw	r2,56(r4)
    4720:	10000126 	beq	r2,zero,4728 <__sinit+0xc>
    4724:	f800283a 	ret
    4728:	00043e01 	jmpi	43e0 <__sinit.part.1>

0000472c <__sfp_lock_acquire>:
    472c:	f800283a 	ret

00004730 <__sfp_lock_release>:
    4730:	f800283a 	ret

00004734 <__sinit_lock_acquire>:
    4734:	f800283a 	ret

00004738 <__sinit_lock_release>:
    4738:	f800283a 	ret

0000473c <__fp_lock_all>:
    473c:	00800034 	movhi	r2,0
    4740:	109e0c04 	addi	r2,r2,30768
    4744:	11000017 	ldw	r4,0(r2)
    4748:	01400034 	movhi	r5,0
    474c:	29515f04 	addi	r5,r5,17788
    4750:	0004ba01 	jmpi	4ba0 <_fwalk>

00004754 <__fp_unlock_all>:
    4754:	00800034 	movhi	r2,0
    4758:	109e0c04 	addi	r2,r2,30768
    475c:	11000017 	ldw	r4,0(r2)
    4760:	01400034 	movhi	r5,0
    4764:	2950f304 	addi	r5,r5,17356
    4768:	0004ba01 	jmpi	4ba0 <_fwalk>

0000476c <_malloc_trim_r>:
    476c:	defffb04 	addi	sp,sp,-20
    4770:	dcc00315 	stw	r19,12(sp)
    4774:	04c00034 	movhi	r19,0
    4778:	dc800215 	stw	r18,8(sp)
    477c:	dc400115 	stw	r17,4(sp)
    4780:	dc000015 	stw	r16,0(sp)
    4784:	dfc00415 	stw	ra,16(sp)
    4788:	2821883a 	mov	r16,r5
    478c:	9cdd0004 	addi	r19,r19,29696
    4790:	2025883a 	mov	r18,r4
    4794:	00059340 	call	5934 <__malloc_lock>
    4798:	98800217 	ldw	r2,8(r19)
    479c:	14400117 	ldw	r17,4(r2)
    47a0:	00bfff04 	movi	r2,-4
    47a4:	88a2703a 	and	r17,r17,r2
    47a8:	8c21c83a 	sub	r16,r17,r16
    47ac:	8403fbc4 	addi	r16,r16,4079
    47b0:	8020d33a 	srli	r16,r16,12
    47b4:	0083ffc4 	movi	r2,4095
    47b8:	843fffc4 	addi	r16,r16,-1
    47bc:	8020933a 	slli	r16,r16,12
    47c0:	1400060e 	bge	r2,r16,47dc <_malloc_trim_r+0x70>
    47c4:	000b883a 	mov	r5,zero
    47c8:	9009883a 	mov	r4,r18
    47cc:	0003d640 	call	3d64 <_sbrk_r>
    47d0:	98c00217 	ldw	r3,8(r19)
    47d4:	1c47883a 	add	r3,r3,r17
    47d8:	10c00a26 	beq	r2,r3,4804 <_malloc_trim_r+0x98>
    47dc:	9009883a 	mov	r4,r18
    47e0:	00059580 	call	5958 <__malloc_unlock>
    47e4:	0005883a 	mov	r2,zero
    47e8:	dfc00417 	ldw	ra,16(sp)
    47ec:	dcc00317 	ldw	r19,12(sp)
    47f0:	dc800217 	ldw	r18,8(sp)
    47f4:	dc400117 	ldw	r17,4(sp)
    47f8:	dc000017 	ldw	r16,0(sp)
    47fc:	dec00504 	addi	sp,sp,20
    4800:	f800283a 	ret
    4804:	040bc83a 	sub	r5,zero,r16
    4808:	9009883a 	mov	r4,r18
    480c:	0003d640 	call	3d64 <_sbrk_r>
    4810:	00ffffc4 	movi	r3,-1
    4814:	10c00d26 	beq	r2,r3,484c <_malloc_trim_r+0xe0>
    4818:	00c00074 	movhi	r3,1
    481c:	18e4dc04 	addi	r3,r3,-27792
    4820:	18800017 	ldw	r2,0(r3)
    4824:	99000217 	ldw	r4,8(r19)
    4828:	8c23c83a 	sub	r17,r17,r16
    482c:	8c400054 	ori	r17,r17,1
    4830:	1421c83a 	sub	r16,r2,r16
    4834:	24400115 	stw	r17,4(r4)
    4838:	9009883a 	mov	r4,r18
    483c:	1c000015 	stw	r16,0(r3)
    4840:	00059580 	call	5958 <__malloc_unlock>
    4844:	00800044 	movi	r2,1
    4848:	003fe706 	br	47e8 <__alt_mem_onchip_memory2_0+0xf7c007e8>
    484c:	000b883a 	mov	r5,zero
    4850:	9009883a 	mov	r4,r18
    4854:	0003d640 	call	3d64 <_sbrk_r>
    4858:	99000217 	ldw	r4,8(r19)
    485c:	014003c4 	movi	r5,15
    4860:	1107c83a 	sub	r3,r2,r4
    4864:	28ffdd0e 	bge	r5,r3,47dc <__alt_mem_onchip_memory2_0+0xf7c007dc>
    4868:	01400034 	movhi	r5,0
    486c:	295e0d04 	addi	r5,r5,30772
    4870:	29400017 	ldw	r5,0(r5)
    4874:	18c00054 	ori	r3,r3,1
    4878:	20c00115 	stw	r3,4(r4)
    487c:	00c00074 	movhi	r3,1
    4880:	1145c83a 	sub	r2,r2,r5
    4884:	18e4dc04 	addi	r3,r3,-27792
    4888:	18800015 	stw	r2,0(r3)
    488c:	003fd306 	br	47dc <__alt_mem_onchip_memory2_0+0xf7c007dc>

00004890 <_free_r>:
    4890:	28004126 	beq	r5,zero,4998 <_free_r+0x108>
    4894:	defffd04 	addi	sp,sp,-12
    4898:	dc400115 	stw	r17,4(sp)
    489c:	dc000015 	stw	r16,0(sp)
    48a0:	2023883a 	mov	r17,r4
    48a4:	2821883a 	mov	r16,r5
    48a8:	dfc00215 	stw	ra,8(sp)
    48ac:	00059340 	call	5934 <__malloc_lock>
    48b0:	81ffff17 	ldw	r7,-4(r16)
    48b4:	00bfff84 	movi	r2,-2
    48b8:	01000034 	movhi	r4,0
    48bc:	81bffe04 	addi	r6,r16,-8
    48c0:	3884703a 	and	r2,r7,r2
    48c4:	211d0004 	addi	r4,r4,29696
    48c8:	308b883a 	add	r5,r6,r2
    48cc:	2a400117 	ldw	r9,4(r5)
    48d0:	22000217 	ldw	r8,8(r4)
    48d4:	00ffff04 	movi	r3,-4
    48d8:	48c6703a 	and	r3,r9,r3
    48dc:	2a005726 	beq	r5,r8,4a3c <_free_r+0x1ac>
    48e0:	28c00115 	stw	r3,4(r5)
    48e4:	39c0004c 	andi	r7,r7,1
    48e8:	3800091e 	bne	r7,zero,4910 <_free_r+0x80>
    48ec:	823ffe17 	ldw	r8,-8(r16)
    48f0:	22400204 	addi	r9,r4,8
    48f4:	320dc83a 	sub	r6,r6,r8
    48f8:	31c00217 	ldw	r7,8(r6)
    48fc:	1205883a 	add	r2,r2,r8
    4900:	3a406526 	beq	r7,r9,4a98 <_free_r+0x208>
    4904:	32000317 	ldw	r8,12(r6)
    4908:	3a000315 	stw	r8,12(r7)
    490c:	41c00215 	stw	r7,8(r8)
    4910:	28cf883a 	add	r7,r5,r3
    4914:	39c00117 	ldw	r7,4(r7)
    4918:	39c0004c 	andi	r7,r7,1
    491c:	38003a26 	beq	r7,zero,4a08 <_free_r+0x178>
    4920:	10c00054 	ori	r3,r2,1
    4924:	30c00115 	stw	r3,4(r6)
    4928:	3087883a 	add	r3,r6,r2
    492c:	18800015 	stw	r2,0(r3)
    4930:	00c07fc4 	movi	r3,511
    4934:	18801936 	bltu	r3,r2,499c <_free_r+0x10c>
    4938:	1004d0fa 	srli	r2,r2,3
    493c:	01c00044 	movi	r7,1
    4940:	21400117 	ldw	r5,4(r4)
    4944:	10c00044 	addi	r3,r2,1
    4948:	18c7883a 	add	r3,r3,r3
    494c:	1005d0ba 	srai	r2,r2,2
    4950:	18c7883a 	add	r3,r3,r3
    4954:	18c7883a 	add	r3,r3,r3
    4958:	1907883a 	add	r3,r3,r4
    495c:	3884983a 	sll	r2,r7,r2
    4960:	19c00017 	ldw	r7,0(r3)
    4964:	1a3ffe04 	addi	r8,r3,-8
    4968:	1144b03a 	or	r2,r2,r5
    496c:	32000315 	stw	r8,12(r6)
    4970:	31c00215 	stw	r7,8(r6)
    4974:	20800115 	stw	r2,4(r4)
    4978:	19800015 	stw	r6,0(r3)
    497c:	39800315 	stw	r6,12(r7)
    4980:	8809883a 	mov	r4,r17
    4984:	dfc00217 	ldw	ra,8(sp)
    4988:	dc400117 	ldw	r17,4(sp)
    498c:	dc000017 	ldw	r16,0(sp)
    4990:	dec00304 	addi	sp,sp,12
    4994:	00059581 	jmpi	5958 <__malloc_unlock>
    4998:	f800283a 	ret
    499c:	100ad27a 	srli	r5,r2,9
    49a0:	00c00104 	movi	r3,4
    49a4:	19404a36 	bltu	r3,r5,4ad0 <_free_r+0x240>
    49a8:	100ad1ba 	srli	r5,r2,6
    49ac:	28c00e44 	addi	r3,r5,57
    49b0:	18c7883a 	add	r3,r3,r3
    49b4:	29400e04 	addi	r5,r5,56
    49b8:	18c7883a 	add	r3,r3,r3
    49bc:	18c7883a 	add	r3,r3,r3
    49c0:	1909883a 	add	r4,r3,r4
    49c4:	20c00017 	ldw	r3,0(r4)
    49c8:	01c00034 	movhi	r7,0
    49cc:	213ffe04 	addi	r4,r4,-8
    49d0:	39dd0004 	addi	r7,r7,29696
    49d4:	20c04426 	beq	r4,r3,4ae8 <_free_r+0x258>
    49d8:	01ffff04 	movi	r7,-4
    49dc:	19400117 	ldw	r5,4(r3)
    49e0:	29ca703a 	and	r5,r5,r7
    49e4:	1140022e 	bgeu	r2,r5,49f0 <_free_r+0x160>
    49e8:	18c00217 	ldw	r3,8(r3)
    49ec:	20fffb1e 	bne	r4,r3,49dc <__alt_mem_onchip_memory2_0+0xf7c009dc>
    49f0:	19000317 	ldw	r4,12(r3)
    49f4:	31000315 	stw	r4,12(r6)
    49f8:	30c00215 	stw	r3,8(r6)
    49fc:	21800215 	stw	r6,8(r4)
    4a00:	19800315 	stw	r6,12(r3)
    4a04:	003fde06 	br	4980 <__alt_mem_onchip_memory2_0+0xf7c00980>
    4a08:	29c00217 	ldw	r7,8(r5)
    4a0c:	10c5883a 	add	r2,r2,r3
    4a10:	00c00034 	movhi	r3,0
    4a14:	18dd0204 	addi	r3,r3,29704
    4a18:	38c03b26 	beq	r7,r3,4b08 <_free_r+0x278>
    4a1c:	2a000317 	ldw	r8,12(r5)
    4a20:	11400054 	ori	r5,r2,1
    4a24:	3087883a 	add	r3,r6,r2
    4a28:	3a000315 	stw	r8,12(r7)
    4a2c:	41c00215 	stw	r7,8(r8)
    4a30:	31400115 	stw	r5,4(r6)
    4a34:	18800015 	stw	r2,0(r3)
    4a38:	003fbd06 	br	4930 <__alt_mem_onchip_memory2_0+0xf7c00930>
    4a3c:	39c0004c 	andi	r7,r7,1
    4a40:	10c5883a 	add	r2,r2,r3
    4a44:	3800071e 	bne	r7,zero,4a64 <_free_r+0x1d4>
    4a48:	81fffe17 	ldw	r7,-8(r16)
    4a4c:	31cdc83a 	sub	r6,r6,r7
    4a50:	30c00317 	ldw	r3,12(r6)
    4a54:	31400217 	ldw	r5,8(r6)
    4a58:	11c5883a 	add	r2,r2,r7
    4a5c:	28c00315 	stw	r3,12(r5)
    4a60:	19400215 	stw	r5,8(r3)
    4a64:	10c00054 	ori	r3,r2,1
    4a68:	30c00115 	stw	r3,4(r6)
    4a6c:	00c00034 	movhi	r3,0
    4a70:	18de0e04 	addi	r3,r3,30776
    4a74:	18c00017 	ldw	r3,0(r3)
    4a78:	21800215 	stw	r6,8(r4)
    4a7c:	10ffc036 	bltu	r2,r3,4980 <__alt_mem_onchip_memory2_0+0xf7c00980>
    4a80:	00800074 	movhi	r2,1
    4a84:	10a4db04 	addi	r2,r2,-27796
    4a88:	11400017 	ldw	r5,0(r2)
    4a8c:	8809883a 	mov	r4,r17
    4a90:	000476c0 	call	476c <_malloc_trim_r>
    4a94:	003fba06 	br	4980 <__alt_mem_onchip_memory2_0+0xf7c00980>
    4a98:	28c9883a 	add	r4,r5,r3
    4a9c:	21000117 	ldw	r4,4(r4)
    4aa0:	2100004c 	andi	r4,r4,1
    4aa4:	2000391e 	bne	r4,zero,4b8c <_free_r+0x2fc>
    4aa8:	29c00217 	ldw	r7,8(r5)
    4aac:	29000317 	ldw	r4,12(r5)
    4ab0:	1885883a 	add	r2,r3,r2
    4ab4:	10c00054 	ori	r3,r2,1
    4ab8:	39000315 	stw	r4,12(r7)
    4abc:	21c00215 	stw	r7,8(r4)
    4ac0:	30c00115 	stw	r3,4(r6)
    4ac4:	308d883a 	add	r6,r6,r2
    4ac8:	30800015 	stw	r2,0(r6)
    4acc:	003fac06 	br	4980 <__alt_mem_onchip_memory2_0+0xf7c00980>
    4ad0:	00c00504 	movi	r3,20
    4ad4:	19401536 	bltu	r3,r5,4b2c <_free_r+0x29c>
    4ad8:	28c01704 	addi	r3,r5,92
    4adc:	18c7883a 	add	r3,r3,r3
    4ae0:	294016c4 	addi	r5,r5,91
    4ae4:	003fb406 	br	49b8 <__alt_mem_onchip_memory2_0+0xf7c009b8>
    4ae8:	280bd0ba 	srai	r5,r5,2
    4aec:	00c00044 	movi	r3,1
    4af0:	38800117 	ldw	r2,4(r7)
    4af4:	194a983a 	sll	r5,r3,r5
    4af8:	2007883a 	mov	r3,r4
    4afc:	2884b03a 	or	r2,r5,r2
    4b00:	38800115 	stw	r2,4(r7)
    4b04:	003fbb06 	br	49f4 <__alt_mem_onchip_memory2_0+0xf7c009f4>
    4b08:	21800515 	stw	r6,20(r4)
    4b0c:	21800415 	stw	r6,16(r4)
    4b10:	10c00054 	ori	r3,r2,1
    4b14:	31c00315 	stw	r7,12(r6)
    4b18:	31c00215 	stw	r7,8(r6)
    4b1c:	30c00115 	stw	r3,4(r6)
    4b20:	308d883a 	add	r6,r6,r2
    4b24:	30800015 	stw	r2,0(r6)
    4b28:	003f9506 	br	4980 <__alt_mem_onchip_memory2_0+0xf7c00980>
    4b2c:	00c01504 	movi	r3,84
    4b30:	19400536 	bltu	r3,r5,4b48 <_free_r+0x2b8>
    4b34:	100ad33a 	srli	r5,r2,12
    4b38:	28c01bc4 	addi	r3,r5,111
    4b3c:	18c7883a 	add	r3,r3,r3
    4b40:	29401b84 	addi	r5,r5,110
    4b44:	003f9c06 	br	49b8 <__alt_mem_onchip_memory2_0+0xf7c009b8>
    4b48:	00c05504 	movi	r3,340
    4b4c:	19400536 	bltu	r3,r5,4b64 <_free_r+0x2d4>
    4b50:	100ad3fa 	srli	r5,r2,15
    4b54:	28c01e04 	addi	r3,r5,120
    4b58:	18c7883a 	add	r3,r3,r3
    4b5c:	29401dc4 	addi	r5,r5,119
    4b60:	003f9506 	br	49b8 <__alt_mem_onchip_memory2_0+0xf7c009b8>
    4b64:	00c15504 	movi	r3,1364
    4b68:	19400536 	bltu	r3,r5,4b80 <_free_r+0x2f0>
    4b6c:	100ad4ba 	srli	r5,r2,18
    4b70:	28c01f44 	addi	r3,r5,125
    4b74:	18c7883a 	add	r3,r3,r3
    4b78:	29401f04 	addi	r5,r5,124
    4b7c:	003f8e06 	br	49b8 <__alt_mem_onchip_memory2_0+0xf7c009b8>
    4b80:	00c03f84 	movi	r3,254
    4b84:	01401f84 	movi	r5,126
    4b88:	003f8b06 	br	49b8 <__alt_mem_onchip_memory2_0+0xf7c009b8>
    4b8c:	10c00054 	ori	r3,r2,1
    4b90:	30c00115 	stw	r3,4(r6)
    4b94:	308d883a 	add	r6,r6,r2
    4b98:	30800015 	stw	r2,0(r6)
    4b9c:	003f7806 	br	4980 <__alt_mem_onchip_memory2_0+0xf7c00980>

00004ba0 <_fwalk>:
    4ba0:	defff704 	addi	sp,sp,-36
    4ba4:	dd000415 	stw	r20,16(sp)
    4ba8:	dfc00815 	stw	ra,32(sp)
    4bac:	ddc00715 	stw	r23,28(sp)
    4bb0:	dd800615 	stw	r22,24(sp)
    4bb4:	dd400515 	stw	r21,20(sp)
    4bb8:	dcc00315 	stw	r19,12(sp)
    4bbc:	dc800215 	stw	r18,8(sp)
    4bc0:	dc400115 	stw	r17,4(sp)
    4bc4:	dc000015 	stw	r16,0(sp)
    4bc8:	2500b804 	addi	r20,r4,736
    4bcc:	a0002326 	beq	r20,zero,4c5c <_fwalk+0xbc>
    4bd0:	282b883a 	mov	r21,r5
    4bd4:	002f883a 	mov	r23,zero
    4bd8:	05800044 	movi	r22,1
    4bdc:	04ffffc4 	movi	r19,-1
    4be0:	a4400117 	ldw	r17,4(r20)
    4be4:	a4800217 	ldw	r18,8(r20)
    4be8:	8c7fffc4 	addi	r17,r17,-1
    4bec:	88000d16 	blt	r17,zero,4c24 <_fwalk+0x84>
    4bf0:	94000304 	addi	r16,r18,12
    4bf4:	94800384 	addi	r18,r18,14
    4bf8:	8080000b 	ldhu	r2,0(r16)
    4bfc:	8c7fffc4 	addi	r17,r17,-1
    4c00:	813ffd04 	addi	r4,r16,-12
    4c04:	b080042e 	bgeu	r22,r2,4c18 <_fwalk+0x78>
    4c08:	9080000f 	ldh	r2,0(r18)
    4c0c:	14c00226 	beq	r2,r19,4c18 <_fwalk+0x78>
    4c10:	a83ee83a 	callr	r21
    4c14:	b8aeb03a 	or	r23,r23,r2
    4c18:	84001a04 	addi	r16,r16,104
    4c1c:	94801a04 	addi	r18,r18,104
    4c20:	8cfff51e 	bne	r17,r19,4bf8 <__alt_mem_onchip_memory2_0+0xf7c00bf8>
    4c24:	a5000017 	ldw	r20,0(r20)
    4c28:	a03fed1e 	bne	r20,zero,4be0 <__alt_mem_onchip_memory2_0+0xf7c00be0>
    4c2c:	b805883a 	mov	r2,r23
    4c30:	dfc00817 	ldw	ra,32(sp)
    4c34:	ddc00717 	ldw	r23,28(sp)
    4c38:	dd800617 	ldw	r22,24(sp)
    4c3c:	dd400517 	ldw	r21,20(sp)
    4c40:	dd000417 	ldw	r20,16(sp)
    4c44:	dcc00317 	ldw	r19,12(sp)
    4c48:	dc800217 	ldw	r18,8(sp)
    4c4c:	dc400117 	ldw	r17,4(sp)
    4c50:	dc000017 	ldw	r16,0(sp)
    4c54:	dec00904 	addi	sp,sp,36
    4c58:	f800283a 	ret
    4c5c:	002f883a 	mov	r23,zero
    4c60:	003ff206 	br	4c2c <__alt_mem_onchip_memory2_0+0xf7c00c2c>

00004c64 <_fwalk_reent>:
    4c64:	defff704 	addi	sp,sp,-36
    4c68:	dd000415 	stw	r20,16(sp)
    4c6c:	dfc00815 	stw	ra,32(sp)
    4c70:	ddc00715 	stw	r23,28(sp)
    4c74:	dd800615 	stw	r22,24(sp)
    4c78:	dd400515 	stw	r21,20(sp)
    4c7c:	dcc00315 	stw	r19,12(sp)
    4c80:	dc800215 	stw	r18,8(sp)
    4c84:	dc400115 	stw	r17,4(sp)
    4c88:	dc000015 	stw	r16,0(sp)
    4c8c:	2500b804 	addi	r20,r4,736
    4c90:	a0002326 	beq	r20,zero,4d20 <_fwalk_reent+0xbc>
    4c94:	282b883a 	mov	r21,r5
    4c98:	2027883a 	mov	r19,r4
    4c9c:	002f883a 	mov	r23,zero
    4ca0:	05800044 	movi	r22,1
    4ca4:	04bfffc4 	movi	r18,-1
    4ca8:	a4400117 	ldw	r17,4(r20)
    4cac:	a4000217 	ldw	r16,8(r20)
    4cb0:	8c7fffc4 	addi	r17,r17,-1
    4cb4:	88000c16 	blt	r17,zero,4ce8 <_fwalk_reent+0x84>
    4cb8:	84000304 	addi	r16,r16,12
    4cbc:	8080000b 	ldhu	r2,0(r16)
    4cc0:	8c7fffc4 	addi	r17,r17,-1
    4cc4:	817ffd04 	addi	r5,r16,-12
    4cc8:	b080052e 	bgeu	r22,r2,4ce0 <_fwalk_reent+0x7c>
    4ccc:	8080008f 	ldh	r2,2(r16)
    4cd0:	9809883a 	mov	r4,r19
    4cd4:	14800226 	beq	r2,r18,4ce0 <_fwalk_reent+0x7c>
    4cd8:	a83ee83a 	callr	r21
    4cdc:	b8aeb03a 	or	r23,r23,r2
    4ce0:	84001a04 	addi	r16,r16,104
    4ce4:	8cbff51e 	bne	r17,r18,4cbc <__alt_mem_onchip_memory2_0+0xf7c00cbc>
    4ce8:	a5000017 	ldw	r20,0(r20)
    4cec:	a03fee1e 	bne	r20,zero,4ca8 <__alt_mem_onchip_memory2_0+0xf7c00ca8>
    4cf0:	b805883a 	mov	r2,r23
    4cf4:	dfc00817 	ldw	ra,32(sp)
    4cf8:	ddc00717 	ldw	r23,28(sp)
    4cfc:	dd800617 	ldw	r22,24(sp)
    4d00:	dd400517 	ldw	r21,20(sp)
    4d04:	dd000417 	ldw	r20,16(sp)
    4d08:	dcc00317 	ldw	r19,12(sp)
    4d0c:	dc800217 	ldw	r18,8(sp)
    4d10:	dc400117 	ldw	r17,4(sp)
    4d14:	dc000017 	ldw	r16,0(sp)
    4d18:	dec00904 	addi	sp,sp,36
    4d1c:	f800283a 	ret
    4d20:	002f883a 	mov	r23,zero
    4d24:	003ff206 	br	4cf0 <__alt_mem_onchip_memory2_0+0xf7c00cf0>

00004d28 <__smakebuf_r>:
    4d28:	2880030b 	ldhu	r2,12(r5)
    4d2c:	10c0008c 	andi	r3,r2,2
    4d30:	1800411e 	bne	r3,zero,4e38 <__smakebuf_r+0x110>
    4d34:	deffec04 	addi	sp,sp,-80
    4d38:	dc000f15 	stw	r16,60(sp)
    4d3c:	2821883a 	mov	r16,r5
    4d40:	2940038f 	ldh	r5,14(r5)
    4d44:	dc401015 	stw	r17,64(sp)
    4d48:	dfc01315 	stw	ra,76(sp)
    4d4c:	dcc01215 	stw	r19,72(sp)
    4d50:	dc801115 	stw	r18,68(sp)
    4d54:	2023883a 	mov	r17,r4
    4d58:	28001c16 	blt	r5,zero,4dcc <__smakebuf_r+0xa4>
    4d5c:	d80d883a 	mov	r6,sp
    4d60:	00053000 	call	5300 <_fstat_r>
    4d64:	10001816 	blt	r2,zero,4dc8 <__smakebuf_r+0xa0>
    4d68:	d8800117 	ldw	r2,4(sp)
    4d6c:	00e00014 	movui	r3,32768
    4d70:	10bc000c 	andi	r2,r2,61440
    4d74:	14c80020 	cmpeqi	r19,r2,8192
    4d78:	10c03726 	beq	r2,r3,4e58 <__smakebuf_r+0x130>
    4d7c:	80c0030b 	ldhu	r3,12(r16)
    4d80:	18c20014 	ori	r3,r3,2048
    4d84:	80c0030d 	sth	r3,12(r16)
    4d88:	00c80004 	movi	r3,8192
    4d8c:	10c0521e 	bne	r2,r3,4ed8 <__smakebuf_r+0x1b0>
    4d90:	8140038f 	ldh	r5,14(r16)
    4d94:	8809883a 	mov	r4,r17
    4d98:	000535c0 	call	535c <_isatty_r>
    4d9c:	10004c26 	beq	r2,zero,4ed0 <__smakebuf_r+0x1a8>
    4da0:	8080030b 	ldhu	r2,12(r16)
    4da4:	80c010c4 	addi	r3,r16,67
    4da8:	80c00015 	stw	r3,0(r16)
    4dac:	10800054 	ori	r2,r2,1
    4db0:	8080030d 	sth	r2,12(r16)
    4db4:	00800044 	movi	r2,1
    4db8:	80c00415 	stw	r3,16(r16)
    4dbc:	80800515 	stw	r2,20(r16)
    4dc0:	04810004 	movi	r18,1024
    4dc4:	00000706 	br	4de4 <__smakebuf_r+0xbc>
    4dc8:	8080030b 	ldhu	r2,12(r16)
    4dcc:	10c0200c 	andi	r3,r2,128
    4dd0:	18001f1e 	bne	r3,zero,4e50 <__smakebuf_r+0x128>
    4dd4:	04810004 	movi	r18,1024
    4dd8:	10820014 	ori	r2,r2,2048
    4ddc:	8080030d 	sth	r2,12(r16)
    4de0:	0027883a 	mov	r19,zero
    4de4:	900b883a 	mov	r5,r18
    4de8:	8809883a 	mov	r4,r17
    4dec:	0002bf00 	call	2bf0 <_malloc_r>
    4df0:	10002c26 	beq	r2,zero,4ea4 <__smakebuf_r+0x17c>
    4df4:	80c0030b 	ldhu	r3,12(r16)
    4df8:	01000034 	movhi	r4,0
    4dfc:	2110f504 	addi	r4,r4,17364
    4e00:	89000f15 	stw	r4,60(r17)
    4e04:	18c02014 	ori	r3,r3,128
    4e08:	80c0030d 	sth	r3,12(r16)
    4e0c:	80800015 	stw	r2,0(r16)
    4e10:	80800415 	stw	r2,16(r16)
    4e14:	84800515 	stw	r18,20(r16)
    4e18:	98001a1e 	bne	r19,zero,4e84 <__smakebuf_r+0x15c>
    4e1c:	dfc01317 	ldw	ra,76(sp)
    4e20:	dcc01217 	ldw	r19,72(sp)
    4e24:	dc801117 	ldw	r18,68(sp)
    4e28:	dc401017 	ldw	r17,64(sp)
    4e2c:	dc000f17 	ldw	r16,60(sp)
    4e30:	dec01404 	addi	sp,sp,80
    4e34:	f800283a 	ret
    4e38:	288010c4 	addi	r2,r5,67
    4e3c:	28800015 	stw	r2,0(r5)
    4e40:	28800415 	stw	r2,16(r5)
    4e44:	00800044 	movi	r2,1
    4e48:	28800515 	stw	r2,20(r5)
    4e4c:	f800283a 	ret
    4e50:	04801004 	movi	r18,64
    4e54:	003fe006 	br	4dd8 <__alt_mem_onchip_memory2_0+0xf7c00dd8>
    4e58:	81000a17 	ldw	r4,40(r16)
    4e5c:	00c00034 	movhi	r3,0
    4e60:	18d43904 	addi	r3,r3,20708
    4e64:	20ffc51e 	bne	r4,r3,4d7c <__alt_mem_onchip_memory2_0+0xf7c00d7c>
    4e68:	8080030b 	ldhu	r2,12(r16)
    4e6c:	04810004 	movi	r18,1024
    4e70:	84801315 	stw	r18,76(r16)
    4e74:	1484b03a 	or	r2,r2,r18
    4e78:	8080030d 	sth	r2,12(r16)
    4e7c:	0027883a 	mov	r19,zero
    4e80:	003fd806 	br	4de4 <__alt_mem_onchip_memory2_0+0xf7c00de4>
    4e84:	8140038f 	ldh	r5,14(r16)
    4e88:	8809883a 	mov	r4,r17
    4e8c:	000535c0 	call	535c <_isatty_r>
    4e90:	103fe226 	beq	r2,zero,4e1c <__alt_mem_onchip_memory2_0+0xf7c00e1c>
    4e94:	8080030b 	ldhu	r2,12(r16)
    4e98:	10800054 	ori	r2,r2,1
    4e9c:	8080030d 	sth	r2,12(r16)
    4ea0:	003fde06 	br	4e1c <__alt_mem_onchip_memory2_0+0xf7c00e1c>
    4ea4:	8080030b 	ldhu	r2,12(r16)
    4ea8:	10c0800c 	andi	r3,r2,512
    4eac:	183fdb1e 	bne	r3,zero,4e1c <__alt_mem_onchip_memory2_0+0xf7c00e1c>
    4eb0:	10800094 	ori	r2,r2,2
    4eb4:	80c010c4 	addi	r3,r16,67
    4eb8:	8080030d 	sth	r2,12(r16)
    4ebc:	00800044 	movi	r2,1
    4ec0:	80c00015 	stw	r3,0(r16)
    4ec4:	80c00415 	stw	r3,16(r16)
    4ec8:	80800515 	stw	r2,20(r16)
    4ecc:	003fd306 	br	4e1c <__alt_mem_onchip_memory2_0+0xf7c00e1c>
    4ed0:	04810004 	movi	r18,1024
    4ed4:	003fc306 	br	4de4 <__alt_mem_onchip_memory2_0+0xf7c00de4>
    4ed8:	0027883a 	mov	r19,zero
    4edc:	04810004 	movi	r18,1024
    4ee0:	003fc006 	br	4de4 <__alt_mem_onchip_memory2_0+0xf7c00de4>

00004ee4 <memset>:
    4ee4:	20c000cc 	andi	r3,r4,3
    4ee8:	2005883a 	mov	r2,r4
    4eec:	18004426 	beq	r3,zero,5000 <memset+0x11c>
    4ef0:	31ffffc4 	addi	r7,r6,-1
    4ef4:	30004026 	beq	r6,zero,4ff8 <memset+0x114>
    4ef8:	2813883a 	mov	r9,r5
    4efc:	200d883a 	mov	r6,r4
    4f00:	2007883a 	mov	r3,r4
    4f04:	00000406 	br	4f18 <memset+0x34>
    4f08:	3a3fffc4 	addi	r8,r7,-1
    4f0c:	31800044 	addi	r6,r6,1
    4f10:	38003926 	beq	r7,zero,4ff8 <memset+0x114>
    4f14:	400f883a 	mov	r7,r8
    4f18:	18c00044 	addi	r3,r3,1
    4f1c:	32400005 	stb	r9,0(r6)
    4f20:	1a0000cc 	andi	r8,r3,3
    4f24:	403ff81e 	bne	r8,zero,4f08 <__alt_mem_onchip_memory2_0+0xf7c00f08>
    4f28:	010000c4 	movi	r4,3
    4f2c:	21c02d2e 	bgeu	r4,r7,4fe4 <memset+0x100>
    4f30:	29003fcc 	andi	r4,r5,255
    4f34:	200c923a 	slli	r6,r4,8
    4f38:	3108b03a 	or	r4,r6,r4
    4f3c:	200c943a 	slli	r6,r4,16
    4f40:	218cb03a 	or	r6,r4,r6
    4f44:	010003c4 	movi	r4,15
    4f48:	21c0182e 	bgeu	r4,r7,4fac <memset+0xc8>
    4f4c:	3b3ffc04 	addi	r12,r7,-16
    4f50:	6018d13a 	srli	r12,r12,4
    4f54:	1a000104 	addi	r8,r3,4
    4f58:	1ac00204 	addi	r11,r3,8
    4f5c:	6008913a 	slli	r4,r12,4
    4f60:	1a800304 	addi	r10,r3,12
    4f64:	1813883a 	mov	r9,r3
    4f68:	21000504 	addi	r4,r4,20
    4f6c:	1909883a 	add	r4,r3,r4
    4f70:	49800015 	stw	r6,0(r9)
    4f74:	41800015 	stw	r6,0(r8)
    4f78:	59800015 	stw	r6,0(r11)
    4f7c:	51800015 	stw	r6,0(r10)
    4f80:	42000404 	addi	r8,r8,16
    4f84:	4a400404 	addi	r9,r9,16
    4f88:	5ac00404 	addi	r11,r11,16
    4f8c:	52800404 	addi	r10,r10,16
    4f90:	413ff71e 	bne	r8,r4,4f70 <__alt_mem_onchip_memory2_0+0xf7c00f70>
    4f94:	63000044 	addi	r12,r12,1
    4f98:	6018913a 	slli	r12,r12,4
    4f9c:	39c003cc 	andi	r7,r7,15
    4fa0:	010000c4 	movi	r4,3
    4fa4:	1b07883a 	add	r3,r3,r12
    4fa8:	21c00e2e 	bgeu	r4,r7,4fe4 <memset+0x100>
    4fac:	1813883a 	mov	r9,r3
    4fb0:	3811883a 	mov	r8,r7
    4fb4:	010000c4 	movi	r4,3
    4fb8:	49800015 	stw	r6,0(r9)
    4fbc:	423fff04 	addi	r8,r8,-4
    4fc0:	4a400104 	addi	r9,r9,4
    4fc4:	223ffc36 	bltu	r4,r8,4fb8 <__alt_mem_onchip_memory2_0+0xf7c00fb8>
    4fc8:	393fff04 	addi	r4,r7,-4
    4fcc:	2008d0ba 	srli	r4,r4,2
    4fd0:	39c000cc 	andi	r7,r7,3
    4fd4:	21000044 	addi	r4,r4,1
    4fd8:	2109883a 	add	r4,r4,r4
    4fdc:	2109883a 	add	r4,r4,r4
    4fe0:	1907883a 	add	r3,r3,r4
    4fe4:	38000526 	beq	r7,zero,4ffc <memset+0x118>
    4fe8:	19cf883a 	add	r7,r3,r7
    4fec:	19400005 	stb	r5,0(r3)
    4ff0:	18c00044 	addi	r3,r3,1
    4ff4:	38fffd1e 	bne	r7,r3,4fec <__alt_mem_onchip_memory2_0+0xf7c00fec>
    4ff8:	f800283a 	ret
    4ffc:	f800283a 	ret
    5000:	2007883a 	mov	r3,r4
    5004:	300f883a 	mov	r7,r6
    5008:	003fc706 	br	4f28 <__alt_mem_onchip_memory2_0+0xf7c00f28>

0000500c <__sread>:
    500c:	defffe04 	addi	sp,sp,-8
    5010:	dc000015 	stw	r16,0(sp)
    5014:	2821883a 	mov	r16,r5
    5018:	2940038f 	ldh	r5,14(r5)
    501c:	dfc00115 	stw	ra,4(sp)
    5020:	00054100 	call	5410 <_read_r>
    5024:	10000716 	blt	r2,zero,5044 <__sread+0x38>
    5028:	80c01417 	ldw	r3,80(r16)
    502c:	1887883a 	add	r3,r3,r2
    5030:	80c01415 	stw	r3,80(r16)
    5034:	dfc00117 	ldw	ra,4(sp)
    5038:	dc000017 	ldw	r16,0(sp)
    503c:	dec00204 	addi	sp,sp,8
    5040:	f800283a 	ret
    5044:	80c0030b 	ldhu	r3,12(r16)
    5048:	18fbffcc 	andi	r3,r3,61439
    504c:	80c0030d 	sth	r3,12(r16)
    5050:	dfc00117 	ldw	ra,4(sp)
    5054:	dc000017 	ldw	r16,0(sp)
    5058:	dec00204 	addi	sp,sp,8
    505c:	f800283a 	ret

00005060 <__seofread>:
    5060:	0005883a 	mov	r2,zero
    5064:	f800283a 	ret

00005068 <__swrite>:
    5068:	2880030b 	ldhu	r2,12(r5)
    506c:	defffb04 	addi	sp,sp,-20
    5070:	dcc00315 	stw	r19,12(sp)
    5074:	dc800215 	stw	r18,8(sp)
    5078:	dc400115 	stw	r17,4(sp)
    507c:	dc000015 	stw	r16,0(sp)
    5080:	dfc00415 	stw	ra,16(sp)
    5084:	10c0400c 	andi	r3,r2,256
    5088:	2821883a 	mov	r16,r5
    508c:	2023883a 	mov	r17,r4
    5090:	3025883a 	mov	r18,r6
    5094:	3827883a 	mov	r19,r7
    5098:	18000526 	beq	r3,zero,50b0 <__swrite+0x48>
    509c:	2940038f 	ldh	r5,14(r5)
    50a0:	01c00084 	movi	r7,2
    50a4:	000d883a 	mov	r6,zero
    50a8:	00053b00 	call	53b0 <_lseek_r>
    50ac:	8080030b 	ldhu	r2,12(r16)
    50b0:	8140038f 	ldh	r5,14(r16)
    50b4:	10bbffcc 	andi	r2,r2,61439
    50b8:	980f883a 	mov	r7,r19
    50bc:	900d883a 	mov	r6,r18
    50c0:	8809883a 	mov	r4,r17
    50c4:	8080030d 	sth	r2,12(r16)
    50c8:	dfc00417 	ldw	ra,16(sp)
    50cc:	dcc00317 	ldw	r19,12(sp)
    50d0:	dc800217 	ldw	r18,8(sp)
    50d4:	dc400117 	ldw	r17,4(sp)
    50d8:	dc000017 	ldw	r16,0(sp)
    50dc:	dec00504 	addi	sp,sp,20
    50e0:	00051481 	jmpi	5148 <_write_r>

000050e4 <__sseek>:
    50e4:	defffe04 	addi	sp,sp,-8
    50e8:	dc000015 	stw	r16,0(sp)
    50ec:	2821883a 	mov	r16,r5
    50f0:	2940038f 	ldh	r5,14(r5)
    50f4:	dfc00115 	stw	ra,4(sp)
    50f8:	00053b00 	call	53b0 <_lseek_r>
    50fc:	00ffffc4 	movi	r3,-1
    5100:	10c00826 	beq	r2,r3,5124 <__sseek+0x40>
    5104:	80c0030b 	ldhu	r3,12(r16)
    5108:	80801415 	stw	r2,80(r16)
    510c:	18c40014 	ori	r3,r3,4096
    5110:	80c0030d 	sth	r3,12(r16)
    5114:	dfc00117 	ldw	ra,4(sp)
    5118:	dc000017 	ldw	r16,0(sp)
    511c:	dec00204 	addi	sp,sp,8
    5120:	f800283a 	ret
    5124:	80c0030b 	ldhu	r3,12(r16)
    5128:	18fbffcc 	andi	r3,r3,61439
    512c:	80c0030d 	sth	r3,12(r16)
    5130:	dfc00117 	ldw	ra,4(sp)
    5134:	dc000017 	ldw	r16,0(sp)
    5138:	dec00204 	addi	sp,sp,8
    513c:	f800283a 	ret

00005140 <__sclose>:
    5140:	2940038f 	ldh	r5,14(r5)
    5144:	00051a81 	jmpi	51a8 <_close_r>

00005148 <_write_r>:
    5148:	defffd04 	addi	sp,sp,-12
    514c:	2805883a 	mov	r2,r5
    5150:	dc000015 	stw	r16,0(sp)
    5154:	04000074 	movhi	r16,1
    5158:	dc400115 	stw	r17,4(sp)
    515c:	300b883a 	mov	r5,r6
    5160:	8424d804 	addi	r16,r16,-27808
    5164:	2023883a 	mov	r17,r4
    5168:	380d883a 	mov	r6,r7
    516c:	1009883a 	mov	r4,r2
    5170:	dfc00215 	stw	ra,8(sp)
    5174:	80000015 	stw	zero,0(r16)
    5178:	0005ba00 	call	5ba0 <write>
    517c:	00ffffc4 	movi	r3,-1
    5180:	10c00526 	beq	r2,r3,5198 <_write_r+0x50>
    5184:	dfc00217 	ldw	ra,8(sp)
    5188:	dc400117 	ldw	r17,4(sp)
    518c:	dc000017 	ldw	r16,0(sp)
    5190:	dec00304 	addi	sp,sp,12
    5194:	f800283a 	ret
    5198:	80c00017 	ldw	r3,0(r16)
    519c:	183ff926 	beq	r3,zero,5184 <__alt_mem_onchip_memory2_0+0xf7c01184>
    51a0:	88c00015 	stw	r3,0(r17)
    51a4:	003ff706 	br	5184 <__alt_mem_onchip_memory2_0+0xf7c01184>

000051a8 <_close_r>:
    51a8:	defffd04 	addi	sp,sp,-12
    51ac:	dc000015 	stw	r16,0(sp)
    51b0:	04000074 	movhi	r16,1
    51b4:	dc400115 	stw	r17,4(sp)
    51b8:	8424d804 	addi	r16,r16,-27808
    51bc:	2023883a 	mov	r17,r4
    51c0:	2809883a 	mov	r4,r5
    51c4:	dfc00215 	stw	ra,8(sp)
    51c8:	80000015 	stw	zero,0(r16)
    51cc:	00019480 	call	1948 <close>
    51d0:	00ffffc4 	movi	r3,-1
    51d4:	10c00526 	beq	r2,r3,51ec <_close_r+0x44>
    51d8:	dfc00217 	ldw	ra,8(sp)
    51dc:	dc400117 	ldw	r17,4(sp)
    51e0:	dc000017 	ldw	r16,0(sp)
    51e4:	dec00304 	addi	sp,sp,12
    51e8:	f800283a 	ret
    51ec:	80c00017 	ldw	r3,0(r16)
    51f0:	183ff926 	beq	r3,zero,51d8 <__alt_mem_onchip_memory2_0+0xf7c011d8>
    51f4:	88c00015 	stw	r3,0(r17)
    51f8:	003ff706 	br	51d8 <__alt_mem_onchip_memory2_0+0xf7c011d8>

000051fc <_fclose_r>:
    51fc:	28003926 	beq	r5,zero,52e4 <_fclose_r+0xe8>
    5200:	defffc04 	addi	sp,sp,-16
    5204:	dc400115 	stw	r17,4(sp)
    5208:	dc000015 	stw	r16,0(sp)
    520c:	dfc00315 	stw	ra,12(sp)
    5210:	dc800215 	stw	r18,8(sp)
    5214:	2023883a 	mov	r17,r4
    5218:	2821883a 	mov	r16,r5
    521c:	20000226 	beq	r4,zero,5228 <_fclose_r+0x2c>
    5220:	20800e17 	ldw	r2,56(r4)
    5224:	10002726 	beq	r2,zero,52c4 <_fclose_r+0xc8>
    5228:	8080030f 	ldh	r2,12(r16)
    522c:	1000071e 	bne	r2,zero,524c <_fclose_r+0x50>
    5230:	0005883a 	mov	r2,zero
    5234:	dfc00317 	ldw	ra,12(sp)
    5238:	dc800217 	ldw	r18,8(sp)
    523c:	dc400117 	ldw	r17,4(sp)
    5240:	dc000017 	ldw	r16,0(sp)
    5244:	dec00404 	addi	sp,sp,16
    5248:	f800283a 	ret
    524c:	800b883a 	mov	r5,r16
    5250:	8809883a 	mov	r4,r17
    5254:	00041240 	call	4124 <__sflush_r>
    5258:	1025883a 	mov	r18,r2
    525c:	80800b17 	ldw	r2,44(r16)
    5260:	10000426 	beq	r2,zero,5274 <_fclose_r+0x78>
    5264:	81400717 	ldw	r5,28(r16)
    5268:	8809883a 	mov	r4,r17
    526c:	103ee83a 	callr	r2
    5270:	10001616 	blt	r2,zero,52cc <_fclose_r+0xd0>
    5274:	8080030b 	ldhu	r2,12(r16)
    5278:	1080200c 	andi	r2,r2,128
    527c:	1000151e 	bne	r2,zero,52d4 <_fclose_r+0xd8>
    5280:	81400c17 	ldw	r5,48(r16)
    5284:	28000526 	beq	r5,zero,529c <_fclose_r+0xa0>
    5288:	80801004 	addi	r2,r16,64
    528c:	28800226 	beq	r5,r2,5298 <_fclose_r+0x9c>
    5290:	8809883a 	mov	r4,r17
    5294:	00048900 	call	4890 <_free_r>
    5298:	80000c15 	stw	zero,48(r16)
    529c:	81401117 	ldw	r5,68(r16)
    52a0:	28000326 	beq	r5,zero,52b0 <_fclose_r+0xb4>
    52a4:	8809883a 	mov	r4,r17
    52a8:	00048900 	call	4890 <_free_r>
    52ac:	80001115 	stw	zero,68(r16)
    52b0:	000472c0 	call	472c <__sfp_lock_acquire>
    52b4:	8000030d 	sth	zero,12(r16)
    52b8:	00047300 	call	4730 <__sfp_lock_release>
    52bc:	9005883a 	mov	r2,r18
    52c0:	003fdc06 	br	5234 <__alt_mem_onchip_memory2_0+0xf7c01234>
    52c4:	000471c0 	call	471c <__sinit>
    52c8:	003fd706 	br	5228 <__alt_mem_onchip_memory2_0+0xf7c01228>
    52cc:	04bfffc4 	movi	r18,-1
    52d0:	003fe806 	br	5274 <__alt_mem_onchip_memory2_0+0xf7c01274>
    52d4:	81400417 	ldw	r5,16(r16)
    52d8:	8809883a 	mov	r4,r17
    52dc:	00048900 	call	4890 <_free_r>
    52e0:	003fe706 	br	5280 <__alt_mem_onchip_memory2_0+0xf7c01280>
    52e4:	0005883a 	mov	r2,zero
    52e8:	f800283a 	ret

000052ec <fclose>:
    52ec:	00800034 	movhi	r2,0
    52f0:	109e0c04 	addi	r2,r2,30768
    52f4:	200b883a 	mov	r5,r4
    52f8:	11000017 	ldw	r4,0(r2)
    52fc:	00051fc1 	jmpi	51fc <_fclose_r>

00005300 <_fstat_r>:
    5300:	defffd04 	addi	sp,sp,-12
    5304:	2805883a 	mov	r2,r5
    5308:	dc000015 	stw	r16,0(sp)
    530c:	04000074 	movhi	r16,1
    5310:	dc400115 	stw	r17,4(sp)
    5314:	8424d804 	addi	r16,r16,-27808
    5318:	2023883a 	mov	r17,r4
    531c:	300b883a 	mov	r5,r6
    5320:	1009883a 	mov	r4,r2
    5324:	dfc00215 	stw	ra,8(sp)
    5328:	80000015 	stw	zero,0(r16)
    532c:	00056940 	call	5694 <fstat>
    5330:	00ffffc4 	movi	r3,-1
    5334:	10c00526 	beq	r2,r3,534c <_fstat_r+0x4c>
    5338:	dfc00217 	ldw	ra,8(sp)
    533c:	dc400117 	ldw	r17,4(sp)
    5340:	dc000017 	ldw	r16,0(sp)
    5344:	dec00304 	addi	sp,sp,12
    5348:	f800283a 	ret
    534c:	80c00017 	ldw	r3,0(r16)
    5350:	183ff926 	beq	r3,zero,5338 <__alt_mem_onchip_memory2_0+0xf7c01338>
    5354:	88c00015 	stw	r3,0(r17)
    5358:	003ff706 	br	5338 <__alt_mem_onchip_memory2_0+0xf7c01338>

0000535c <_isatty_r>:
    535c:	defffd04 	addi	sp,sp,-12
    5360:	dc000015 	stw	r16,0(sp)
    5364:	04000074 	movhi	r16,1
    5368:	dc400115 	stw	r17,4(sp)
    536c:	8424d804 	addi	r16,r16,-27808
    5370:	2023883a 	mov	r17,r4
    5374:	2809883a 	mov	r4,r5
    5378:	dfc00215 	stw	ra,8(sp)
    537c:	80000015 	stw	zero,0(r16)
    5380:	00057800 	call	5780 <isatty>
    5384:	00ffffc4 	movi	r3,-1
    5388:	10c00526 	beq	r2,r3,53a0 <_isatty_r+0x44>
    538c:	dfc00217 	ldw	ra,8(sp)
    5390:	dc400117 	ldw	r17,4(sp)
    5394:	dc000017 	ldw	r16,0(sp)
    5398:	dec00304 	addi	sp,sp,12
    539c:	f800283a 	ret
    53a0:	80c00017 	ldw	r3,0(r16)
    53a4:	183ff926 	beq	r3,zero,538c <__alt_mem_onchip_memory2_0+0xf7c0138c>
    53a8:	88c00015 	stw	r3,0(r17)
    53ac:	003ff706 	br	538c <__alt_mem_onchip_memory2_0+0xf7c0138c>

000053b0 <_lseek_r>:
    53b0:	defffd04 	addi	sp,sp,-12
    53b4:	2805883a 	mov	r2,r5
    53b8:	dc000015 	stw	r16,0(sp)
    53bc:	04000074 	movhi	r16,1
    53c0:	dc400115 	stw	r17,4(sp)
    53c4:	300b883a 	mov	r5,r6
    53c8:	8424d804 	addi	r16,r16,-27808
    53cc:	2023883a 	mov	r17,r4
    53d0:	380d883a 	mov	r6,r7
    53d4:	1009883a 	mov	r4,r2
    53d8:	dfc00215 	stw	ra,8(sp)
    53dc:	80000015 	stw	zero,0(r16)
    53e0:	00058600 	call	5860 <lseek>
    53e4:	00ffffc4 	movi	r3,-1
    53e8:	10c00526 	beq	r2,r3,5400 <_lseek_r+0x50>
    53ec:	dfc00217 	ldw	ra,8(sp)
    53f0:	dc400117 	ldw	r17,4(sp)
    53f4:	dc000017 	ldw	r16,0(sp)
    53f8:	dec00304 	addi	sp,sp,12
    53fc:	f800283a 	ret
    5400:	80c00017 	ldw	r3,0(r16)
    5404:	183ff926 	beq	r3,zero,53ec <__alt_mem_onchip_memory2_0+0xf7c013ec>
    5408:	88c00015 	stw	r3,0(r17)
    540c:	003ff706 	br	53ec <__alt_mem_onchip_memory2_0+0xf7c013ec>

00005410 <_read_r>:
    5410:	defffd04 	addi	sp,sp,-12
    5414:	2805883a 	mov	r2,r5
    5418:	dc000015 	stw	r16,0(sp)
    541c:	04000074 	movhi	r16,1
    5420:	dc400115 	stw	r17,4(sp)
    5424:	300b883a 	mov	r5,r6
    5428:	8424d804 	addi	r16,r16,-27808
    542c:	2023883a 	mov	r17,r4
    5430:	380d883a 	mov	r6,r7
    5434:	1009883a 	mov	r4,r2
    5438:	dfc00215 	stw	ra,8(sp)
    543c:	80000015 	stw	zero,0(r16)
    5440:	00059b80 	call	59b8 <read>
    5444:	00ffffc4 	movi	r3,-1
    5448:	10c00526 	beq	r2,r3,5460 <_read_r+0x50>
    544c:	dfc00217 	ldw	ra,8(sp)
    5450:	dc400117 	ldw	r17,4(sp)
    5454:	dc000017 	ldw	r16,0(sp)
    5458:	dec00304 	addi	sp,sp,12
    545c:	f800283a 	ret
    5460:	80c00017 	ldw	r3,0(r16)
    5464:	183ff926 	beq	r3,zero,544c <__alt_mem_onchip_memory2_0+0xf7c0144c>
    5468:	88c00015 	stw	r3,0(r17)
    546c:	003ff706 	br	544c <__alt_mem_onchip_memory2_0+0xf7c0144c>

00005470 <__divsi3>:
    5470:	20001b16 	blt	r4,zero,54e0 <__divsi3+0x70>
    5474:	000f883a 	mov	r7,zero
    5478:	28001616 	blt	r5,zero,54d4 <__divsi3+0x64>
    547c:	200d883a 	mov	r6,r4
    5480:	29001a2e 	bgeu	r5,r4,54ec <__divsi3+0x7c>
    5484:	00800804 	movi	r2,32
    5488:	00c00044 	movi	r3,1
    548c:	00000106 	br	5494 <__divsi3+0x24>
    5490:	10000d26 	beq	r2,zero,54c8 <__divsi3+0x58>
    5494:	294b883a 	add	r5,r5,r5
    5498:	10bfffc4 	addi	r2,r2,-1
    549c:	18c7883a 	add	r3,r3,r3
    54a0:	293ffb36 	bltu	r5,r4,5490 <__alt_mem_onchip_memory2_0+0xf7c01490>
    54a4:	0005883a 	mov	r2,zero
    54a8:	18000726 	beq	r3,zero,54c8 <__divsi3+0x58>
    54ac:	0005883a 	mov	r2,zero
    54b0:	31400236 	bltu	r6,r5,54bc <__divsi3+0x4c>
    54b4:	314dc83a 	sub	r6,r6,r5
    54b8:	10c4b03a 	or	r2,r2,r3
    54bc:	1806d07a 	srli	r3,r3,1
    54c0:	280ad07a 	srli	r5,r5,1
    54c4:	183ffa1e 	bne	r3,zero,54b0 <__alt_mem_onchip_memory2_0+0xf7c014b0>
    54c8:	38000126 	beq	r7,zero,54d0 <__divsi3+0x60>
    54cc:	0085c83a 	sub	r2,zero,r2
    54d0:	f800283a 	ret
    54d4:	014bc83a 	sub	r5,zero,r5
    54d8:	39c0005c 	xori	r7,r7,1
    54dc:	003fe706 	br	547c <__alt_mem_onchip_memory2_0+0xf7c0147c>
    54e0:	0109c83a 	sub	r4,zero,r4
    54e4:	01c00044 	movi	r7,1
    54e8:	003fe306 	br	5478 <__alt_mem_onchip_memory2_0+0xf7c01478>
    54ec:	00c00044 	movi	r3,1
    54f0:	003fee06 	br	54ac <__alt_mem_onchip_memory2_0+0xf7c014ac>

000054f4 <__modsi3>:
    54f4:	20001716 	blt	r4,zero,5554 <__modsi3+0x60>
    54f8:	000f883a 	mov	r7,zero
    54fc:	2005883a 	mov	r2,r4
    5500:	28001216 	blt	r5,zero,554c <__modsi3+0x58>
    5504:	2900162e 	bgeu	r5,r4,5560 <__modsi3+0x6c>
    5508:	01800804 	movi	r6,32
    550c:	00c00044 	movi	r3,1
    5510:	00000106 	br	5518 <__modsi3+0x24>
    5514:	30000a26 	beq	r6,zero,5540 <__modsi3+0x4c>
    5518:	294b883a 	add	r5,r5,r5
    551c:	31bfffc4 	addi	r6,r6,-1
    5520:	18c7883a 	add	r3,r3,r3
    5524:	293ffb36 	bltu	r5,r4,5514 <__alt_mem_onchip_memory2_0+0xf7c01514>
    5528:	18000526 	beq	r3,zero,5540 <__modsi3+0x4c>
    552c:	1806d07a 	srli	r3,r3,1
    5530:	11400136 	bltu	r2,r5,5538 <__modsi3+0x44>
    5534:	1145c83a 	sub	r2,r2,r5
    5538:	280ad07a 	srli	r5,r5,1
    553c:	183ffb1e 	bne	r3,zero,552c <__alt_mem_onchip_memory2_0+0xf7c0152c>
    5540:	38000126 	beq	r7,zero,5548 <__modsi3+0x54>
    5544:	0085c83a 	sub	r2,zero,r2
    5548:	f800283a 	ret
    554c:	014bc83a 	sub	r5,zero,r5
    5550:	003fec06 	br	5504 <__alt_mem_onchip_memory2_0+0xf7c01504>
    5554:	0109c83a 	sub	r4,zero,r4
    5558:	01c00044 	movi	r7,1
    555c:	003fe706 	br	54fc <__alt_mem_onchip_memory2_0+0xf7c014fc>
    5560:	00c00044 	movi	r3,1
    5564:	003ff106 	br	552c <__alt_mem_onchip_memory2_0+0xf7c0152c>

00005568 <__udivsi3>:
    5568:	200d883a 	mov	r6,r4
    556c:	2900152e 	bgeu	r5,r4,55c4 <__udivsi3+0x5c>
    5570:	28001416 	blt	r5,zero,55c4 <__udivsi3+0x5c>
    5574:	00800804 	movi	r2,32
    5578:	00c00044 	movi	r3,1
    557c:	00000206 	br	5588 <__udivsi3+0x20>
    5580:	10000e26 	beq	r2,zero,55bc <__udivsi3+0x54>
    5584:	28000516 	blt	r5,zero,559c <__udivsi3+0x34>
    5588:	294b883a 	add	r5,r5,r5
    558c:	10bfffc4 	addi	r2,r2,-1
    5590:	18c7883a 	add	r3,r3,r3
    5594:	293ffa36 	bltu	r5,r4,5580 <__alt_mem_onchip_memory2_0+0xf7c01580>
    5598:	18000826 	beq	r3,zero,55bc <__udivsi3+0x54>
    559c:	0005883a 	mov	r2,zero
    55a0:	31400236 	bltu	r6,r5,55ac <__udivsi3+0x44>
    55a4:	314dc83a 	sub	r6,r6,r5
    55a8:	10c4b03a 	or	r2,r2,r3
    55ac:	1806d07a 	srli	r3,r3,1
    55b0:	280ad07a 	srli	r5,r5,1
    55b4:	183ffa1e 	bne	r3,zero,55a0 <__alt_mem_onchip_memory2_0+0xf7c015a0>
    55b8:	f800283a 	ret
    55bc:	0005883a 	mov	r2,zero
    55c0:	f800283a 	ret
    55c4:	00c00044 	movi	r3,1
    55c8:	003ff406 	br	559c <__alt_mem_onchip_memory2_0+0xf7c0159c>

000055cc <__umodsi3>:
    55cc:	2005883a 	mov	r2,r4
    55d0:	2900122e 	bgeu	r5,r4,561c <__umodsi3+0x50>
    55d4:	28001116 	blt	r5,zero,561c <__umodsi3+0x50>
    55d8:	01800804 	movi	r6,32
    55dc:	00c00044 	movi	r3,1
    55e0:	00000206 	br	55ec <__umodsi3+0x20>
    55e4:	30000c26 	beq	r6,zero,5618 <__umodsi3+0x4c>
    55e8:	28000516 	blt	r5,zero,5600 <__umodsi3+0x34>
    55ec:	294b883a 	add	r5,r5,r5
    55f0:	31bfffc4 	addi	r6,r6,-1
    55f4:	18c7883a 	add	r3,r3,r3
    55f8:	293ffa36 	bltu	r5,r4,55e4 <__alt_mem_onchip_memory2_0+0xf7c015e4>
    55fc:	18000626 	beq	r3,zero,5618 <__umodsi3+0x4c>
    5600:	1806d07a 	srli	r3,r3,1
    5604:	11400136 	bltu	r2,r5,560c <__umodsi3+0x40>
    5608:	1145c83a 	sub	r2,r2,r5
    560c:	280ad07a 	srli	r5,r5,1
    5610:	183ffb1e 	bne	r3,zero,5600 <__alt_mem_onchip_memory2_0+0xf7c01600>
    5614:	f800283a 	ret
    5618:	f800283a 	ret
    561c:	00c00044 	movi	r3,1
    5620:	003ff706 	br	5600 <__alt_mem_onchip_memory2_0+0xf7c01600>

00005624 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    5624:	defffd04 	addi	sp,sp,-12
    5628:	df000215 	stw	fp,8(sp)
    562c:	df000204 	addi	fp,sp,8
    5630:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    5634:	0001883a 	nop
    5638:	e0bfff17 	ldw	r2,-4(fp)
    563c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    5640:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    5644:	10000226 	beq	r2,zero,5650 <_exit+0x2c>
    ALT_SIM_FAIL();
    5648:	002af070 	cmpltui	zero,zero,43969
    564c:	00000106 	br	5654 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    5650:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    5654:	003fff06 	br	5654 <__alt_mem_onchip_memory2_0+0xf7c01654>

00005658 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5658:	defffe04 	addi	sp,sp,-8
    565c:	dfc00115 	stw	ra,4(sp)
    5660:	df000015 	stw	fp,0(sp)
    5664:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5668:	d0a00517 	ldw	r2,-32748(gp)
    566c:	10000326 	beq	r2,zero,567c <alt_get_errno+0x24>
    5670:	d0a00517 	ldw	r2,-32748(gp)
    5674:	103ee83a 	callr	r2
    5678:	00000106 	br	5680 <alt_get_errno+0x28>
    567c:	d0a6d604 	addi	r2,gp,-25768
}
    5680:	e037883a 	mov	sp,fp
    5684:	dfc00117 	ldw	ra,4(sp)
    5688:	df000017 	ldw	fp,0(sp)
    568c:	dec00204 	addi	sp,sp,8
    5690:	f800283a 	ret

00005694 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    5694:	defffb04 	addi	sp,sp,-20
    5698:	dfc00415 	stw	ra,16(sp)
    569c:	df000315 	stw	fp,12(sp)
    56a0:	df000304 	addi	fp,sp,12
    56a4:	e13ffe15 	stw	r4,-8(fp)
    56a8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    56ac:	e0bffe17 	ldw	r2,-8(fp)
    56b0:	10000616 	blt	r2,zero,56cc <fstat+0x38>
    56b4:	e0bffe17 	ldw	r2,-8(fp)
    56b8:	10c00324 	muli	r3,r2,12
    56bc:	00800034 	movhi	r2,0
    56c0:	109b9704 	addi	r2,r2,28252
    56c4:	1885883a 	add	r2,r3,r2
    56c8:	00000106 	br	56d0 <fstat+0x3c>
    56cc:	0005883a 	mov	r2,zero
    56d0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    56d4:	e0bffd17 	ldw	r2,-12(fp)
    56d8:	10001026 	beq	r2,zero,571c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    56dc:	e0bffd17 	ldw	r2,-12(fp)
    56e0:	10800017 	ldw	r2,0(r2)
    56e4:	10800817 	ldw	r2,32(r2)
    56e8:	10000726 	beq	r2,zero,5708 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    56ec:	e0bffd17 	ldw	r2,-12(fp)
    56f0:	10800017 	ldw	r2,0(r2)
    56f4:	10800817 	ldw	r2,32(r2)
    56f8:	e17fff17 	ldw	r5,-4(fp)
    56fc:	e13ffd17 	ldw	r4,-12(fp)
    5700:	103ee83a 	callr	r2
    5704:	00000a06 	br	5730 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    5708:	e0bfff17 	ldw	r2,-4(fp)
    570c:	00c80004 	movi	r3,8192
    5710:	10c00115 	stw	r3,4(r2)
      return 0;
    5714:	0005883a 	mov	r2,zero
    5718:	00000506 	br	5730 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    571c:	00056580 	call	5658 <alt_get_errno>
    5720:	1007883a 	mov	r3,r2
    5724:	00801444 	movi	r2,81
    5728:	18800015 	stw	r2,0(r3)
    return -1;
    572c:	00bfffc4 	movi	r2,-1
  }
}
    5730:	e037883a 	mov	sp,fp
    5734:	dfc00117 	ldw	ra,4(sp)
    5738:	df000017 	ldw	fp,0(sp)
    573c:	dec00204 	addi	sp,sp,8
    5740:	f800283a 	ret

00005744 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5744:	defffe04 	addi	sp,sp,-8
    5748:	dfc00115 	stw	ra,4(sp)
    574c:	df000015 	stw	fp,0(sp)
    5750:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5754:	d0a00517 	ldw	r2,-32748(gp)
    5758:	10000326 	beq	r2,zero,5768 <alt_get_errno+0x24>
    575c:	d0a00517 	ldw	r2,-32748(gp)
    5760:	103ee83a 	callr	r2
    5764:	00000106 	br	576c <alt_get_errno+0x28>
    5768:	d0a6d604 	addi	r2,gp,-25768
}
    576c:	e037883a 	mov	sp,fp
    5770:	dfc00117 	ldw	ra,4(sp)
    5774:	df000017 	ldw	fp,0(sp)
    5778:	dec00204 	addi	sp,sp,8
    577c:	f800283a 	ret

00005780 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    5780:	deffed04 	addi	sp,sp,-76
    5784:	dfc01215 	stw	ra,72(sp)
    5788:	df001115 	stw	fp,68(sp)
    578c:	df001104 	addi	fp,sp,68
    5790:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5794:	e0bfff17 	ldw	r2,-4(fp)
    5798:	10000616 	blt	r2,zero,57b4 <isatty+0x34>
    579c:	e0bfff17 	ldw	r2,-4(fp)
    57a0:	10c00324 	muli	r3,r2,12
    57a4:	00800034 	movhi	r2,0
    57a8:	109b9704 	addi	r2,r2,28252
    57ac:	1885883a 	add	r2,r3,r2
    57b0:	00000106 	br	57b8 <isatty+0x38>
    57b4:	0005883a 	mov	r2,zero
    57b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    57bc:	e0bfef17 	ldw	r2,-68(fp)
    57c0:	10000e26 	beq	r2,zero,57fc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    57c4:	e0bfef17 	ldw	r2,-68(fp)
    57c8:	10800017 	ldw	r2,0(r2)
    57cc:	10800817 	ldw	r2,32(r2)
    57d0:	1000021e 	bne	r2,zero,57dc <isatty+0x5c>
    {
      return 1;
    57d4:	00800044 	movi	r2,1
    57d8:	00000d06 	br	5810 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    57dc:	e0bff004 	addi	r2,fp,-64
    57e0:	100b883a 	mov	r5,r2
    57e4:	e13fff17 	ldw	r4,-4(fp)
    57e8:	00056940 	call	5694 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    57ec:	e0bff117 	ldw	r2,-60(fp)
    57f0:	10880020 	cmpeqi	r2,r2,8192
    57f4:	10803fcc 	andi	r2,r2,255
    57f8:	00000506 	br	5810 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    57fc:	00057440 	call	5744 <alt_get_errno>
    5800:	1007883a 	mov	r3,r2
    5804:	00801444 	movi	r2,81
    5808:	18800015 	stw	r2,0(r3)
    return 0;
    580c:	0005883a 	mov	r2,zero
  }
}
    5810:	e037883a 	mov	sp,fp
    5814:	dfc00117 	ldw	ra,4(sp)
    5818:	df000017 	ldw	fp,0(sp)
    581c:	dec00204 	addi	sp,sp,8
    5820:	f800283a 	ret

00005824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5824:	defffe04 	addi	sp,sp,-8
    5828:	dfc00115 	stw	ra,4(sp)
    582c:	df000015 	stw	fp,0(sp)
    5830:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5834:	d0a00517 	ldw	r2,-32748(gp)
    5838:	10000326 	beq	r2,zero,5848 <alt_get_errno+0x24>
    583c:	d0a00517 	ldw	r2,-32748(gp)
    5840:	103ee83a 	callr	r2
    5844:	00000106 	br	584c <alt_get_errno+0x28>
    5848:	d0a6d604 	addi	r2,gp,-25768
}
    584c:	e037883a 	mov	sp,fp
    5850:	dfc00117 	ldw	ra,4(sp)
    5854:	df000017 	ldw	fp,0(sp)
    5858:	dec00204 	addi	sp,sp,8
    585c:	f800283a 	ret

00005860 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    5860:	defff904 	addi	sp,sp,-28
    5864:	dfc00615 	stw	ra,24(sp)
    5868:	df000515 	stw	fp,20(sp)
    586c:	df000504 	addi	fp,sp,20
    5870:	e13ffd15 	stw	r4,-12(fp)
    5874:	e17ffe15 	stw	r5,-8(fp)
    5878:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    587c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5880:	e0bffd17 	ldw	r2,-12(fp)
    5884:	10000616 	blt	r2,zero,58a0 <lseek+0x40>
    5888:	e0bffd17 	ldw	r2,-12(fp)
    588c:	10c00324 	muli	r3,r2,12
    5890:	00800034 	movhi	r2,0
    5894:	109b9704 	addi	r2,r2,28252
    5898:	1885883a 	add	r2,r3,r2
    589c:	00000106 	br	58a4 <lseek+0x44>
    58a0:	0005883a 	mov	r2,zero
    58a4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    58a8:	e0bffc17 	ldw	r2,-16(fp)
    58ac:	10001026 	beq	r2,zero,58f0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    58b0:	e0bffc17 	ldw	r2,-16(fp)
    58b4:	10800017 	ldw	r2,0(r2)
    58b8:	10800717 	ldw	r2,28(r2)
    58bc:	10000926 	beq	r2,zero,58e4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    58c0:	e0bffc17 	ldw	r2,-16(fp)
    58c4:	10800017 	ldw	r2,0(r2)
    58c8:	10800717 	ldw	r2,28(r2)
    58cc:	e1bfff17 	ldw	r6,-4(fp)
    58d0:	e17ffe17 	ldw	r5,-8(fp)
    58d4:	e13ffc17 	ldw	r4,-16(fp)
    58d8:	103ee83a 	callr	r2
    58dc:	e0bffb15 	stw	r2,-20(fp)
    58e0:	00000506 	br	58f8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    58e4:	00bfde84 	movi	r2,-134
    58e8:	e0bffb15 	stw	r2,-20(fp)
    58ec:	00000206 	br	58f8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    58f0:	00bfebc4 	movi	r2,-81
    58f4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    58f8:	e0bffb17 	ldw	r2,-20(fp)
    58fc:	1000070e 	bge	r2,zero,591c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    5900:	00058240 	call	5824 <alt_get_errno>
    5904:	1007883a 	mov	r3,r2
    5908:	e0bffb17 	ldw	r2,-20(fp)
    590c:	0085c83a 	sub	r2,zero,r2
    5910:	18800015 	stw	r2,0(r3)
    rc = -1;
    5914:	00bfffc4 	movi	r2,-1
    5918:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    591c:	e0bffb17 	ldw	r2,-20(fp)
}
    5920:	e037883a 	mov	sp,fp
    5924:	dfc00117 	ldw	ra,4(sp)
    5928:	df000017 	ldw	fp,0(sp)
    592c:	dec00204 	addi	sp,sp,8
    5930:	f800283a 	ret

00005934 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    5934:	defffe04 	addi	sp,sp,-8
    5938:	df000115 	stw	fp,4(sp)
    593c:	df000104 	addi	fp,sp,4
    5940:	e13fff15 	stw	r4,-4(fp)
}
    5944:	0001883a 	nop
    5948:	e037883a 	mov	sp,fp
    594c:	df000017 	ldw	fp,0(sp)
    5950:	dec00104 	addi	sp,sp,4
    5954:	f800283a 	ret

00005958 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    5958:	defffe04 	addi	sp,sp,-8
    595c:	df000115 	stw	fp,4(sp)
    5960:	df000104 	addi	fp,sp,4
    5964:	e13fff15 	stw	r4,-4(fp)
}
    5968:	0001883a 	nop
    596c:	e037883a 	mov	sp,fp
    5970:	df000017 	ldw	fp,0(sp)
    5974:	dec00104 	addi	sp,sp,4
    5978:	f800283a 	ret

0000597c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    597c:	defffe04 	addi	sp,sp,-8
    5980:	dfc00115 	stw	ra,4(sp)
    5984:	df000015 	stw	fp,0(sp)
    5988:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    598c:	d0a00517 	ldw	r2,-32748(gp)
    5990:	10000326 	beq	r2,zero,59a0 <alt_get_errno+0x24>
    5994:	d0a00517 	ldw	r2,-32748(gp)
    5998:	103ee83a 	callr	r2
    599c:	00000106 	br	59a4 <alt_get_errno+0x28>
    59a0:	d0a6d604 	addi	r2,gp,-25768
}
    59a4:	e037883a 	mov	sp,fp
    59a8:	dfc00117 	ldw	ra,4(sp)
    59ac:	df000017 	ldw	fp,0(sp)
    59b0:	dec00204 	addi	sp,sp,8
    59b4:	f800283a 	ret

000059b8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    59b8:	defff904 	addi	sp,sp,-28
    59bc:	dfc00615 	stw	ra,24(sp)
    59c0:	df000515 	stw	fp,20(sp)
    59c4:	df000504 	addi	fp,sp,20
    59c8:	e13ffd15 	stw	r4,-12(fp)
    59cc:	e17ffe15 	stw	r5,-8(fp)
    59d0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    59d4:	e0bffd17 	ldw	r2,-12(fp)
    59d8:	10000616 	blt	r2,zero,59f4 <read+0x3c>
    59dc:	e0bffd17 	ldw	r2,-12(fp)
    59e0:	10c00324 	muli	r3,r2,12
    59e4:	00800034 	movhi	r2,0
    59e8:	109b9704 	addi	r2,r2,28252
    59ec:	1885883a 	add	r2,r3,r2
    59f0:	00000106 	br	59f8 <read+0x40>
    59f4:	0005883a 	mov	r2,zero
    59f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    59fc:	e0bffb17 	ldw	r2,-20(fp)
    5a00:	10002226 	beq	r2,zero,5a8c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5a04:	e0bffb17 	ldw	r2,-20(fp)
    5a08:	10800217 	ldw	r2,8(r2)
    5a0c:	108000cc 	andi	r2,r2,3
    5a10:	10800060 	cmpeqi	r2,r2,1
    5a14:	1000181e 	bne	r2,zero,5a78 <read+0xc0>
        (fd->dev->read))
    5a18:	e0bffb17 	ldw	r2,-20(fp)
    5a1c:	10800017 	ldw	r2,0(r2)
    5a20:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5a24:	10001426 	beq	r2,zero,5a78 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    5a28:	e0bffb17 	ldw	r2,-20(fp)
    5a2c:	10800017 	ldw	r2,0(r2)
    5a30:	10800517 	ldw	r2,20(r2)
    5a34:	e0ffff17 	ldw	r3,-4(fp)
    5a38:	180d883a 	mov	r6,r3
    5a3c:	e17ffe17 	ldw	r5,-8(fp)
    5a40:	e13ffb17 	ldw	r4,-20(fp)
    5a44:	103ee83a 	callr	r2
    5a48:	e0bffc15 	stw	r2,-16(fp)
    5a4c:	e0bffc17 	ldw	r2,-16(fp)
    5a50:	1000070e 	bge	r2,zero,5a70 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    5a54:	000597c0 	call	597c <alt_get_errno>
    5a58:	1007883a 	mov	r3,r2
    5a5c:	e0bffc17 	ldw	r2,-16(fp)
    5a60:	0085c83a 	sub	r2,zero,r2
    5a64:	18800015 	stw	r2,0(r3)
          return -1;
    5a68:	00bfffc4 	movi	r2,-1
    5a6c:	00000c06 	br	5aa0 <read+0xe8>
        }
        return rval;
    5a70:	e0bffc17 	ldw	r2,-16(fp)
    5a74:	00000a06 	br	5aa0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    5a78:	000597c0 	call	597c <alt_get_errno>
    5a7c:	1007883a 	mov	r3,r2
    5a80:	00800344 	movi	r2,13
    5a84:	18800015 	stw	r2,0(r3)
    5a88:	00000406 	br	5a9c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    5a8c:	000597c0 	call	597c <alt_get_errno>
    5a90:	1007883a 	mov	r3,r2
    5a94:	00801444 	movi	r2,81
    5a98:	18800015 	stw	r2,0(r3)
  }
  return -1;
    5a9c:	00bfffc4 	movi	r2,-1
}
    5aa0:	e037883a 	mov	sp,fp
    5aa4:	dfc00117 	ldw	ra,4(sp)
    5aa8:	df000017 	ldw	fp,0(sp)
    5aac:	dec00204 	addi	sp,sp,8
    5ab0:	f800283a 	ret

00005ab4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    5ab4:	defff904 	addi	sp,sp,-28
    5ab8:	df000615 	stw	fp,24(sp)
    5abc:	df000604 	addi	fp,sp,24
    5ac0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5ac4:	0005303a 	rdctl	r2,status
    5ac8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5acc:	e0fffe17 	ldw	r3,-8(fp)
    5ad0:	00bfff84 	movi	r2,-2
    5ad4:	1884703a 	and	r2,r3,r2
    5ad8:	1001703a 	wrctl	status,r2
  
  return context;
    5adc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    5ae0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5ae4:	d0a00d17 	ldw	r2,-32716(gp)
    5ae8:	10c000c4 	addi	r3,r2,3
    5aec:	00bfff04 	movi	r2,-4
    5af0:	1884703a 	and	r2,r3,r2
    5af4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5af8:	d0e00d17 	ldw	r3,-32716(gp)
    5afc:	e0bfff17 	ldw	r2,-4(fp)
    5b00:	1887883a 	add	r3,r3,r2
    5b04:	00820034 	movhi	r2,2048
    5b08:	10800004 	addi	r2,r2,0
    5b0c:	10c0062e 	bgeu	r2,r3,5b28 <sbrk+0x74>
    5b10:	e0bffb17 	ldw	r2,-20(fp)
    5b14:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5b18:	e0bffa17 	ldw	r2,-24(fp)
    5b1c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    5b20:	00bfffc4 	movi	r2,-1
    5b24:	00000b06 	br	5b54 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    5b28:	d0a00d17 	ldw	r2,-32716(gp)
    5b2c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    5b30:	d0e00d17 	ldw	r3,-32716(gp)
    5b34:	e0bfff17 	ldw	r2,-4(fp)
    5b38:	1885883a 	add	r2,r3,r2
    5b3c:	d0a00d15 	stw	r2,-32716(gp)
    5b40:	e0bffb17 	ldw	r2,-20(fp)
    5b44:	e0bffc15 	stw	r2,-16(fp)
    5b48:	e0bffc17 	ldw	r2,-16(fp)
    5b4c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    5b50:	e0bffd17 	ldw	r2,-12(fp)
} 
    5b54:	e037883a 	mov	sp,fp
    5b58:	df000017 	ldw	fp,0(sp)
    5b5c:	dec00104 	addi	sp,sp,4
    5b60:	f800283a 	ret

00005b64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5b64:	defffe04 	addi	sp,sp,-8
    5b68:	dfc00115 	stw	ra,4(sp)
    5b6c:	df000015 	stw	fp,0(sp)
    5b70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5b74:	d0a00517 	ldw	r2,-32748(gp)
    5b78:	10000326 	beq	r2,zero,5b88 <alt_get_errno+0x24>
    5b7c:	d0a00517 	ldw	r2,-32748(gp)
    5b80:	103ee83a 	callr	r2
    5b84:	00000106 	br	5b8c <alt_get_errno+0x28>
    5b88:	d0a6d604 	addi	r2,gp,-25768
}
    5b8c:	e037883a 	mov	sp,fp
    5b90:	dfc00117 	ldw	ra,4(sp)
    5b94:	df000017 	ldw	fp,0(sp)
    5b98:	dec00204 	addi	sp,sp,8
    5b9c:	f800283a 	ret

00005ba0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5ba0:	defff904 	addi	sp,sp,-28
    5ba4:	dfc00615 	stw	ra,24(sp)
    5ba8:	df000515 	stw	fp,20(sp)
    5bac:	df000504 	addi	fp,sp,20
    5bb0:	e13ffd15 	stw	r4,-12(fp)
    5bb4:	e17ffe15 	stw	r5,-8(fp)
    5bb8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5bbc:	e0bffd17 	ldw	r2,-12(fp)
    5bc0:	10000616 	blt	r2,zero,5bdc <write+0x3c>
    5bc4:	e0bffd17 	ldw	r2,-12(fp)
    5bc8:	10c00324 	muli	r3,r2,12
    5bcc:	00800034 	movhi	r2,0
    5bd0:	109b9704 	addi	r2,r2,28252
    5bd4:	1885883a 	add	r2,r3,r2
    5bd8:	00000106 	br	5be0 <write+0x40>
    5bdc:	0005883a 	mov	r2,zero
    5be0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    5be4:	e0bffb17 	ldw	r2,-20(fp)
    5be8:	10002126 	beq	r2,zero,5c70 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5bec:	e0bffb17 	ldw	r2,-20(fp)
    5bf0:	10800217 	ldw	r2,8(r2)
    5bf4:	108000cc 	andi	r2,r2,3
    5bf8:	10001826 	beq	r2,zero,5c5c <write+0xbc>
    5bfc:	e0bffb17 	ldw	r2,-20(fp)
    5c00:	10800017 	ldw	r2,0(r2)
    5c04:	10800617 	ldw	r2,24(r2)
    5c08:	10001426 	beq	r2,zero,5c5c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5c0c:	e0bffb17 	ldw	r2,-20(fp)
    5c10:	10800017 	ldw	r2,0(r2)
    5c14:	10800617 	ldw	r2,24(r2)
    5c18:	e0ffff17 	ldw	r3,-4(fp)
    5c1c:	180d883a 	mov	r6,r3
    5c20:	e17ffe17 	ldw	r5,-8(fp)
    5c24:	e13ffb17 	ldw	r4,-20(fp)
    5c28:	103ee83a 	callr	r2
    5c2c:	e0bffc15 	stw	r2,-16(fp)
    5c30:	e0bffc17 	ldw	r2,-16(fp)
    5c34:	1000070e 	bge	r2,zero,5c54 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    5c38:	0005b640 	call	5b64 <alt_get_errno>
    5c3c:	1007883a 	mov	r3,r2
    5c40:	e0bffc17 	ldw	r2,-16(fp)
    5c44:	0085c83a 	sub	r2,zero,r2
    5c48:	18800015 	stw	r2,0(r3)
        return -1;
    5c4c:	00bfffc4 	movi	r2,-1
    5c50:	00000c06 	br	5c84 <write+0xe4>
      }
      return rval;
    5c54:	e0bffc17 	ldw	r2,-16(fp)
    5c58:	00000a06 	br	5c84 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    5c5c:	0005b640 	call	5b64 <alt_get_errno>
    5c60:	1007883a 	mov	r3,r2
    5c64:	00800344 	movi	r2,13
    5c68:	18800015 	stw	r2,0(r3)
    5c6c:	00000406 	br	5c80 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5c70:	0005b640 	call	5b64 <alt_get_errno>
    5c74:	1007883a 	mov	r3,r2
    5c78:	00801444 	movi	r2,81
    5c7c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    5c80:	00bfffc4 	movi	r2,-1
}
    5c84:	e037883a 	mov	sp,fp
    5c88:	dfc00117 	ldw	ra,4(sp)
    5c8c:	df000017 	ldw	fp,0(sp)
    5c90:	dec00204 	addi	sp,sp,8
    5c94:	f800283a 	ret
