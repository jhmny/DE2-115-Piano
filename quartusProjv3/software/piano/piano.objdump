
piano.elf:     file format elf32-littlenios2
piano.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005ce0 memsz 0x00005ce0 flags r-x
    LOAD off    0x00006d00 vaddr 0x00005d00 paddr 0x00007804 align 2**12
         filesz 0x00001b04 memsz 0x00001b04 flags rw-
    LOAD off    0x00009308 vaddr 0x00009308 paddr 0x00009308 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005a10  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a8  00005c58  00005c58  00006c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b04  00005d00  00007804  00006d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00009308  00009308  00009308  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  0000945c  0000945c  00008804  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08404000  08404000  00008804  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008804  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000009d0  00000000  00000000  00008828  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016e04  00000000  00000000  000091f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005fe7  00000000  00000000  0001fffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006a3f  00000000  00000000  00025fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001718  00000000  00000000  0002ca24  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000028c9  00000000  00000000  0002e13c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000048aa  00000000  00000000  00030a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  000352b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000660  00000000  00000000  000352e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000380a6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000380a9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000380b5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000380b6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000380b7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000380bb  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000380bf  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000380c3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000380ce  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000380d9  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000380e4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003c  00000000  00000000  000380ef  2**0
                  CONTENTS, READONLY
 30 .jdi          00005c74  00000000  00000000  0003812b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000af7b0  00000000  00000000  0003dd9f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
00005c58 l    d  .rodata	00000000 .rodata
00005d00 l    d  .rwdata	00000000 .rwdata
00009308 l    d  .bss	00000000 .bss
0000945c l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
08404000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../piano_bsp//obj/HAL/src/crt0.o
00000290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 piano.c
00000000 l    df *ABS*	00000000 alt_load.c
0000030c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000004a0 l     F .text	00000034 alt_dev_reg
00005d00 l     O .rwdata	00001060 jtag_uart_0
00006d60 l     O .rwdata	00000030 audio_and_video_config_0
00006d90 l     O .rwdata	00000030 audio_0
00006dc0 l     O .rwdata	00000038 ps2_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000007b8 l     F .text	00000210 altera_avalon_jtag_uart_irq
000009c8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001000 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000018cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001a20 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00001a4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001bf0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00001eb0 l     F .text	0000003c alt_get_errno
00001eec l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00006fa0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000438c l     F .text	00000008 __fp_unlock
000043a0 l     F .text	0000019c __sinit.part.1
0000453c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00005618 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00005704 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
000057e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000593c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00007800 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00005b24 l     F .text	0000003c alt_get_errno
00009320 g     O .bss	00000004 alt_instruction_exception_handler
0000531c g     F .text	00000054 _isatty_r
000003f8 g     F .text	0000006c alt_main
0000935c g     O .bss	00000100 alt_irq
0000133c g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00005370 g     F .text	00000060 _lseek_r
00007804 g       *ABS*	00000000 __flash_rwdata_start
0000945c g       *ABS*	00000000 __alt_heap_start
000050a4 g     F .text	0000005c __sseek
000046dc g     F .text	00000010 __sinit
00001154 g     F .text	00000034 read_CE_bit
00004544 g     F .text	00000068 __sfmoreglue
00005918 g     F .text	00000024 __malloc_unlock
000014dc g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
00003664 g     F .text	0000015c memmove
000046c4 g     F .text	00000018 _cleanup
00000464 g     F .text	0000003c alt_putstr
0000230c g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000052c0 g     F .text	0000005c _fstat_r
00009324 g     O .bss	00000004 errno
00005020 g     F .text	00000008 __seofread
0000930c g     O .bss	00000004 alt_argv
0000f7cc g       *ABS*	00000000 _gp
00006e20 g     O .rwdata	00000180 alt_fd_list
00001b2c g     F .text	00000090 alt_find_dev
0000351c g     F .text	00000148 memcpy
00004394 g     F .text	0000000c _cleanup_r
00001cb4 g     F .text	0000007c alt_io_redirect
0000256c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00000bc0 g     F .text	0000021c altera_avalon_jtag_uart_read
08404000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00005528 g     F .text	00000064 .hidden __udivsi3
00005740 g     F .text	000000a4 isatty
000024dc g     F .text	00000090 alt_icache_flush
00009330 g     O .bss	00000004 __malloc_top_pad
000026f4 g     F .text	000004bc __sfvwrite_r
00003d24 g     F .text	00000054 _sbrk_r
000053d0 g     F .text	00000060 _read_r
000077dc g     O .rwdata	00000004 alt_max_fd
000051bc g     F .text	000000f0 _fclose_r
00001188 g     F .text	00000030 read_num_bytes_available
0000435c g     F .text	00000030 fflush
0000932c g     O .bss	00000004 __malloc_max_sbrked_mem
00001d30 g     F .text	00000180 alt_irq_register
000010f0 g     F .text	00000034 read_RI_bit
00005820 g     F .text	000000d4 lseek
000077f0 g     O .rwdata	00000004 _global_impure_ptr
000037c0 g     F .text	00000564 _realloc_r
0000945c g       *ABS*	00000000 __bss_end
00002204 g     F .text	00000108 alt_tick
000011ec g     F .text	0000002c read_data_byte
000046fc g     F .text	00000018 __fp_lock_all
00002168 g     F .text	0000009c alt_alarm_stop
00001124 g     F .text	00000030 read_RE_bit
00009314 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d8 alt_irq_handler
00006df8 g     O .rwdata	00000028 alt_dev_null
0000139c g     F .text	00000074 alt_up_ps2_write_data_byte
000019d8 g     F .text	00000048 alt_dcache_flush_all
00007804 g       *ABS*	00000000 __ram_rwdata_end
000077d4 g     O .rwdata	00000008 alt_dev_list
00005b60 g     F .text	000000f8 write
00005d00 g       *ABS*	00000000 __ram_rodata_end
00005654 g     F .text	000000b0 fstat
0000558c g     F .text	00000058 .hidden __umodsi3
0000945c g       *ABS*	00000000 end
000016cc g     F .text	00000098 alt_up_ps2_write_fd
00000704 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000107c g     F .text	00000074 alt_avalon_timer_sc_init
00000ddc g     F .text	00000224 altera_avalon_jtag_uart_write
000046ec g     F .text	00000004 __sfp_lock_acquire
000033bc g     F .text	000000e4 memchr
00004850 g     F .text	00000310 _free_r
00003f64 g     F .text	00000180 __call_exitprocs
000077f8 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000004c _start
00009318 g     O .bss	00000004 _alt_tick_rate
0000931c g     O .bss	00000004 _alt_nticks
00005978 g     F .text	000000fc read
0000050c g     F .text	00000094 alt_sys_init
000015e8 g     F .text	00000058 alt_up_ps2_clear_fifo
00000a68 g     F .text	00000068 altera_avalon_jtag_uart_close
00005d00 g       *ABS*	00000000 __ram_rwdata_start
00005c58 g       *ABS*	00000000 __ram_rodata_start
00009334 g     O .bss	00000028 __malloc_current_mallinfo
000005a0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00002438 g     F .text	000000a4 alt_get_fd
00005168 g     F .text	00000054 _close_r
000034a0 g     F .text	0000007c memcmp
00000660 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000945c g       *ABS*	00000000 __alt_stack_base
000006b0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00003e10 g     F .text	00000154 __swsetup_r
000045ac g     F .text	00000118 __sfp
000073c4 g     O .rwdata	00000408 __malloc_av_
000046f8 g     F .text	00000004 __sinit_lock_release
00004fcc g     F .text	00000054 __sread
00002330 g     F .text	00000108 alt_find_file
00001a88 g     F .text	000000a4 alt_dev_llist_insert
000058f4 g     F .text	00000024 __malloc_lock
00005a74 g     F .text	000000b0 sbrk
00004300 g     F .text	0000005c _fflush_r
00009308 g       *ABS*	00000000 __bss_start
00004ea4 g     F .text	00000128 memset
00000294 g     F .text	00000078 main
00009310 g     O .bss	00000004 alt_envp
00009328 g     O .bss	00000004 __malloc_max_total_mem
00000600 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00005100 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
000052ac g     F .text	00000014 fclose
00001578 g     F .text	00000070 alt_up_ps2_read_data_byte
00002bb0 g     F .text	0000080c _malloc_r
000077e0 g     O .rwdata	00000004 alt_errno
00004b60 g     F .text	000000c4 _fwalk
00001764 g     F .text	0000003c alt_up_ps2_open_dev
00005430 g     F .text	00000084 .hidden __divsi3
0000472c g     F .text	00000124 _malloc_trim_r
000012e0 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
00005c58 g       *ABS*	00000000 __flash_rodata_start
000004d4 g     F .text	00000038 alt_irq_init
00002104 g     F .text	00000064 alt_release_fd
000011b8 g     F .text	00000034 read_data_valid
00001478 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00005108 g     F .text	00000060 _write_r
000077f4 g     O .rwdata	00000004 _impure_ptr
00009308 g     O .bss	00000004 alt_argc
000040e4 g     F .text	0000021c __sflush_r
00000020 g       .exceptions	00000000 alt_irq_entry
00004714 g     F .text	00000018 __fp_unlock_all
000077cc g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
00007804 g       *ABS*	00000000 _edata
0000945c g       *ABS*	00000000 _end
00000248 g       *ABS*	00000000 __ram_exceptions_end
00000ad0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00002640 g     F .text	0000009c _fputs_r
00005028 g     F .text	0000007c __swrite
000077fc g     O .rwdata	00000004 __malloc_trim_threshold
00002608 g     F .text	00000038 exit
00004c24 g     F .text	000000c4 _fwalk_reent
00001218 g     F .text	000000c8 alt_up_ps2_init
000054b4 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000046f0 g     F .text	00000004 __sfp_lock_release
000055e4 g     F .text	00000034 _exit
000017a0 g     F .text	0000012c alt_alarm_start
00004ce8 g     F .text	000001bc __smakebuf_r
00001410 g     F .text	00000068 alt_up_ps2_wait_for_ack
00003d78 g     F .text	00000098 strlen
00001fb0 g     F .text	00000154 open
00001bbc g     F .text	00000034 alt_icache_flush_all
000026dc g     F .text	00000018 fputs
000077e4 g     O .rwdata	00000004 alt_priority_mask
00001640 g     F .text	0000008c alt_up_ps2_read_fd
000077e8 g     O .rwdata	00000008 alt_alarm_list
00001908 g     F .text	000000d0 close
00000374 g     F .text	00000084 alt_load
000046f4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_onchip_memory2_0+0xf7bfc004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800074 	movhi	r2,1
 140:	10a4d704 	addi	r2,r2,-27812
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10a4d704 	addi	r2,r2,-27812
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_onchip_memory2_0+0xf7bfc12c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_onchip_memory2_0+0xf7bfc120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a6d517 	ldw	r2,-25772(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a6d517 	ldw	r2,-25772(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     24c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     254:	00bffd16 	blt	zero,r2,24c <__alt_mem_onchip_memory2_0+0xf7bfc24c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     258:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     25c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     260:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     264:	d6bdf314 	ori	gp,gp,63436
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     268:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     26c:	10a4c214 	ori	r2,r2,37640

    movhi r3, %hi(__bss_end)
     270:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     274:	18e51714 	ori	r3,r3,37980

    beq r2, r3, 1f
     278:	10c00326 	beq	r2,r3,288 <_start+0x40>

0:
    stw zero, (r2)
     27c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     284:	10fffd36 	bltu	r2,r3,27c <__alt_mem_onchip_memory2_0+0xf7bfc27c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     288:	00003740 	call	374 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     28c:	00003f80 	call	3f8 <alt_main>

00000290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     290:	003fff06 	br	290 <__alt_mem_onchip_memory2_0+0xf7bfc290>

00000294 <main>:
#include "altera_up_avalon_ps2.h"
#include "altera_up_ps2_keyboard.h"
#include "sys/alt_dev.h"

int main()
{
     294:	deffef04 	addi	sp,sp,-68
     298:	dfc01015 	stw	ra,64(sp)
     29c:	df000f15 	stw	fp,60(sp)
     2a0:	df000f04 	addi	fp,sp,60
    alt_putstr("program start");
     2a4:	01000034 	movhi	r4,0
     2a8:	21171604 	addi	r4,r4,23640
     2ac:	00004640 	call	464 <alt_putstr>
    alt_up_ps2_dev ps2S; //set type to keyboard
    unsigned char psChar;
    alt_up_ps2_init(&ps2S);
     2b0:	e13ff104 	addi	r4,fp,-60
     2b4:	00012180 	call	1218 <alt_up_ps2_init>
    alt_putstr("before while loop");
     2b8:	01000034 	movhi	r4,0
     2bc:	21171a04 	addi	r4,r4,23656
     2c0:	00004640 	call	464 <alt_putstr>
    while (1) //infinite while loop to wait for ints && IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE) == 0b01
    {
        alt_up_ps2_read_data_byte(&ps2S, &psChar);
     2c4:	e0bfff04 	addi	r2,fp,-4
     2c8:	100b883a 	mov	r5,r2
     2cc:	e13ff104 	addi	r4,fp,-60
     2d0:	00015780 	call	1578 <alt_up_ps2_read_data_byte>
        if (psChar == "w")
     2d4:	e0bfff03 	ldbu	r2,-4(fp)
     2d8:	10803fcc 	andi	r2,r2,255
     2dc:	1007883a 	mov	r3,r2
     2e0:	00800034 	movhi	r2,0
     2e4:	10971f04 	addi	r2,r2,23676
     2e8:	18bff61e 	bne	r3,r2,2c4 <__alt_mem_onchip_memory2_0+0xf7bfc2c4>
        {
            alt_putstr(psChar);
     2ec:	e0bfff03 	ldbu	r2,-4(fp)
     2f0:	10803fcc 	andi	r2,r2,255
     2f4:	1009883a 	mov	r4,r2
     2f8:	00004640 	call	464 <alt_putstr>
            alt_putstr("state reset");
     2fc:	01000034 	movhi	r4,0
     300:	21172004 	addi	r4,r4,23680
     304:	00004640 	call	464 <alt_putstr>
        }
    }
     308:	003fee06 	br	2c4 <__alt_mem_onchip_memory2_0+0xf7bfc2c4>

0000030c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     30c:	defffc04 	addi	sp,sp,-16
     310:	df000315 	stw	fp,12(sp)
     314:	df000304 	addi	fp,sp,12
     318:	e13ffd15 	stw	r4,-12(fp)
     31c:	e17ffe15 	stw	r5,-8(fp)
     320:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     324:	e0fffe17 	ldw	r3,-8(fp)
     328:	e0bffd17 	ldw	r2,-12(fp)
     32c:	18800c26 	beq	r3,r2,360 <alt_load_section+0x54>
  {
    while( to != end )
     330:	00000806 	br	354 <alt_load_section+0x48>
    {
      *to++ = *from++;
     334:	e0bffe17 	ldw	r2,-8(fp)
     338:	10c00104 	addi	r3,r2,4
     33c:	e0fffe15 	stw	r3,-8(fp)
     340:	e0fffd17 	ldw	r3,-12(fp)
     344:	19000104 	addi	r4,r3,4
     348:	e13ffd15 	stw	r4,-12(fp)
     34c:	18c00017 	ldw	r3,0(r3)
     350:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     354:	e0fffe17 	ldw	r3,-8(fp)
     358:	e0bfff17 	ldw	r2,-4(fp)
     35c:	18bff51e 	bne	r3,r2,334 <__alt_mem_onchip_memory2_0+0xf7bfc334>
    {
      *to++ = *from++;
    }
  }
}
     360:	0001883a 	nop
     364:	e037883a 	mov	sp,fp
     368:	df000017 	ldw	fp,0(sp)
     36c:	dec00104 	addi	sp,sp,4
     370:	f800283a 	ret

00000374 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     374:	defffe04 	addi	sp,sp,-8
     378:	dfc00115 	stw	ra,4(sp)
     37c:	df000015 	stw	fp,0(sp)
     380:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     384:	01800034 	movhi	r6,0
     388:	319e0104 	addi	r6,r6,30724
     38c:	01400034 	movhi	r5,0
     390:	29574004 	addi	r5,r5,23808
     394:	01000034 	movhi	r4,0
     398:	211e0104 	addi	r4,r4,30724
     39c:	000030c0 	call	30c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     3a0:	01800034 	movhi	r6,0
     3a4:	31809204 	addi	r6,r6,584
     3a8:	01400034 	movhi	r5,0
     3ac:	29400804 	addi	r5,r5,32
     3b0:	01000034 	movhi	r4,0
     3b4:	21000804 	addi	r4,r4,32
     3b8:	000030c0 	call	30c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     3bc:	01800034 	movhi	r6,0
     3c0:	31974004 	addi	r6,r6,23808
     3c4:	01400034 	movhi	r5,0
     3c8:	29571604 	addi	r5,r5,23640
     3cc:	01000034 	movhi	r4,0
     3d0:	21171604 	addi	r4,r4,23640
     3d4:	000030c0 	call	30c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     3d8:	00019d80 	call	19d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
     3dc:	0001bbc0 	call	1bbc <alt_icache_flush_all>
}
     3e0:	0001883a 	nop
     3e4:	e037883a 	mov	sp,fp
     3e8:	dfc00117 	ldw	ra,4(sp)
     3ec:	df000017 	ldw	fp,0(sp)
     3f0:	dec00204 	addi	sp,sp,8
     3f4:	f800283a 	ret

000003f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     3f8:	defffd04 	addi	sp,sp,-12
     3fc:	dfc00215 	stw	ra,8(sp)
     400:	df000115 	stw	fp,4(sp)
     404:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     408:	0009883a 	mov	r4,zero
     40c:	00004d40 	call	4d4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     410:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     414:	000050c0 	call	50c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     418:	01800034 	movhi	r6,0
     41c:	31972304 	addi	r6,r6,23692
     420:	01400034 	movhi	r5,0
     424:	29572304 	addi	r5,r5,23692
     428:	01000034 	movhi	r4,0
     42c:	21172304 	addi	r4,r4,23692
     430:	0001cb40 	call	1cb4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     434:	d0a6cf17 	ldw	r2,-25796(gp)
     438:	d0e6d017 	ldw	r3,-25792(gp)
     43c:	d126d117 	ldw	r4,-25788(gp)
     440:	200d883a 	mov	r6,r4
     444:	180b883a 	mov	r5,r3
     448:	1009883a 	mov	r4,r2
     44c:	00002940 	call	294 <main>
     450:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     454:	01000044 	movi	r4,1
     458:	00019080 	call	1908 <close>
  exit (result);
     45c:	e13fff17 	ldw	r4,-4(fp)
     460:	00026080 	call	2608 <exit>

00000464 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
     464:	defffd04 	addi	sp,sp,-12
     468:	dfc00215 	stw	ra,8(sp)
     46c:	df000115 	stw	fp,4(sp)
     470:	df000104 	addi	fp,sp,4
     474:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
     478:	d0a00a17 	ldw	r2,-32728(gp)
     47c:	10800217 	ldw	r2,8(r2)
     480:	100b883a 	mov	r5,r2
     484:	e13fff17 	ldw	r4,-4(fp)
     488:	00026dc0 	call	26dc <fputs>
#endif
#endif
}
     48c:	e037883a 	mov	sp,fp
     490:	dfc00117 	ldw	ra,4(sp)
     494:	df000017 	ldw	fp,0(sp)
     498:	dec00204 	addi	sp,sp,8
     49c:	f800283a 	ret

000004a0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     4a0:	defffd04 	addi	sp,sp,-12
     4a4:	dfc00215 	stw	ra,8(sp)
     4a8:	df000115 	stw	fp,4(sp)
     4ac:	df000104 	addi	fp,sp,4
     4b0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     4b4:	d1600204 	addi	r5,gp,-32760
     4b8:	e13fff17 	ldw	r4,-4(fp)
     4bc:	0001a880 	call	1a88 <alt_dev_llist_insert>
}
     4c0:	e037883a 	mov	sp,fp
     4c4:	dfc00117 	ldw	ra,4(sp)
     4c8:	df000017 	ldw	fp,0(sp)
     4cc:	dec00204 	addi	sp,sp,8
     4d0:	f800283a 	ret

000004d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     4d4:	defffd04 	addi	sp,sp,-12
     4d8:	dfc00215 	stw	ra,8(sp)
     4dc:	df000115 	stw	fp,4(sp)
     4e0:	df000104 	addi	fp,sp,4
     4e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
     4e8:	000230c0 	call	230c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     4ec:	00800044 	movi	r2,1
     4f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     4f4:	0001883a 	nop
     4f8:	e037883a 	mov	sp,fp
     4fc:	dfc00117 	ldw	ra,4(sp)
     500:	df000017 	ldw	fp,0(sp)
     504:	dec00204 	addi	sp,sp,8
     508:	f800283a 	ret

0000050c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     50c:	defffe04 	addi	sp,sp,-8
     510:	dfc00115 	stw	ra,4(sp)
     514:	df000015 	stw	fp,0(sp)
     518:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIRES_TIMER_0, hires_timer_0);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
     51c:	01c0fa04 	movi	r7,1000
     520:	01800044 	movi	r6,1
     524:	000b883a 	mov	r5,zero
     528:	01021074 	movhi	r4,2113
     52c:	21240804 	addi	r4,r4,-28640
     530:	000107c0 	call	107c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
     534:	000d883a 	mov	r6,zero
     538:	000b883a 	mov	r5,zero
     53c:	01000034 	movhi	r4,0
     540:	21174a04 	addi	r4,r4,23848
     544:	00007040 	call	704 <altera_avalon_jtag_uart_init>
     548:	01000034 	movhi	r4,0
     54c:	21174004 	addi	r4,r4,23808
     550:	00004a00 	call	4a0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
     554:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
     558:	01000034 	movhi	r4,0
     55c:	211b5804 	addi	r4,r4,28000
     560:	00004a00 	call	4a0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
     564:	01000034 	movhi	r4,0
     568:	211b6404 	addi	r4,r4,28048
     56c:	00004a00 	call	4a0 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_0, ps2_0);
     570:	01000034 	movhi	r4,0
     574:	211b7004 	addi	r4,r4,28096
     578:	00012180 	call	1218 <alt_up_ps2_init>
     57c:	01000034 	movhi	r4,0
     580:	211b7004 	addi	r4,r4,28096
     584:	00004a00 	call	4a0 <alt_dev_reg>
}
     588:	0001883a 	nop
     58c:	e037883a 	mov	sp,fp
     590:	dfc00117 	ldw	ra,4(sp)
     594:	df000017 	ldw	fp,0(sp)
     598:	dec00204 	addi	sp,sp,8
     59c:	f800283a 	ret

000005a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     5a0:	defffa04 	addi	sp,sp,-24
     5a4:	dfc00515 	stw	ra,20(sp)
     5a8:	df000415 	stw	fp,16(sp)
     5ac:	df000404 	addi	fp,sp,16
     5b0:	e13ffd15 	stw	r4,-12(fp)
     5b4:	e17ffe15 	stw	r5,-8(fp)
     5b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     5bc:	e0bffd17 	ldw	r2,-12(fp)
     5c0:	10800017 	ldw	r2,0(r2)
     5c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     5c8:	e0bffc17 	ldw	r2,-16(fp)
     5cc:	10c00a04 	addi	r3,r2,40
     5d0:	e0bffd17 	ldw	r2,-12(fp)
     5d4:	10800217 	ldw	r2,8(r2)
     5d8:	100f883a 	mov	r7,r2
     5dc:	e1bfff17 	ldw	r6,-4(fp)
     5e0:	e17ffe17 	ldw	r5,-8(fp)
     5e4:	1809883a 	mov	r4,r3
     5e8:	0000bc00 	call	bc0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     5ec:	e037883a 	mov	sp,fp
     5f0:	dfc00117 	ldw	ra,4(sp)
     5f4:	df000017 	ldw	fp,0(sp)
     5f8:	dec00204 	addi	sp,sp,8
     5fc:	f800283a 	ret

00000600 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     600:	defffa04 	addi	sp,sp,-24
     604:	dfc00515 	stw	ra,20(sp)
     608:	df000415 	stw	fp,16(sp)
     60c:	df000404 	addi	fp,sp,16
     610:	e13ffd15 	stw	r4,-12(fp)
     614:	e17ffe15 	stw	r5,-8(fp)
     618:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     61c:	e0bffd17 	ldw	r2,-12(fp)
     620:	10800017 	ldw	r2,0(r2)
     624:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     628:	e0bffc17 	ldw	r2,-16(fp)
     62c:	10c00a04 	addi	r3,r2,40
     630:	e0bffd17 	ldw	r2,-12(fp)
     634:	10800217 	ldw	r2,8(r2)
     638:	100f883a 	mov	r7,r2
     63c:	e1bfff17 	ldw	r6,-4(fp)
     640:	e17ffe17 	ldw	r5,-8(fp)
     644:	1809883a 	mov	r4,r3
     648:	0000ddc0 	call	ddc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     64c:	e037883a 	mov	sp,fp
     650:	dfc00117 	ldw	ra,4(sp)
     654:	df000017 	ldw	fp,0(sp)
     658:	dec00204 	addi	sp,sp,8
     65c:	f800283a 	ret

00000660 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     660:	defffc04 	addi	sp,sp,-16
     664:	dfc00315 	stw	ra,12(sp)
     668:	df000215 	stw	fp,8(sp)
     66c:	df000204 	addi	fp,sp,8
     670:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     674:	e0bfff17 	ldw	r2,-4(fp)
     678:	10800017 	ldw	r2,0(r2)
     67c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     680:	e0bffe17 	ldw	r2,-8(fp)
     684:	10c00a04 	addi	r3,r2,40
     688:	e0bfff17 	ldw	r2,-4(fp)
     68c:	10800217 	ldw	r2,8(r2)
     690:	100b883a 	mov	r5,r2
     694:	1809883a 	mov	r4,r3
     698:	0000a680 	call	a68 <altera_avalon_jtag_uart_close>
}
     69c:	e037883a 	mov	sp,fp
     6a0:	dfc00117 	ldw	ra,4(sp)
     6a4:	df000017 	ldw	fp,0(sp)
     6a8:	dec00204 	addi	sp,sp,8
     6ac:	f800283a 	ret

000006b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     6b0:	defffa04 	addi	sp,sp,-24
     6b4:	dfc00515 	stw	ra,20(sp)
     6b8:	df000415 	stw	fp,16(sp)
     6bc:	df000404 	addi	fp,sp,16
     6c0:	e13ffd15 	stw	r4,-12(fp)
     6c4:	e17ffe15 	stw	r5,-8(fp)
     6c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     6cc:	e0bffd17 	ldw	r2,-12(fp)
     6d0:	10800017 	ldw	r2,0(r2)
     6d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     6d8:	e0bffc17 	ldw	r2,-16(fp)
     6dc:	10800a04 	addi	r2,r2,40
     6e0:	e1bfff17 	ldw	r6,-4(fp)
     6e4:	e17ffe17 	ldw	r5,-8(fp)
     6e8:	1009883a 	mov	r4,r2
     6ec:	0000ad00 	call	ad0 <altera_avalon_jtag_uart_ioctl>
}
     6f0:	e037883a 	mov	sp,fp
     6f4:	dfc00117 	ldw	ra,4(sp)
     6f8:	df000017 	ldw	fp,0(sp)
     6fc:	dec00204 	addi	sp,sp,8
     700:	f800283a 	ret

00000704 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     704:	defffb04 	addi	sp,sp,-20
     708:	dfc00415 	stw	ra,16(sp)
     70c:	df000315 	stw	fp,12(sp)
     710:	df000304 	addi	fp,sp,12
     714:	e13ffd15 	stw	r4,-12(fp)
     718:	e17ffe15 	stw	r5,-8(fp)
     71c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     720:	e0bffd17 	ldw	r2,-12(fp)
     724:	00c00044 	movi	r3,1
     728:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     72c:	e0bffd17 	ldw	r2,-12(fp)
     730:	10800017 	ldw	r2,0(r2)
     734:	10800104 	addi	r2,r2,4
     738:	1007883a 	mov	r3,r2
     73c:	e0bffd17 	ldw	r2,-12(fp)
     740:	10800817 	ldw	r2,32(r2)
     744:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     748:	e0bfff17 	ldw	r2,-4(fp)
     74c:	01800034 	movhi	r6,0
     750:	3181ee04 	addi	r6,r6,1976
     754:	e17ffd17 	ldw	r5,-12(fp)
     758:	1009883a 	mov	r4,r2
     75c:	0001d300 	call	1d30 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     760:	e0bffd17 	ldw	r2,-12(fp)
     764:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     768:	e0bffd17 	ldw	r2,-12(fp)
     76c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     770:	d0e6d317 	ldw	r3,-25780(gp)
     774:	e1fffd17 	ldw	r7,-12(fp)
     778:	01800034 	movhi	r6,0
     77c:	31827204 	addi	r6,r6,2504
     780:	180b883a 	mov	r5,r3
     784:	1009883a 	mov	r4,r2
     788:	00017a00 	call	17a0 <alt_alarm_start>
     78c:	1000040e 	bge	r2,zero,7a0 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     790:	e0fffd17 	ldw	r3,-12(fp)
     794:	00a00034 	movhi	r2,32768
     798:	10bfffc4 	addi	r2,r2,-1
     79c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     7a0:	0001883a 	nop
     7a4:	e037883a 	mov	sp,fp
     7a8:	dfc00117 	ldw	ra,4(sp)
     7ac:	df000017 	ldw	fp,0(sp)
     7b0:	dec00204 	addi	sp,sp,8
     7b4:	f800283a 	ret

000007b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     7b8:	defff704 	addi	sp,sp,-36
     7bc:	df000815 	stw	fp,32(sp)
     7c0:	df000804 	addi	fp,sp,32
     7c4:	e13ffe15 	stw	r4,-8(fp)
     7c8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     7cc:	e0bffe17 	ldw	r2,-8(fp)
     7d0:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
     7d4:	e0bffa17 	ldw	r2,-24(fp)
     7d8:	10800017 	ldw	r2,0(r2)
     7dc:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     7e0:	e0bffb17 	ldw	r2,-20(fp)
     7e4:	10800104 	addi	r2,r2,4
     7e8:	10800037 	ldwio	r2,0(r2)
     7ec:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     7f0:	e0bffc17 	ldw	r2,-16(fp)
     7f4:	1080c00c 	andi	r2,r2,768
     7f8:	10006d26 	beq	r2,zero,9b0 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     7fc:	e0bffc17 	ldw	r2,-16(fp)
     800:	1080400c 	andi	r2,r2,256
     804:	10003526 	beq	r2,zero,8dc <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     808:	00800074 	movhi	r2,1
     80c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     810:	e0bffa17 	ldw	r2,-24(fp)
     814:	10800a17 	ldw	r2,40(r2)
     818:	10800044 	addi	r2,r2,1
     81c:	1081ffcc 	andi	r2,r2,2047
     820:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
     824:	e0bffa17 	ldw	r2,-24(fp)
     828:	10c00b17 	ldw	r3,44(r2)
     82c:	e0bffd17 	ldw	r2,-12(fp)
     830:	18801526 	beq	r3,r2,888 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     834:	e0bffb17 	ldw	r2,-20(fp)
     838:	10800037 	ldwio	r2,0(r2)
     83c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     840:	e0bff817 	ldw	r2,-32(fp)
     844:	10a0000c 	andi	r2,r2,32768
     848:	10001126 	beq	r2,zero,890 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     84c:	e0bffa17 	ldw	r2,-24(fp)
     850:	10800a17 	ldw	r2,40(r2)
     854:	e0fff817 	ldw	r3,-32(fp)
     858:	1809883a 	mov	r4,r3
     85c:	e0fffa17 	ldw	r3,-24(fp)
     860:	1885883a 	add	r2,r3,r2
     864:	10800e04 	addi	r2,r2,56
     868:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     86c:	e0bffa17 	ldw	r2,-24(fp)
     870:	10800a17 	ldw	r2,40(r2)
     874:	10800044 	addi	r2,r2,1
     878:	10c1ffcc 	andi	r3,r2,2047
     87c:	e0bffa17 	ldw	r2,-24(fp)
     880:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     884:	003fe206 	br	810 <__alt_mem_onchip_memory2_0+0xf7bfc810>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
     888:	0001883a 	nop
     88c:	00000106 	br	894 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
     890:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     894:	e0bff817 	ldw	r2,-32(fp)
     898:	10bfffec 	andhi	r2,r2,65535
     89c:	10000f26 	beq	r2,zero,8dc <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     8a0:	e0bffa17 	ldw	r2,-24(fp)
     8a4:	10c00817 	ldw	r3,32(r2)
     8a8:	00bfff84 	movi	r2,-2
     8ac:	1886703a 	and	r3,r3,r2
     8b0:	e0bffa17 	ldw	r2,-24(fp)
     8b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     8b8:	e0bffb17 	ldw	r2,-20(fp)
     8bc:	10800104 	addi	r2,r2,4
     8c0:	1007883a 	mov	r3,r2
     8c4:	e0bffa17 	ldw	r2,-24(fp)
     8c8:	10800817 	ldw	r2,32(r2)
     8cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     8d0:	e0bffb17 	ldw	r2,-20(fp)
     8d4:	10800104 	addi	r2,r2,4
     8d8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     8dc:	e0bffc17 	ldw	r2,-16(fp)
     8e0:	1080800c 	andi	r2,r2,512
     8e4:	103fbe26 	beq	r2,zero,7e0 <__alt_mem_onchip_memory2_0+0xf7bfc7e0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     8e8:	e0bffc17 	ldw	r2,-16(fp)
     8ec:	1004d43a 	srli	r2,r2,16
     8f0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     8f4:	00001406 	br	948 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     8f8:	e0bffb17 	ldw	r2,-20(fp)
     8fc:	e0fffa17 	ldw	r3,-24(fp)
     900:	18c00d17 	ldw	r3,52(r3)
     904:	e13ffa17 	ldw	r4,-24(fp)
     908:	20c7883a 	add	r3,r4,r3
     90c:	18c20e04 	addi	r3,r3,2104
     910:	18c00003 	ldbu	r3,0(r3)
     914:	18c03fcc 	andi	r3,r3,255
     918:	18c0201c 	xori	r3,r3,128
     91c:	18ffe004 	addi	r3,r3,-128
     920:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     924:	e0bffa17 	ldw	r2,-24(fp)
     928:	10800d17 	ldw	r2,52(r2)
     92c:	10800044 	addi	r2,r2,1
     930:	10c1ffcc 	andi	r3,r2,2047
     934:	e0bffa17 	ldw	r2,-24(fp)
     938:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     93c:	e0bff917 	ldw	r2,-28(fp)
     940:	10bfffc4 	addi	r2,r2,-1
     944:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     948:	e0bff917 	ldw	r2,-28(fp)
     94c:	10000526 	beq	r2,zero,964 <altera_avalon_jtag_uart_irq+0x1ac>
     950:	e0bffa17 	ldw	r2,-24(fp)
     954:	10c00d17 	ldw	r3,52(r2)
     958:	e0bffa17 	ldw	r2,-24(fp)
     95c:	10800c17 	ldw	r2,48(r2)
     960:	18bfe51e 	bne	r3,r2,8f8 <__alt_mem_onchip_memory2_0+0xf7bfc8f8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     964:	e0bff917 	ldw	r2,-28(fp)
     968:	103f9d26 	beq	r2,zero,7e0 <__alt_mem_onchip_memory2_0+0xf7bfc7e0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     96c:	e0bffa17 	ldw	r2,-24(fp)
     970:	10c00817 	ldw	r3,32(r2)
     974:	00bfff44 	movi	r2,-3
     978:	1886703a 	and	r3,r3,r2
     97c:	e0bffa17 	ldw	r2,-24(fp)
     980:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     984:	e0bffa17 	ldw	r2,-24(fp)
     988:	10800017 	ldw	r2,0(r2)
     98c:	10800104 	addi	r2,r2,4
     990:	1007883a 	mov	r3,r2
     994:	e0bffa17 	ldw	r2,-24(fp)
     998:	10800817 	ldw	r2,32(r2)
     99c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     9a0:	e0bffb17 	ldw	r2,-20(fp)
     9a4:	10800104 	addi	r2,r2,4
     9a8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
     9ac:	003f8c06 	br	7e0 <__alt_mem_onchip_memory2_0+0xf7bfc7e0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
     9b0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
     9b4:	0001883a 	nop
     9b8:	e037883a 	mov	sp,fp
     9bc:	df000017 	ldw	fp,0(sp)
     9c0:	dec00104 	addi	sp,sp,4
     9c4:	f800283a 	ret

000009c8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     9c8:	defff804 	addi	sp,sp,-32
     9cc:	df000715 	stw	fp,28(sp)
     9d0:	df000704 	addi	fp,sp,28
     9d4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     9d8:	e0bffb17 	ldw	r2,-20(fp)
     9dc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     9e0:	e0bff917 	ldw	r2,-28(fp)
     9e4:	10800017 	ldw	r2,0(r2)
     9e8:	10800104 	addi	r2,r2,4
     9ec:	10800037 	ldwio	r2,0(r2)
     9f0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     9f4:	e0bffa17 	ldw	r2,-24(fp)
     9f8:	1081000c 	andi	r2,r2,1024
     9fc:	10000b26 	beq	r2,zero,a2c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     a00:	e0bff917 	ldw	r2,-28(fp)
     a04:	10800017 	ldw	r2,0(r2)
     a08:	10800104 	addi	r2,r2,4
     a0c:	1007883a 	mov	r3,r2
     a10:	e0bff917 	ldw	r2,-28(fp)
     a14:	10800817 	ldw	r2,32(r2)
     a18:	10810014 	ori	r2,r2,1024
     a1c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     a20:	e0bff917 	ldw	r2,-28(fp)
     a24:	10000915 	stw	zero,36(r2)
     a28:	00000a06 	br	a54 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     a2c:	e0bff917 	ldw	r2,-28(fp)
     a30:	10c00917 	ldw	r3,36(r2)
     a34:	00a00034 	movhi	r2,32768
     a38:	10bfff04 	addi	r2,r2,-4
     a3c:	10c00536 	bltu	r2,r3,a54 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
     a40:	e0bff917 	ldw	r2,-28(fp)
     a44:	10800917 	ldw	r2,36(r2)
     a48:	10c00044 	addi	r3,r2,1
     a4c:	e0bff917 	ldw	r2,-28(fp)
     a50:	10c00915 	stw	r3,36(r2)
     a54:	d0a6d317 	ldw	r2,-25780(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     a58:	e037883a 	mov	sp,fp
     a5c:	df000017 	ldw	fp,0(sp)
     a60:	dec00104 	addi	sp,sp,4
     a64:	f800283a 	ret

00000a68 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     a68:	defffd04 	addi	sp,sp,-12
     a6c:	df000215 	stw	fp,8(sp)
     a70:	df000204 	addi	fp,sp,8
     a74:	e13ffe15 	stw	r4,-8(fp)
     a78:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     a7c:	00000506 	br	a94 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
     a80:	e0bfff17 	ldw	r2,-4(fp)
     a84:	1090000c 	andi	r2,r2,16384
     a88:	10000226 	beq	r2,zero,a94 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
     a8c:	00bffd44 	movi	r2,-11
     a90:	00000b06 	br	ac0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     a94:	e0bffe17 	ldw	r2,-8(fp)
     a98:	10c00d17 	ldw	r3,52(r2)
     a9c:	e0bffe17 	ldw	r2,-8(fp)
     aa0:	10800c17 	ldw	r2,48(r2)
     aa4:	18800526 	beq	r3,r2,abc <altera_avalon_jtag_uart_close+0x54>
     aa8:	e0bffe17 	ldw	r2,-8(fp)
     aac:	10c00917 	ldw	r3,36(r2)
     ab0:	e0bffe17 	ldw	r2,-8(fp)
     ab4:	10800117 	ldw	r2,4(r2)
     ab8:	18bff136 	bltu	r3,r2,a80 <__alt_mem_onchip_memory2_0+0xf7bfca80>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
     abc:	0005883a 	mov	r2,zero
}
     ac0:	e037883a 	mov	sp,fp
     ac4:	df000017 	ldw	fp,0(sp)
     ac8:	dec00104 	addi	sp,sp,4
     acc:	f800283a 	ret

00000ad0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     ad0:	defffa04 	addi	sp,sp,-24
     ad4:	df000515 	stw	fp,20(sp)
     ad8:	df000504 	addi	fp,sp,20
     adc:	e13ffd15 	stw	r4,-12(fp)
     ae0:	e17ffe15 	stw	r5,-8(fp)
     ae4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
     ae8:	00bff9c4 	movi	r2,-25
     aec:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
     af0:	e0bffe17 	ldw	r2,-8(fp)
     af4:	10da8060 	cmpeqi	r3,r2,27137
     af8:	1800031e 	bne	r3,zero,b08 <altera_avalon_jtag_uart_ioctl+0x38>
     afc:	109a80a0 	cmpeqi	r2,r2,27138
     b00:	1000181e 	bne	r2,zero,b64 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
     b04:	00002906 	br	bac <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     b08:	e0bffd17 	ldw	r2,-12(fp)
     b0c:	10c00117 	ldw	r3,4(r2)
     b10:	00a00034 	movhi	r2,32768
     b14:	10bfffc4 	addi	r2,r2,-1
     b18:	18802126 	beq	r3,r2,ba0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
     b1c:	e0bfff17 	ldw	r2,-4(fp)
     b20:	10800017 	ldw	r2,0(r2)
     b24:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     b28:	e0bffc17 	ldw	r2,-16(fp)
     b2c:	10800090 	cmplti	r2,r2,2
     b30:	1000061e 	bne	r2,zero,b4c <altera_avalon_jtag_uart_ioctl+0x7c>
     b34:	e0fffc17 	ldw	r3,-16(fp)
     b38:	00a00034 	movhi	r2,32768
     b3c:	10bfffc4 	addi	r2,r2,-1
     b40:	18800226 	beq	r3,r2,b4c <altera_avalon_jtag_uart_ioctl+0x7c>
     b44:	e0bffc17 	ldw	r2,-16(fp)
     b48:	00000206 	br	b54 <altera_avalon_jtag_uart_ioctl+0x84>
     b4c:	00a00034 	movhi	r2,32768
     b50:	10bfff84 	addi	r2,r2,-2
     b54:	e0fffd17 	ldw	r3,-12(fp)
     b58:	18800115 	stw	r2,4(r3)
      rc = 0;
     b5c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     b60:	00000f06 	br	ba0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     b64:	e0bffd17 	ldw	r2,-12(fp)
     b68:	10c00117 	ldw	r3,4(r2)
     b6c:	00a00034 	movhi	r2,32768
     b70:	10bfffc4 	addi	r2,r2,-1
     b74:	18800c26 	beq	r3,r2,ba8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     b78:	e0bffd17 	ldw	r2,-12(fp)
     b7c:	10c00917 	ldw	r3,36(r2)
     b80:	e0bffd17 	ldw	r2,-12(fp)
     b84:	10800117 	ldw	r2,4(r2)
     b88:	1885803a 	cmpltu	r2,r3,r2
     b8c:	10c03fcc 	andi	r3,r2,255
     b90:	e0bfff17 	ldw	r2,-4(fp)
     b94:	10c00015 	stw	r3,0(r2)
      rc = 0;
     b98:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     b9c:	00000206 	br	ba8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
     ba0:	0001883a 	nop
     ba4:	00000106 	br	bac <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
     ba8:	0001883a 	nop

  default:
    break;
  }

  return rc;
     bac:	e0bffb17 	ldw	r2,-20(fp)
}
     bb0:	e037883a 	mov	sp,fp
     bb4:	df000017 	ldw	fp,0(sp)
     bb8:	dec00104 	addi	sp,sp,4
     bbc:	f800283a 	ret

00000bc0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     bc0:	defff304 	addi	sp,sp,-52
     bc4:	dfc00c15 	stw	ra,48(sp)
     bc8:	df000b15 	stw	fp,44(sp)
     bcc:	df000b04 	addi	fp,sp,44
     bd0:	e13ffc15 	stw	r4,-16(fp)
     bd4:	e17ffd15 	stw	r5,-12(fp)
     bd8:	e1bffe15 	stw	r6,-8(fp)
     bdc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
     be0:	e0bffd17 	ldw	r2,-12(fp)
     be4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     be8:	00004706 	br	d08 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     bec:	e0bffc17 	ldw	r2,-16(fp)
     bf0:	10800a17 	ldw	r2,40(r2)
     bf4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
     bf8:	e0bffc17 	ldw	r2,-16(fp)
     bfc:	10800b17 	ldw	r2,44(r2)
     c00:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
     c04:	e0fff717 	ldw	r3,-36(fp)
     c08:	e0bff817 	ldw	r2,-32(fp)
     c0c:	18800536 	bltu	r3,r2,c24 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
     c10:	e0fff717 	ldw	r3,-36(fp)
     c14:	e0bff817 	ldw	r2,-32(fp)
     c18:	1885c83a 	sub	r2,r3,r2
     c1c:	e0bff615 	stw	r2,-40(fp)
     c20:	00000406 	br	c34 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     c24:	00c20004 	movi	r3,2048
     c28:	e0bff817 	ldw	r2,-32(fp)
     c2c:	1885c83a 	sub	r2,r3,r2
     c30:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
     c34:	e0bff617 	ldw	r2,-40(fp)
     c38:	10001e26 	beq	r2,zero,cb4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
     c3c:	e0fffe17 	ldw	r3,-8(fp)
     c40:	e0bff617 	ldw	r2,-40(fp)
     c44:	1880022e 	bgeu	r3,r2,c50 <altera_avalon_jtag_uart_read+0x90>
        n = space;
     c48:	e0bffe17 	ldw	r2,-8(fp)
     c4c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
     c50:	e0bffc17 	ldw	r2,-16(fp)
     c54:	10c00e04 	addi	r3,r2,56
     c58:	e0bff817 	ldw	r2,-32(fp)
     c5c:	1885883a 	add	r2,r3,r2
     c60:	e1bff617 	ldw	r6,-40(fp)
     c64:	100b883a 	mov	r5,r2
     c68:	e13ff517 	ldw	r4,-44(fp)
     c6c:	000351c0 	call	351c <memcpy>
      ptr   += n;
     c70:	e0fff517 	ldw	r3,-44(fp)
     c74:	e0bff617 	ldw	r2,-40(fp)
     c78:	1885883a 	add	r2,r3,r2
     c7c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
     c80:	e0fffe17 	ldw	r3,-8(fp)
     c84:	e0bff617 	ldw	r2,-40(fp)
     c88:	1885c83a 	sub	r2,r3,r2
     c8c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     c90:	e0fff817 	ldw	r3,-32(fp)
     c94:	e0bff617 	ldw	r2,-40(fp)
     c98:	1885883a 	add	r2,r3,r2
     c9c:	10c1ffcc 	andi	r3,r2,2047
     ca0:	e0bffc17 	ldw	r2,-16(fp)
     ca4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
     ca8:	e0bffe17 	ldw	r2,-8(fp)
     cac:	00bfcf16 	blt	zero,r2,bec <__alt_mem_onchip_memory2_0+0xf7bfcbec>
     cb0:	00000106 	br	cb8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
     cb4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
     cb8:	e0fff517 	ldw	r3,-44(fp)
     cbc:	e0bffd17 	ldw	r2,-12(fp)
     cc0:	1880141e 	bne	r3,r2,d14 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     cc4:	e0bfff17 	ldw	r2,-4(fp)
     cc8:	1090000c 	andi	r2,r2,16384
     ccc:	1000131e 	bne	r2,zero,d1c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     cd0:	0001883a 	nop
     cd4:	e0bffc17 	ldw	r2,-16(fp)
     cd8:	10c00a17 	ldw	r3,40(r2)
     cdc:	e0bff717 	ldw	r2,-36(fp)
     ce0:	1880051e 	bne	r3,r2,cf8 <altera_avalon_jtag_uart_read+0x138>
     ce4:	e0bffc17 	ldw	r2,-16(fp)
     ce8:	10c00917 	ldw	r3,36(r2)
     cec:	e0bffc17 	ldw	r2,-16(fp)
     cf0:	10800117 	ldw	r2,4(r2)
     cf4:	18bff736 	bltu	r3,r2,cd4 <__alt_mem_onchip_memory2_0+0xf7bfccd4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     cf8:	e0bffc17 	ldw	r2,-16(fp)
     cfc:	10c00a17 	ldw	r3,40(r2)
     d00:	e0bff717 	ldw	r2,-36(fp)
     d04:	18800726 	beq	r3,r2,d24 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     d08:	e0bffe17 	ldw	r2,-8(fp)
     d0c:	00bfb716 	blt	zero,r2,bec <__alt_mem_onchip_memory2_0+0xf7bfcbec>
     d10:	00000506 	br	d28 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
     d14:	0001883a 	nop
     d18:	00000306 	br	d28 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
     d1c:	0001883a 	nop
     d20:	00000106 	br	d28 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
     d24:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
     d28:	e0fff517 	ldw	r3,-44(fp)
     d2c:	e0bffd17 	ldw	r2,-12(fp)
     d30:	18801826 	beq	r3,r2,d94 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     d34:	0005303a 	rdctl	r2,status
     d38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     d3c:	e0fffb17 	ldw	r3,-20(fp)
     d40:	00bfff84 	movi	r2,-2
     d44:	1884703a 	and	r2,r3,r2
     d48:	1001703a 	wrctl	status,r2
  
  return context;
     d4c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
     d50:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     d54:	e0bffc17 	ldw	r2,-16(fp)
     d58:	10800817 	ldw	r2,32(r2)
     d5c:	10c00054 	ori	r3,r2,1
     d60:	e0bffc17 	ldw	r2,-16(fp)
     d64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     d68:	e0bffc17 	ldw	r2,-16(fp)
     d6c:	10800017 	ldw	r2,0(r2)
     d70:	10800104 	addi	r2,r2,4
     d74:	1007883a 	mov	r3,r2
     d78:	e0bffc17 	ldw	r2,-16(fp)
     d7c:	10800817 	ldw	r2,32(r2)
     d80:	18800035 	stwio	r2,0(r3)
     d84:	e0bffa17 	ldw	r2,-24(fp)
     d88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     d8c:	e0bff917 	ldw	r2,-28(fp)
     d90:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
     d94:	e0fff517 	ldw	r3,-44(fp)
     d98:	e0bffd17 	ldw	r2,-12(fp)
     d9c:	18800426 	beq	r3,r2,db0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
     da0:	e0fff517 	ldw	r3,-44(fp)
     da4:	e0bffd17 	ldw	r2,-12(fp)
     da8:	1885c83a 	sub	r2,r3,r2
     dac:	00000606 	br	dc8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
     db0:	e0bfff17 	ldw	r2,-4(fp)
     db4:	1090000c 	andi	r2,r2,16384
     db8:	10000226 	beq	r2,zero,dc4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
     dbc:	00bffd44 	movi	r2,-11
     dc0:	00000106 	br	dc8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
     dc4:	00bffec4 	movi	r2,-5
}
     dc8:	e037883a 	mov	sp,fp
     dcc:	dfc00117 	ldw	ra,4(sp)
     dd0:	df000017 	ldw	fp,0(sp)
     dd4:	dec00204 	addi	sp,sp,8
     dd8:	f800283a 	ret

00000ddc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     ddc:	defff304 	addi	sp,sp,-52
     de0:	dfc00c15 	stw	ra,48(sp)
     de4:	df000b15 	stw	fp,44(sp)
     de8:	df000b04 	addi	fp,sp,44
     dec:	e13ffc15 	stw	r4,-16(fp)
     df0:	e17ffd15 	stw	r5,-12(fp)
     df4:	e1bffe15 	stw	r6,-8(fp)
     df8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
     dfc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
     e00:	e0bffd17 	ldw	r2,-12(fp)
     e04:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     e08:	00003706 	br	ee8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
     e0c:	e0bffc17 	ldw	r2,-16(fp)
     e10:	10800c17 	ldw	r2,48(r2)
     e14:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
     e18:	e0bffc17 	ldw	r2,-16(fp)
     e1c:	10800d17 	ldw	r2,52(r2)
     e20:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
     e24:	e0fff917 	ldw	r3,-28(fp)
     e28:	e0bff517 	ldw	r2,-44(fp)
     e2c:	1880062e 	bgeu	r3,r2,e48 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
     e30:	e0fff517 	ldw	r3,-44(fp)
     e34:	e0bff917 	ldw	r2,-28(fp)
     e38:	1885c83a 	sub	r2,r3,r2
     e3c:	10bfffc4 	addi	r2,r2,-1
     e40:	e0bff615 	stw	r2,-40(fp)
     e44:	00000b06 	br	e74 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
     e48:	e0bff517 	ldw	r2,-44(fp)
     e4c:	10000526 	beq	r2,zero,e64 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     e50:	00c20004 	movi	r3,2048
     e54:	e0bff917 	ldw	r2,-28(fp)
     e58:	1885c83a 	sub	r2,r3,r2
     e5c:	e0bff615 	stw	r2,-40(fp)
     e60:	00000406 	br	e74 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     e64:	00c1ffc4 	movi	r3,2047
     e68:	e0bff917 	ldw	r2,-28(fp)
     e6c:	1885c83a 	sub	r2,r3,r2
     e70:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
     e74:	e0bff617 	ldw	r2,-40(fp)
     e78:	10001e26 	beq	r2,zero,ef4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
     e7c:	e0fffe17 	ldw	r3,-8(fp)
     e80:	e0bff617 	ldw	r2,-40(fp)
     e84:	1880022e 	bgeu	r3,r2,e90 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
     e88:	e0bffe17 	ldw	r2,-8(fp)
     e8c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
     e90:	e0bffc17 	ldw	r2,-16(fp)
     e94:	10c20e04 	addi	r3,r2,2104
     e98:	e0bff917 	ldw	r2,-28(fp)
     e9c:	1885883a 	add	r2,r3,r2
     ea0:	e1bff617 	ldw	r6,-40(fp)
     ea4:	e17ffd17 	ldw	r5,-12(fp)
     ea8:	1009883a 	mov	r4,r2
     eac:	000351c0 	call	351c <memcpy>
      ptr   += n;
     eb0:	e0fffd17 	ldw	r3,-12(fp)
     eb4:	e0bff617 	ldw	r2,-40(fp)
     eb8:	1885883a 	add	r2,r3,r2
     ebc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
     ec0:	e0fffe17 	ldw	r3,-8(fp)
     ec4:	e0bff617 	ldw	r2,-40(fp)
     ec8:	1885c83a 	sub	r2,r3,r2
     ecc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     ed0:	e0fff917 	ldw	r3,-28(fp)
     ed4:	e0bff617 	ldw	r2,-40(fp)
     ed8:	1885883a 	add	r2,r3,r2
     edc:	10c1ffcc 	andi	r3,r2,2047
     ee0:	e0bffc17 	ldw	r2,-16(fp)
     ee4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     ee8:	e0bffe17 	ldw	r2,-8(fp)
     eec:	00bfc716 	blt	zero,r2,e0c <__alt_mem_onchip_memory2_0+0xf7bfce0c>
     ef0:	00000106 	br	ef8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
     ef4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     ef8:	0005303a 	rdctl	r2,status
     efc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     f00:	e0fffb17 	ldw	r3,-20(fp)
     f04:	00bfff84 	movi	r2,-2
     f08:	1884703a 	and	r2,r3,r2
     f0c:	1001703a 	wrctl	status,r2
  
  return context;
     f10:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
     f14:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     f18:	e0bffc17 	ldw	r2,-16(fp)
     f1c:	10800817 	ldw	r2,32(r2)
     f20:	10c00094 	ori	r3,r2,2
     f24:	e0bffc17 	ldw	r2,-16(fp)
     f28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     f2c:	e0bffc17 	ldw	r2,-16(fp)
     f30:	10800017 	ldw	r2,0(r2)
     f34:	10800104 	addi	r2,r2,4
     f38:	1007883a 	mov	r3,r2
     f3c:	e0bffc17 	ldw	r2,-16(fp)
     f40:	10800817 	ldw	r2,32(r2)
     f44:	18800035 	stwio	r2,0(r3)
     f48:	e0bffa17 	ldw	r2,-24(fp)
     f4c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     f50:	e0bff817 	ldw	r2,-32(fp)
     f54:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
     f58:	e0bffe17 	ldw	r2,-8(fp)
     f5c:	0080100e 	bge	zero,r2,fa0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
     f60:	e0bfff17 	ldw	r2,-4(fp)
     f64:	1090000c 	andi	r2,r2,16384
     f68:	1000101e 	bne	r2,zero,fac <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
     f6c:	0001883a 	nop
     f70:	e0bffc17 	ldw	r2,-16(fp)
     f74:	10c00d17 	ldw	r3,52(r2)
     f78:	e0bff517 	ldw	r2,-44(fp)
     f7c:	1880051e 	bne	r3,r2,f94 <altera_avalon_jtag_uart_write+0x1b8>
     f80:	e0bffc17 	ldw	r2,-16(fp)
     f84:	10c00917 	ldw	r3,36(r2)
     f88:	e0bffc17 	ldw	r2,-16(fp)
     f8c:	10800117 	ldw	r2,4(r2)
     f90:	18bff736 	bltu	r3,r2,f70 <__alt_mem_onchip_memory2_0+0xf7bfcf70>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
     f94:	e0bffc17 	ldw	r2,-16(fp)
     f98:	10800917 	ldw	r2,36(r2)
     f9c:	1000051e 	bne	r2,zero,fb4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
     fa0:	e0bffe17 	ldw	r2,-8(fp)
     fa4:	00bfd016 	blt	zero,r2,ee8 <__alt_mem_onchip_memory2_0+0xf7bfcee8>
     fa8:	00000306 	br	fb8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
     fac:	0001883a 	nop
     fb0:	00000106 	br	fb8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
     fb4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
     fb8:	e0fffd17 	ldw	r3,-12(fp)
     fbc:	e0bff717 	ldw	r2,-36(fp)
     fc0:	18800426 	beq	r3,r2,fd4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
     fc4:	e0fffd17 	ldw	r3,-12(fp)
     fc8:	e0bff717 	ldw	r2,-36(fp)
     fcc:	1885c83a 	sub	r2,r3,r2
     fd0:	00000606 	br	fec <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
     fd4:	e0bfff17 	ldw	r2,-4(fp)
     fd8:	1090000c 	andi	r2,r2,16384
     fdc:	10000226 	beq	r2,zero,fe8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
     fe0:	00bffd44 	movi	r2,-11
     fe4:	00000106 	br	fec <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
     fe8:	00bffec4 	movi	r2,-5
}
     fec:	e037883a 	mov	sp,fp
     ff0:	dfc00117 	ldw	ra,4(sp)
     ff4:	df000017 	ldw	fp,0(sp)
     ff8:	dec00204 	addi	sp,sp,8
     ffc:	f800283a 	ret

00001000 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1000:	defff904 	addi	sp,sp,-28
    1004:	dfc00615 	stw	ra,24(sp)
    1008:	df000515 	stw	fp,20(sp)
    100c:	df000504 	addi	fp,sp,20
    1010:	e13ffe15 	stw	r4,-8(fp)
    1014:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1018:	0007883a 	mov	r3,zero
    101c:	e0bffe17 	ldw	r2,-8(fp)
    1020:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1024:	e0bffe17 	ldw	r2,-8(fp)
    1028:	10800104 	addi	r2,r2,4
    102c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1030:	0005303a 	rdctl	r2,status
    1034:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1038:	e0fffc17 	ldw	r3,-16(fp)
    103c:	00bfff84 	movi	r2,-2
    1040:	1884703a 	and	r2,r3,r2
    1044:	1001703a 	wrctl	status,r2
  
  return context;
    1048:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    104c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    1050:	00022040 	call	2204 <alt_tick>
    1054:	e0bffb17 	ldw	r2,-20(fp)
    1058:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    105c:	e0bffd17 	ldw	r2,-12(fp)
    1060:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    1064:	0001883a 	nop
    1068:	e037883a 	mov	sp,fp
    106c:	dfc00117 	ldw	ra,4(sp)
    1070:	df000017 	ldw	fp,0(sp)
    1074:	dec00204 	addi	sp,sp,8
    1078:	f800283a 	ret

0000107c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    107c:	defff904 	addi	sp,sp,-28
    1080:	dfc00615 	stw	ra,24(sp)
    1084:	df000515 	stw	fp,20(sp)
    1088:	df000504 	addi	fp,sp,20
    108c:	e13ffc15 	stw	r4,-16(fp)
    1090:	e17ffd15 	stw	r5,-12(fp)
    1094:	e1bffe15 	stw	r6,-8(fp)
    1098:	e1ffff15 	stw	r7,-4(fp)
    109c:	e0bfff17 	ldw	r2,-4(fp)
    10a0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    10a4:	d0a6d317 	ldw	r2,-25780(gp)
    10a8:	1000021e 	bne	r2,zero,10b4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    10ac:	e0bffb17 	ldw	r2,-20(fp)
    10b0:	d0a6d315 	stw	r2,-25780(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    10b4:	e0bffc17 	ldw	r2,-16(fp)
    10b8:	10800104 	addi	r2,r2,4
    10bc:	00c001c4 	movi	r3,7
    10c0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    10c4:	01800034 	movhi	r6,0
    10c8:	31840004 	addi	r6,r6,4096
    10cc:	e17ffc17 	ldw	r5,-16(fp)
    10d0:	e13ffe17 	ldw	r4,-8(fp)
    10d4:	0001d300 	call	1d30 <alt_irq_register>
#endif  
}
    10d8:	0001883a 	nop
    10dc:	e037883a 	mov	sp,fp
    10e0:	dfc00117 	ldw	ra,4(sp)
    10e4:	df000017 	ldw	fp,0(sp)
    10e8:	dec00204 	addi	sp,sp,8
    10ec:	f800283a 	ret

000010f0 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    10f0:	defffd04 	addi	sp,sp,-12
    10f4:	df000215 	stw	fp,8(sp)
    10f8:	df000204 	addi	fp,sp,8
    10fc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    1100:	e0bfff17 	ldw	r2,-4(fp)
    1104:	1080400c 	andi	r2,r2,256
    1108:	1004d23a 	srli	r2,r2,8
    110c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    1110:	e0bffe03 	ldbu	r2,-8(fp)
}
    1114:	e037883a 	mov	sp,fp
    1118:	df000017 	ldw	fp,0(sp)
    111c:	dec00104 	addi	sp,sp,4
    1120:	f800283a 	ret

00001124 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    1124:	defffd04 	addi	sp,sp,-12
    1128:	df000215 	stw	fp,8(sp)
    112c:	df000204 	addi	fp,sp,8
    1130:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    1134:	e0bfff17 	ldw	r2,-4(fp)
    1138:	1080004c 	andi	r2,r2,1
    113c:	e0bffe05 	stb	r2,-8(fp)
	return re;
    1140:	e0bffe03 	ldbu	r2,-8(fp)
}
    1144:	e037883a 	mov	sp,fp
    1148:	df000017 	ldw	fp,0(sp)
    114c:	dec00104 	addi	sp,sp,4
    1150:	f800283a 	ret

00001154 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    1154:	defffd04 	addi	sp,sp,-12
    1158:	df000215 	stw	fp,8(sp)
    115c:	df000204 	addi	fp,sp,8
    1160:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    1164:	e0bfff17 	ldw	r2,-4(fp)
    1168:	1081000c 	andi	r2,r2,1024
    116c:	1004d2ba 	srli	r2,r2,10
    1170:	e0bffe05 	stb	r2,-8(fp)
	return re;
    1174:	e0bffe03 	ldbu	r2,-8(fp)
}
    1178:	e037883a 	mov	sp,fp
    117c:	df000017 	ldw	fp,0(sp)
    1180:	dec00104 	addi	sp,sp,4
    1184:	f800283a 	ret

00001188 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    1188:	defffd04 	addi	sp,sp,-12
    118c:	df000215 	stw	fp,8(sp)
    1190:	df000204 	addi	fp,sp,8
    1194:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    1198:	e0bfff17 	ldw	r2,-4(fp)
    119c:	1004d43a 	srli	r2,r2,16
    11a0:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    11a4:	e0bffe0b 	ldhu	r2,-8(fp)
}
    11a8:	e037883a 	mov	sp,fp
    11ac:	df000017 	ldw	fp,0(sp)
    11b0:	dec00104 	addi	sp,sp,4
    11b4:	f800283a 	ret

000011b8 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    11b8:	defffd04 	addi	sp,sp,-12
    11bc:	df000215 	stw	fp,8(sp)
    11c0:	df000204 	addi	fp,sp,8
    11c4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    11c8:	e0bfff17 	ldw	r2,-4(fp)
    11cc:	10a0000c 	andi	r2,r2,32768
    11d0:	1004d3fa 	srli	r2,r2,15
    11d4:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    11d8:	e0bffe03 	ldbu	r2,-8(fp)
}
    11dc:	e037883a 	mov	sp,fp
    11e0:	df000017 	ldw	fp,0(sp)
    11e4:	dec00104 	addi	sp,sp,4
    11e8:	f800283a 	ret

000011ec <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    11ec:	defffd04 	addi	sp,sp,-12
    11f0:	df000215 	stw	fp,8(sp)
    11f4:	df000204 	addi	fp,sp,8
    11f8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    11fc:	e0bfff17 	ldw	r2,-4(fp)
    1200:	e0bffe05 	stb	r2,-8(fp)
	return data;
    1204:	e0bffe03 	ldbu	r2,-8(fp)
}
    1208:	e037883a 	mov	sp,fp
    120c:	df000017 	ldw	fp,0(sp)
    1210:	dec00104 	addi	sp,sp,4
    1214:	f800283a 	ret

00001218 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    1218:	defffb04 	addi	sp,sp,-20
    121c:	dfc00415 	stw	ra,16(sp)
    1220:	df000315 	stw	fp,12(sp)
    1224:	df000304 	addi	fp,sp,12
    1228:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    122c:	01403fc4 	movi	r5,255
    1230:	e13fff17 	ldw	r4,-4(fp)
    1234:	00014780 	call	1478 <alt_up_ps2_write_data_byte_with_ack>
    1238:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    123c:	e0bffd17 	ldw	r2,-12(fp)
    1240:	1000211e 	bne	r2,zero,12c8 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1244:	e0bffe04 	addi	r2,fp,-8
    1248:	100b883a 	mov	r5,r2
    124c:	e13fff17 	ldw	r4,-4(fp)
    1250:	00014dc0 	call	14dc <alt_up_ps2_read_data_byte_timeout>
    1254:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    1258:	e0bffd17 	ldw	r2,-12(fp)
    125c:	10001a1e 	bne	r2,zero,12c8 <alt_up_ps2_init+0xb0>
    1260:	e0bffe03 	ldbu	r2,-8(fp)
    1264:	10803fcc 	andi	r2,r2,255
    1268:	10802a98 	cmpnei	r2,r2,170
    126c:	1000161e 	bne	r2,zero,12c8 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1270:	e0bffe04 	addi	r2,fp,-8
    1274:	100b883a 	mov	r5,r2
    1278:	e13fff17 	ldw	r4,-4(fp)
    127c:	00014dc0 	call	14dc <alt_up_ps2_read_data_byte_timeout>
    1280:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    1284:	e0bffd17 	ldw	r2,-12(fp)
    1288:	10bfe318 	cmpnei	r2,r2,-116
    128c:	1000041e 	bne	r2,zero,12a0 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    1290:	e0bfff17 	ldw	r2,-4(fp)
    1294:	00c00044 	movi	r3,1
    1298:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    129c:	00000a06 	br	12c8 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
    12a0:	e0bffd17 	ldw	r2,-12(fp)
    12a4:	1000081e 	bne	r2,zero,12c8 <alt_up_ps2_init+0xb0>
    12a8:	e0bffe03 	ldbu	r2,-8(fp)
    12ac:	10803fcc 	andi	r2,r2,255
    12b0:	1000051e 	bne	r2,zero,12c8 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    12b4:	e0bfff17 	ldw	r2,-4(fp)
    12b8:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    12bc:	01403d04 	movi	r5,244
    12c0:	e13fff17 	ldw	r4,-4(fp)
    12c4:	000139c0 	call	139c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    12c8:	0001883a 	nop
    12cc:	e037883a 	mov	sp,fp
    12d0:	dfc00117 	ldw	ra,4(sp)
    12d4:	df000017 	ldw	fp,0(sp)
    12d8:	dec00204 	addi	sp,sp,8
    12dc:	f800283a 	ret

000012e0 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    12e0:	defffd04 	addi	sp,sp,-12
    12e4:	df000215 	stw	fp,8(sp)
    12e8:	df000204 	addi	fp,sp,8
    12ec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    12f0:	e0bfff17 	ldw	r2,-4(fp)
    12f4:	10800a17 	ldw	r2,40(r2)
    12f8:	10800104 	addi	r2,r2,4
    12fc:	10800037 	ldwio	r2,0(r2)
    1300:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    1304:	e0bffe17 	ldw	r2,-8(fp)
    1308:	10800054 	ori	r2,r2,1
    130c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1310:	e0bfff17 	ldw	r2,-4(fp)
    1314:	10800a17 	ldw	r2,40(r2)
    1318:	10800104 	addi	r2,r2,4
    131c:	1007883a 	mov	r3,r2
    1320:	e0bffe17 	ldw	r2,-8(fp)
    1324:	18800035 	stwio	r2,0(r3)
}
    1328:	0001883a 	nop
    132c:	e037883a 	mov	sp,fp
    1330:	df000017 	ldw	fp,0(sp)
    1334:	dec00104 	addi	sp,sp,4
    1338:	f800283a 	ret

0000133c <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    133c:	defffd04 	addi	sp,sp,-12
    1340:	df000215 	stw	fp,8(sp)
    1344:	df000204 	addi	fp,sp,8
    1348:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    134c:	e0bfff17 	ldw	r2,-4(fp)
    1350:	10800a17 	ldw	r2,40(r2)
    1354:	10800104 	addi	r2,r2,4
    1358:	10800037 	ldwio	r2,0(r2)
    135c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    1360:	e0fffe17 	ldw	r3,-8(fp)
    1364:	00bfff84 	movi	r2,-2
    1368:	1884703a 	and	r2,r3,r2
    136c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1370:	e0bfff17 	ldw	r2,-4(fp)
    1374:	10800a17 	ldw	r2,40(r2)
    1378:	10800104 	addi	r2,r2,4
    137c:	1007883a 	mov	r3,r2
    1380:	e0bffe17 	ldw	r2,-8(fp)
    1384:	18800035 	stwio	r2,0(r3)
}
    1388:	0001883a 	nop
    138c:	e037883a 	mov	sp,fp
    1390:	df000017 	ldw	fp,0(sp)
    1394:	dec00104 	addi	sp,sp,4
    1398:	f800283a 	ret

0000139c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    139c:	defffb04 	addi	sp,sp,-20
    13a0:	dfc00415 	stw	ra,16(sp)
    13a4:	df000315 	stw	fp,12(sp)
    13a8:	df000304 	addi	fp,sp,12
    13ac:	e13ffe15 	stw	r4,-8(fp)
    13b0:	2805883a 	mov	r2,r5
    13b4:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    13b8:	e0bffe17 	ldw	r2,-8(fp)
    13bc:	10800a17 	ldw	r2,40(r2)
    13c0:	1007883a 	mov	r3,r2
    13c4:	e0bfff03 	ldbu	r2,-4(fp)
    13c8:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    13cc:	e0bffe17 	ldw	r2,-8(fp)
    13d0:	10800a17 	ldw	r2,40(r2)
    13d4:	10800104 	addi	r2,r2,4
    13d8:	10800037 	ldwio	r2,0(r2)
    13dc:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    13e0:	e13ffd17 	ldw	r4,-12(fp)
    13e4:	00011540 	call	1154 <read_CE_bit>
    13e8:	10803fcc 	andi	r2,r2,255
    13ec:	10000226 	beq	r2,zero,13f8 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    13f0:	00bffec4 	movi	r2,-5
    13f4:	00000106 	br	13fc <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    13f8:	0005883a 	mov	r2,zero
}
    13fc:	e037883a 	mov	sp,fp
    1400:	dfc00117 	ldw	ra,4(sp)
    1404:	df000017 	ldw	fp,0(sp)
    1408:	dec00204 	addi	sp,sp,8
    140c:	f800283a 	ret

00001410 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    1410:	defffc04 	addi	sp,sp,-16
    1414:	dfc00315 	stw	ra,12(sp)
    1418:	df000215 	stw	fp,8(sp)
    141c:	df000204 	addi	fp,sp,8
    1420:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    1424:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    1428:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    142c:	e0bffe44 	addi	r2,fp,-7
    1430:	100b883a 	mov	r5,r2
    1434:	e13fff17 	ldw	r4,-4(fp)
    1438:	00014dc0 	call	14dc <alt_up_ps2_read_data_byte_timeout>
    143c:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    1440:	e0bffe03 	ldbu	r2,-8(fp)
    1444:	1000061e 	bne	r2,zero,1460 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    1448:	e0bffe43 	ldbu	r2,-7(fp)
    144c:	10803fcc 	andi	r2,r2,255
    1450:	10803e98 	cmpnei	r2,r2,250
    1454:	103ff51e 	bne	r2,zero,142c <__alt_mem_onchip_memory2_0+0xf7bfd42c>
				return 0;
    1458:	0005883a 	mov	r2,zero
    145c:	00000106 	br	1464 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    1460:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    1464:	e037883a 	mov	sp,fp
    1468:	dfc00117 	ldw	ra,4(sp)
    146c:	df000017 	ldw	fp,0(sp)
    1470:	dec00204 	addi	sp,sp,8
    1474:	f800283a 	ret

00001478 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    1478:	defffa04 	addi	sp,sp,-24
    147c:	dfc00515 	stw	ra,20(sp)
    1480:	df000415 	stw	fp,16(sp)
    1484:	df000404 	addi	fp,sp,16
    1488:	e13ffe15 	stw	r4,-8(fp)
    148c:	2805883a 	mov	r2,r5
    1490:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    1494:	e0bfff03 	ldbu	r2,-4(fp)
    1498:	100b883a 	mov	r5,r2
    149c:	e13ffe17 	ldw	r4,-8(fp)
    14a0:	000139c0 	call	139c <alt_up_ps2_write_data_byte>
    14a4:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    14a8:	e0bffc17 	ldw	r2,-16(fp)
    14ac:	10000226 	beq	r2,zero,14b8 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    14b0:	e0bffc17 	ldw	r2,-16(fp)
    14b4:	00000406 	br	14c8 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    14b8:	e13ffe17 	ldw	r4,-8(fp)
    14bc:	00014100 	call	1410 <alt_up_ps2_wait_for_ack>
    14c0:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    14c4:	e0bffd17 	ldw	r2,-12(fp)
}
    14c8:	e037883a 	mov	sp,fp
    14cc:	dfc00117 	ldw	ra,4(sp)
    14d0:	df000017 	ldw	fp,0(sp)
    14d4:	dec00204 	addi	sp,sp,8
    14d8:	f800283a 	ret

000014dc <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    14dc:	defffa04 	addi	sp,sp,-24
    14e0:	dfc00515 	stw	ra,20(sp)
    14e4:	df000415 	stw	fp,16(sp)
    14e8:	df000404 	addi	fp,sp,16
    14ec:	e13ffe15 	stw	r4,-8(fp)
    14f0:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    14f4:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    14f8:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    14fc:	e0bffc17 	ldw	r2,-16(fp)
    1500:	10800044 	addi	r2,r2,1
    1504:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1508:	e0bffe17 	ldw	r2,-8(fp)
    150c:	10800a17 	ldw	r2,40(r2)
    1510:	10800037 	ldwio	r2,0(r2)
    1514:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    1518:	e13ffd17 	ldw	r4,-12(fp)
    151c:	00011b80 	call	11b8 <read_data_valid>
    1520:	10803fcc 	andi	r2,r2,255
    1524:	10000726 	beq	r2,zero,1544 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    1528:	e13ffd17 	ldw	r4,-12(fp)
    152c:	00011ec0 	call	11ec <read_data_byte>
    1530:	1007883a 	mov	r3,r2
    1534:	e0bfff17 	ldw	r2,-4(fp)
    1538:	10c00005 	stb	r3,0(r2)
			return 0;
    153c:	0005883a 	mov	r2,zero
    1540:	00000806 	br	1564 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    1544:	e0bffe17 	ldw	r2,-8(fp)
    1548:	10800c17 	ldw	r2,48(r2)
    154c:	103feb26 	beq	r2,zero,14fc <__alt_mem_onchip_memory2_0+0xf7bfd4fc>
    1550:	e0bffe17 	ldw	r2,-8(fp)
    1554:	10c00c17 	ldw	r3,48(r2)
    1558:	e0bffc17 	ldw	r2,-16(fp)
    155c:	18bfe72e 	bgeu	r3,r2,14fc <__alt_mem_onchip_memory2_0+0xf7bfd4fc>
		{
			return -ETIMEDOUT;
    1560:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    1564:	e037883a 	mov	sp,fp
    1568:	dfc00117 	ldw	ra,4(sp)
    156c:	df000017 	ldw	fp,0(sp)
    1570:	dec00204 	addi	sp,sp,8
    1574:	f800283a 	ret

00001578 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    1578:	defffb04 	addi	sp,sp,-20
    157c:	dfc00415 	stw	ra,16(sp)
    1580:	df000315 	stw	fp,12(sp)
    1584:	df000304 	addi	fp,sp,12
    1588:	e13ffe15 	stw	r4,-8(fp)
    158c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    1590:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1594:	e0bffe17 	ldw	r2,-8(fp)
    1598:	10800a17 	ldw	r2,40(r2)
    159c:	10800037 	ldwio	r2,0(r2)
    15a0:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    15a4:	e13ffd17 	ldw	r4,-12(fp)
    15a8:	00011b80 	call	11b8 <read_data_valid>
    15ac:	10803fcc 	andi	r2,r2,255
    15b0:	10000726 	beq	r2,zero,15d0 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    15b4:	e13ffd17 	ldw	r4,-12(fp)
    15b8:	00011ec0 	call	11ec <read_data_byte>
    15bc:	1007883a 	mov	r3,r2
    15c0:	e0bfff17 	ldw	r2,-4(fp)
    15c4:	10c00005 	stb	r3,0(r2)
		return 0;
    15c8:	0005883a 	mov	r2,zero
    15cc:	00000106 	br	15d4 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    15d0:	00bfffc4 	movi	r2,-1
}
    15d4:	e037883a 	mov	sp,fp
    15d8:	dfc00117 	ldw	ra,4(sp)
    15dc:	df000017 	ldw	fp,0(sp)
    15e0:	dec00204 	addi	sp,sp,8
    15e4:	f800283a 	ret

000015e8 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    15e8:	defffb04 	addi	sp,sp,-20
    15ec:	dfc00415 	stw	ra,16(sp)
    15f0:	df000315 	stw	fp,12(sp)
    15f4:	df000304 	addi	fp,sp,12
    15f8:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    15fc:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    1600:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1604:	e0bfff17 	ldw	r2,-4(fp)
    1608:	10800a17 	ldw	r2,40(r2)
    160c:	10800037 	ldwio	r2,0(r2)
    1610:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    1614:	e13ffe17 	ldw	r4,-8(fp)
    1618:	00011880 	call	1188 <read_num_bytes_available>
    161c:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    1620:	e0bffd0b 	ldhu	r2,-12(fp)
    1624:	103ff71e 	bne	r2,zero,1604 <__alt_mem_onchip_memory2_0+0xf7bfd604>
}
    1628:	0001883a 	nop
    162c:	e037883a 	mov	sp,fp
    1630:	dfc00117 	ldw	ra,4(sp)
    1634:	df000017 	ldw	fp,0(sp)
    1638:	dec00204 	addi	sp,sp,8
    163c:	f800283a 	ret

00001640 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    1640:	defff804 	addi	sp,sp,-32
    1644:	dfc00715 	stw	ra,28(sp)
    1648:	df000615 	stw	fp,24(sp)
    164c:	df000604 	addi	fp,sp,24
    1650:	e13ffd15 	stw	r4,-12(fp)
    1654:	e17ffe15 	stw	r5,-8(fp)
    1658:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    165c:	e0bffd17 	ldw	r2,-12(fp)
    1660:	10800017 	ldw	r2,0(r2)
    1664:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    1668:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    166c:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    1670:	e0fffc17 	ldw	r3,-16(fp)
    1674:	e0bfff17 	ldw	r2,-4(fp)
    1678:	18bffd16 	blt	r3,r2,1670 <__alt_mem_onchip_memory2_0+0xf7bfd670>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    167c:	e0bffe17 	ldw	r2,-8(fp)
    1680:	10c00044 	addi	r3,r2,1
    1684:	e0fffe15 	stw	r3,-8(fp)
    1688:	100b883a 	mov	r5,r2
    168c:	e13ffa17 	ldw	r4,-24(fp)
    1690:	00014dc0 	call	14dc <alt_up_ps2_read_data_byte_timeout>
    1694:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    1698:	e0bffb17 	ldw	r2,-20(fp)
    169c:	10000226 	beq	r2,zero,16a8 <alt_up_ps2_read_fd+0x68>
			return count;
    16a0:	e0bffc17 	ldw	r2,-16(fp)
    16a4:	00000406 	br	16b8 <alt_up_ps2_read_fd+0x78>
		count++;
    16a8:	e0bffc17 	ldw	r2,-16(fp)
    16ac:	10800044 	addi	r2,r2,1
    16b0:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    16b4:	e0bffc17 	ldw	r2,-16(fp)
}
    16b8:	e037883a 	mov	sp,fp
    16bc:	dfc00117 	ldw	ra,4(sp)
    16c0:	df000017 	ldw	fp,0(sp)
    16c4:	dec00204 	addi	sp,sp,8
    16c8:	f800283a 	ret

000016cc <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    16cc:	defff804 	addi	sp,sp,-32
    16d0:	dfc00715 	stw	ra,28(sp)
    16d4:	df000615 	stw	fp,24(sp)
    16d8:	df000604 	addi	fp,sp,24
    16dc:	e13ffd15 	stw	r4,-12(fp)
    16e0:	e17ffe15 	stw	r5,-8(fp)
    16e4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    16e8:	e0bffd17 	ldw	r2,-12(fp)
    16ec:	10800017 	ldw	r2,0(r2)
    16f0:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    16f4:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    16f8:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    16fc:	00001006 	br	1740 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    1700:	e0bffe17 	ldw	r2,-8(fp)
    1704:	10c00044 	addi	r3,r2,1
    1708:	e0fffe15 	stw	r3,-8(fp)
    170c:	10800003 	ldbu	r2,0(r2)
    1710:	10803fcc 	andi	r2,r2,255
    1714:	100b883a 	mov	r5,r2
    1718:	e13ffb17 	ldw	r4,-20(fp)
    171c:	000139c0 	call	139c <alt_up_ps2_write_data_byte>
    1720:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    1724:	e0bffc17 	ldw	r2,-16(fp)
    1728:	10000226 	beq	r2,zero,1734 <alt_up_ps2_write_fd+0x68>
			return count;
    172c:	e0bffa17 	ldw	r2,-24(fp)
    1730:	00000706 	br	1750 <alt_up_ps2_write_fd+0x84>
		count++;
    1734:	e0bffa17 	ldw	r2,-24(fp)
    1738:	10800044 	addi	r2,r2,1
    173c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    1740:	e0fffa17 	ldw	r3,-24(fp)
    1744:	e0bfff17 	ldw	r2,-4(fp)
    1748:	18bfed16 	blt	r3,r2,1700 <__alt_mem_onchip_memory2_0+0xf7bfd700>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    174c:	e0bffa17 	ldw	r2,-24(fp)
}
    1750:	e037883a 	mov	sp,fp
    1754:	dfc00117 	ldw	ra,4(sp)
    1758:	df000017 	ldw	fp,0(sp)
    175c:	dec00204 	addi	sp,sp,8
    1760:	f800283a 	ret

00001764 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    1764:	defffc04 	addi	sp,sp,-16
    1768:	dfc00315 	stw	ra,12(sp)
    176c:	df000215 	stw	fp,8(sp)
    1770:	df000204 	addi	fp,sp,8
    1774:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    1778:	d1600204 	addi	r5,gp,-32760
    177c:	e13fff17 	ldw	r4,-4(fp)
    1780:	0001b2c0 	call	1b2c <alt_find_dev>
    1784:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    1788:	e0bffe17 	ldw	r2,-8(fp)
}
    178c:	e037883a 	mov	sp,fp
    1790:	dfc00117 	ldw	ra,4(sp)
    1794:	df000017 	ldw	fp,0(sp)
    1798:	dec00204 	addi	sp,sp,8
    179c:	f800283a 	ret

000017a0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    17a0:	defff504 	addi	sp,sp,-44
    17a4:	df000a15 	stw	fp,40(sp)
    17a8:	df000a04 	addi	fp,sp,40
    17ac:	e13ffc15 	stw	r4,-16(fp)
    17b0:	e17ffd15 	stw	r5,-12(fp)
    17b4:	e1bffe15 	stw	r6,-8(fp)
    17b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    17bc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    17c0:	d0a6d317 	ldw	r2,-25780(gp)
  
  if (alt_ticks_per_second ())
    17c4:	10003c26 	beq	r2,zero,18b8 <alt_alarm_start+0x118>
  {
    if (alarm)
    17c8:	e0bffc17 	ldw	r2,-16(fp)
    17cc:	10003826 	beq	r2,zero,18b0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    17d0:	e0bffc17 	ldw	r2,-16(fp)
    17d4:	e0fffe17 	ldw	r3,-8(fp)
    17d8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    17dc:	e0bffc17 	ldw	r2,-16(fp)
    17e0:	e0ffff17 	ldw	r3,-4(fp)
    17e4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    17e8:	0005303a 	rdctl	r2,status
    17ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    17f0:	e0fff917 	ldw	r3,-28(fp)
    17f4:	00bfff84 	movi	r2,-2
    17f8:	1884703a 	and	r2,r3,r2
    17fc:	1001703a 	wrctl	status,r2
  
  return context;
    1800:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    1804:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1808:	d0a6d417 	ldw	r2,-25776(gp)
      
      current_nticks = alt_nticks();
    180c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    1810:	e0fffd17 	ldw	r3,-12(fp)
    1814:	e0bff617 	ldw	r2,-40(fp)
    1818:	1885883a 	add	r2,r3,r2
    181c:	10c00044 	addi	r3,r2,1
    1820:	e0bffc17 	ldw	r2,-16(fp)
    1824:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1828:	e0bffc17 	ldw	r2,-16(fp)
    182c:	10c00217 	ldw	r3,8(r2)
    1830:	e0bff617 	ldw	r2,-40(fp)
    1834:	1880042e 	bgeu	r3,r2,1848 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    1838:	e0bffc17 	ldw	r2,-16(fp)
    183c:	00c00044 	movi	r3,1
    1840:	10c00405 	stb	r3,16(r2)
    1844:	00000206 	br	1850 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    1848:	e0bffc17 	ldw	r2,-16(fp)
    184c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1850:	e0bffc17 	ldw	r2,-16(fp)
    1854:	d0e00704 	addi	r3,gp,-32740
    1858:	e0fffa15 	stw	r3,-24(fp)
    185c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1860:	e0bffb17 	ldw	r2,-20(fp)
    1864:	e0fffa17 	ldw	r3,-24(fp)
    1868:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    186c:	e0bffa17 	ldw	r2,-24(fp)
    1870:	10c00017 	ldw	r3,0(r2)
    1874:	e0bffb17 	ldw	r2,-20(fp)
    1878:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    187c:	e0bffa17 	ldw	r2,-24(fp)
    1880:	10800017 	ldw	r2,0(r2)
    1884:	e0fffb17 	ldw	r3,-20(fp)
    1888:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    188c:	e0bffa17 	ldw	r2,-24(fp)
    1890:	e0fffb17 	ldw	r3,-20(fp)
    1894:	10c00015 	stw	r3,0(r2)
    1898:	e0bff817 	ldw	r2,-32(fp)
    189c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    18a0:	e0bff717 	ldw	r2,-36(fp)
    18a4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    18a8:	0005883a 	mov	r2,zero
    18ac:	00000306 	br	18bc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    18b0:	00bffa84 	movi	r2,-22
    18b4:	00000106 	br	18bc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    18b8:	00bfde84 	movi	r2,-134
  }
}
    18bc:	e037883a 	mov	sp,fp
    18c0:	df000017 	ldw	fp,0(sp)
    18c4:	dec00104 	addi	sp,sp,4
    18c8:	f800283a 	ret

000018cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    18cc:	defffe04 	addi	sp,sp,-8
    18d0:	dfc00115 	stw	ra,4(sp)
    18d4:	df000015 	stw	fp,0(sp)
    18d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    18dc:	d0a00517 	ldw	r2,-32748(gp)
    18e0:	10000326 	beq	r2,zero,18f0 <alt_get_errno+0x24>
    18e4:	d0a00517 	ldw	r2,-32748(gp)
    18e8:	103ee83a 	callr	r2
    18ec:	00000106 	br	18f4 <alt_get_errno+0x28>
    18f0:	d0a6d604 	addi	r2,gp,-25768
}
    18f4:	e037883a 	mov	sp,fp
    18f8:	dfc00117 	ldw	ra,4(sp)
    18fc:	df000017 	ldw	fp,0(sp)
    1900:	dec00204 	addi	sp,sp,8
    1904:	f800283a 	ret

00001908 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1908:	defffb04 	addi	sp,sp,-20
    190c:	dfc00415 	stw	ra,16(sp)
    1910:	df000315 	stw	fp,12(sp)
    1914:	df000304 	addi	fp,sp,12
    1918:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    191c:	e0bfff17 	ldw	r2,-4(fp)
    1920:	10000616 	blt	r2,zero,193c <close+0x34>
    1924:	e0bfff17 	ldw	r2,-4(fp)
    1928:	10c00324 	muli	r3,r2,12
    192c:	00800034 	movhi	r2,0
    1930:	109b8804 	addi	r2,r2,28192
    1934:	1885883a 	add	r2,r3,r2
    1938:	00000106 	br	1940 <close+0x38>
    193c:	0005883a 	mov	r2,zero
    1940:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    1944:	e0bffd17 	ldw	r2,-12(fp)
    1948:	10001926 	beq	r2,zero,19b0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    194c:	e0bffd17 	ldw	r2,-12(fp)
    1950:	10800017 	ldw	r2,0(r2)
    1954:	10800417 	ldw	r2,16(r2)
    1958:	10000626 	beq	r2,zero,1974 <close+0x6c>
    195c:	e0bffd17 	ldw	r2,-12(fp)
    1960:	10800017 	ldw	r2,0(r2)
    1964:	10800417 	ldw	r2,16(r2)
    1968:	e13ffd17 	ldw	r4,-12(fp)
    196c:	103ee83a 	callr	r2
    1970:	00000106 	br	1978 <close+0x70>
    1974:	0005883a 	mov	r2,zero
    1978:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    197c:	e13fff17 	ldw	r4,-4(fp)
    1980:	00021040 	call	2104 <alt_release_fd>
    if (rval < 0)
    1984:	e0bffe17 	ldw	r2,-8(fp)
    1988:	1000070e 	bge	r2,zero,19a8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    198c:	00018cc0 	call	18cc <alt_get_errno>
    1990:	1007883a 	mov	r3,r2
    1994:	e0bffe17 	ldw	r2,-8(fp)
    1998:	0085c83a 	sub	r2,zero,r2
    199c:	18800015 	stw	r2,0(r3)
      return -1;
    19a0:	00bfffc4 	movi	r2,-1
    19a4:	00000706 	br	19c4 <close+0xbc>
    }
    return 0;
    19a8:	0005883a 	mov	r2,zero
    19ac:	00000506 	br	19c4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    19b0:	00018cc0 	call	18cc <alt_get_errno>
    19b4:	1007883a 	mov	r3,r2
    19b8:	00801444 	movi	r2,81
    19bc:	18800015 	stw	r2,0(r3)
    return -1;
    19c0:	00bfffc4 	movi	r2,-1
  }
}
    19c4:	e037883a 	mov	sp,fp
    19c8:	dfc00117 	ldw	ra,4(sp)
    19cc:	df000017 	ldw	fp,0(sp)
    19d0:	dec00204 	addi	sp,sp,8
    19d4:	f800283a 	ret

000019d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    19d8:	defffe04 	addi	sp,sp,-8
    19dc:	df000115 	stw	fp,4(sp)
    19e0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    19e4:	e03fff15 	stw	zero,-4(fp)
    19e8:	00000506 	br	1a00 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    19ec:	e0bfff17 	ldw	r2,-4(fp)
    19f0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    19f4:	e0bfff17 	ldw	r2,-4(fp)
    19f8:	10800804 	addi	r2,r2,32
    19fc:	e0bfff15 	stw	r2,-4(fp)
    1a00:	e0bfff17 	ldw	r2,-4(fp)
    1a04:	10820030 	cmpltui	r2,r2,2048
    1a08:	103ff81e 	bne	r2,zero,19ec <__alt_mem_onchip_memory2_0+0xf7bfd9ec>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1a0c:	0001883a 	nop
    1a10:	e037883a 	mov	sp,fp
    1a14:	df000017 	ldw	fp,0(sp)
    1a18:	dec00104 	addi	sp,sp,4
    1a1c:	f800283a 	ret

00001a20 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1a20:	defffc04 	addi	sp,sp,-16
    1a24:	df000315 	stw	fp,12(sp)
    1a28:	df000304 	addi	fp,sp,12
    1a2c:	e13ffd15 	stw	r4,-12(fp)
    1a30:	e17ffe15 	stw	r5,-8(fp)
    1a34:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1a38:	e0bfff17 	ldw	r2,-4(fp)
}
    1a3c:	e037883a 	mov	sp,fp
    1a40:	df000017 	ldw	fp,0(sp)
    1a44:	dec00104 	addi	sp,sp,4
    1a48:	f800283a 	ret

00001a4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1a4c:	defffe04 	addi	sp,sp,-8
    1a50:	dfc00115 	stw	ra,4(sp)
    1a54:	df000015 	stw	fp,0(sp)
    1a58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1a5c:	d0a00517 	ldw	r2,-32748(gp)
    1a60:	10000326 	beq	r2,zero,1a70 <alt_get_errno+0x24>
    1a64:	d0a00517 	ldw	r2,-32748(gp)
    1a68:	103ee83a 	callr	r2
    1a6c:	00000106 	br	1a74 <alt_get_errno+0x28>
    1a70:	d0a6d604 	addi	r2,gp,-25768
}
    1a74:	e037883a 	mov	sp,fp
    1a78:	dfc00117 	ldw	ra,4(sp)
    1a7c:	df000017 	ldw	fp,0(sp)
    1a80:	dec00204 	addi	sp,sp,8
    1a84:	f800283a 	ret

00001a88 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1a88:	defffa04 	addi	sp,sp,-24
    1a8c:	dfc00515 	stw	ra,20(sp)
    1a90:	df000415 	stw	fp,16(sp)
    1a94:	df000404 	addi	fp,sp,16
    1a98:	e13ffe15 	stw	r4,-8(fp)
    1a9c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1aa0:	e0bffe17 	ldw	r2,-8(fp)
    1aa4:	10000326 	beq	r2,zero,1ab4 <alt_dev_llist_insert+0x2c>
    1aa8:	e0bffe17 	ldw	r2,-8(fp)
    1aac:	10800217 	ldw	r2,8(r2)
    1ab0:	1000061e 	bne	r2,zero,1acc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    1ab4:	0001a4c0 	call	1a4c <alt_get_errno>
    1ab8:	1007883a 	mov	r3,r2
    1abc:	00800584 	movi	r2,22
    1ac0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    1ac4:	00bffa84 	movi	r2,-22
    1ac8:	00001306 	br	1b18 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1acc:	e0bffe17 	ldw	r2,-8(fp)
    1ad0:	e0ffff17 	ldw	r3,-4(fp)
    1ad4:	e0fffc15 	stw	r3,-16(fp)
    1ad8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1adc:	e0bffd17 	ldw	r2,-12(fp)
    1ae0:	e0fffc17 	ldw	r3,-16(fp)
    1ae4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1ae8:	e0bffc17 	ldw	r2,-16(fp)
    1aec:	10c00017 	ldw	r3,0(r2)
    1af0:	e0bffd17 	ldw	r2,-12(fp)
    1af4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1af8:	e0bffc17 	ldw	r2,-16(fp)
    1afc:	10800017 	ldw	r2,0(r2)
    1b00:	e0fffd17 	ldw	r3,-12(fp)
    1b04:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1b08:	e0bffc17 	ldw	r2,-16(fp)
    1b0c:	e0fffd17 	ldw	r3,-12(fp)
    1b10:	10c00015 	stw	r3,0(r2)

  return 0;  
    1b14:	0005883a 	mov	r2,zero
}
    1b18:	e037883a 	mov	sp,fp
    1b1c:	dfc00117 	ldw	ra,4(sp)
    1b20:	df000017 	ldw	fp,0(sp)
    1b24:	dec00204 	addi	sp,sp,8
    1b28:	f800283a 	ret

00001b2c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1b2c:	defffa04 	addi	sp,sp,-24
    1b30:	dfc00515 	stw	ra,20(sp)
    1b34:	df000415 	stw	fp,16(sp)
    1b38:	df000404 	addi	fp,sp,16
    1b3c:	e13ffe15 	stw	r4,-8(fp)
    1b40:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    1b44:	e0bfff17 	ldw	r2,-4(fp)
    1b48:	10800017 	ldw	r2,0(r2)
    1b4c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    1b50:	e13ffe17 	ldw	r4,-8(fp)
    1b54:	0003d780 	call	3d78 <strlen>
    1b58:	10800044 	addi	r2,r2,1
    1b5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1b60:	00000d06 	br	1b98 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    1b64:	e0bffc17 	ldw	r2,-16(fp)
    1b68:	10800217 	ldw	r2,8(r2)
    1b6c:	e0fffd17 	ldw	r3,-12(fp)
    1b70:	180d883a 	mov	r6,r3
    1b74:	e17ffe17 	ldw	r5,-8(fp)
    1b78:	1009883a 	mov	r4,r2
    1b7c:	00034a00 	call	34a0 <memcmp>
    1b80:	1000021e 	bne	r2,zero,1b8c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    1b84:	e0bffc17 	ldw	r2,-16(fp)
    1b88:	00000706 	br	1ba8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    1b8c:	e0bffc17 	ldw	r2,-16(fp)
    1b90:	10800017 	ldw	r2,0(r2)
    1b94:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1b98:	e0fffc17 	ldw	r3,-16(fp)
    1b9c:	e0bfff17 	ldw	r2,-4(fp)
    1ba0:	18bff01e 	bne	r3,r2,1b64 <__alt_mem_onchip_memory2_0+0xf7bfdb64>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    1ba4:	0005883a 	mov	r2,zero
}
    1ba8:	e037883a 	mov	sp,fp
    1bac:	dfc00117 	ldw	ra,4(sp)
    1bb0:	df000017 	ldw	fp,0(sp)
    1bb4:	dec00204 	addi	sp,sp,8
    1bb8:	f800283a 	ret

00001bbc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1bbc:	defffe04 	addi	sp,sp,-8
    1bc0:	dfc00115 	stw	ra,4(sp)
    1bc4:	df000015 	stw	fp,0(sp)
    1bc8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    1bcc:	01440004 	movi	r5,4096
    1bd0:	0009883a 	mov	r4,zero
    1bd4:	00024dc0 	call	24dc <alt_icache_flush>
#endif
}
    1bd8:	0001883a 	nop
    1bdc:	e037883a 	mov	sp,fp
    1be0:	dfc00117 	ldw	ra,4(sp)
    1be4:	df000017 	ldw	fp,0(sp)
    1be8:	dec00204 	addi	sp,sp,8
    1bec:	f800283a 	ret

00001bf0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    1bf0:	defff904 	addi	sp,sp,-28
    1bf4:	dfc00615 	stw	ra,24(sp)
    1bf8:	df000515 	stw	fp,20(sp)
    1bfc:	df000504 	addi	fp,sp,20
    1c00:	e13ffc15 	stw	r4,-16(fp)
    1c04:	e17ffd15 	stw	r5,-12(fp)
    1c08:	e1bffe15 	stw	r6,-8(fp)
    1c0c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    1c10:	e1bfff17 	ldw	r6,-4(fp)
    1c14:	e17ffe17 	ldw	r5,-8(fp)
    1c18:	e13ffd17 	ldw	r4,-12(fp)
    1c1c:	0001fb00 	call	1fb0 <open>
    1c20:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    1c24:	e0bffb17 	ldw	r2,-20(fp)
    1c28:	10001c16 	blt	r2,zero,1c9c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    1c2c:	00800034 	movhi	r2,0
    1c30:	109b8804 	addi	r2,r2,28192
    1c34:	e0fffb17 	ldw	r3,-20(fp)
    1c38:	18c00324 	muli	r3,r3,12
    1c3c:	10c5883a 	add	r2,r2,r3
    1c40:	10c00017 	ldw	r3,0(r2)
    1c44:	e0bffc17 	ldw	r2,-16(fp)
    1c48:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    1c4c:	00800034 	movhi	r2,0
    1c50:	109b8804 	addi	r2,r2,28192
    1c54:	e0fffb17 	ldw	r3,-20(fp)
    1c58:	18c00324 	muli	r3,r3,12
    1c5c:	10c5883a 	add	r2,r2,r3
    1c60:	10800104 	addi	r2,r2,4
    1c64:	10c00017 	ldw	r3,0(r2)
    1c68:	e0bffc17 	ldw	r2,-16(fp)
    1c6c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    1c70:	00800034 	movhi	r2,0
    1c74:	109b8804 	addi	r2,r2,28192
    1c78:	e0fffb17 	ldw	r3,-20(fp)
    1c7c:	18c00324 	muli	r3,r3,12
    1c80:	10c5883a 	add	r2,r2,r3
    1c84:	10800204 	addi	r2,r2,8
    1c88:	10c00017 	ldw	r3,0(r2)
    1c8c:	e0bffc17 	ldw	r2,-16(fp)
    1c90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    1c94:	e13ffb17 	ldw	r4,-20(fp)
    1c98:	00021040 	call	2104 <alt_release_fd>
  }
} 
    1c9c:	0001883a 	nop
    1ca0:	e037883a 	mov	sp,fp
    1ca4:	dfc00117 	ldw	ra,4(sp)
    1ca8:	df000017 	ldw	fp,0(sp)
    1cac:	dec00204 	addi	sp,sp,8
    1cb0:	f800283a 	ret

00001cb4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1cb4:	defffb04 	addi	sp,sp,-20
    1cb8:	dfc00415 	stw	ra,16(sp)
    1cbc:	df000315 	stw	fp,12(sp)
    1cc0:	df000304 	addi	fp,sp,12
    1cc4:	e13ffd15 	stw	r4,-12(fp)
    1cc8:	e17ffe15 	stw	r5,-8(fp)
    1ccc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    1cd0:	01c07fc4 	movi	r7,511
    1cd4:	01800044 	movi	r6,1
    1cd8:	e17ffd17 	ldw	r5,-12(fp)
    1cdc:	01000034 	movhi	r4,0
    1ce0:	211b8b04 	addi	r4,r4,28204
    1ce4:	0001bf00 	call	1bf0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1ce8:	01c07fc4 	movi	r7,511
    1cec:	000d883a 	mov	r6,zero
    1cf0:	e17ffe17 	ldw	r5,-8(fp)
    1cf4:	01000034 	movhi	r4,0
    1cf8:	211b8804 	addi	r4,r4,28192
    1cfc:	0001bf00 	call	1bf0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1d00:	01c07fc4 	movi	r7,511
    1d04:	01800044 	movi	r6,1
    1d08:	e17fff17 	ldw	r5,-4(fp)
    1d0c:	01000034 	movhi	r4,0
    1d10:	211b8e04 	addi	r4,r4,28216
    1d14:	0001bf00 	call	1bf0 <alt_open_fd>
}  
    1d18:	0001883a 	nop
    1d1c:	e037883a 	mov	sp,fp
    1d20:	dfc00117 	ldw	ra,4(sp)
    1d24:	df000017 	ldw	fp,0(sp)
    1d28:	dec00204 	addi	sp,sp,8
    1d2c:	f800283a 	ret

00001d30 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    1d30:	defff004 	addi	sp,sp,-64
    1d34:	df000f15 	stw	fp,60(sp)
    1d38:	df000f04 	addi	fp,sp,60
    1d3c:	e13ffd15 	stw	r4,-12(fp)
    1d40:	e17ffe15 	stw	r5,-8(fp)
    1d44:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    1d48:	00bffa84 	movi	r2,-22
    1d4c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1d50:	e0bffd17 	ldw	r2,-12(fp)
    1d54:	10800828 	cmpgeui	r2,r2,32
    1d58:	1000501e 	bne	r2,zero,1e9c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1d5c:	0005303a 	rdctl	r2,status
    1d60:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1d64:	e0fff617 	ldw	r3,-40(fp)
    1d68:	00bfff84 	movi	r2,-2
    1d6c:	1884703a 	and	r2,r3,r2
    1d70:	1001703a 	wrctl	status,r2
  
  return context;
    1d74:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    1d78:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    1d7c:	00800074 	movhi	r2,1
    1d80:	10a4d704 	addi	r2,r2,-27812
    1d84:	e0fffd17 	ldw	r3,-12(fp)
    1d88:	180690fa 	slli	r3,r3,3
    1d8c:	10c5883a 	add	r2,r2,r3
    1d90:	e0ffff17 	ldw	r3,-4(fp)
    1d94:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    1d98:	00800074 	movhi	r2,1
    1d9c:	10a4d704 	addi	r2,r2,-27812
    1da0:	e0fffd17 	ldw	r3,-12(fp)
    1da4:	180690fa 	slli	r3,r3,3
    1da8:	10c5883a 	add	r2,r2,r3
    1dac:	10800104 	addi	r2,r2,4
    1db0:	e0fffe17 	ldw	r3,-8(fp)
    1db4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    1db8:	e0bfff17 	ldw	r2,-4(fp)
    1dbc:	10001926 	beq	r2,zero,1e24 <alt_irq_register+0xf4>
    1dc0:	e0bffd17 	ldw	r2,-12(fp)
    1dc4:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1dc8:	0005303a 	rdctl	r2,status
    1dcc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1dd0:	e0fff717 	ldw	r3,-36(fp)
    1dd4:	00bfff84 	movi	r2,-2
    1dd8:	1884703a 	and	r2,r3,r2
    1ddc:	1001703a 	wrctl	status,r2
  
  return context;
    1de0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1de4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    1de8:	00c00044 	movi	r3,1
    1dec:	e0bff217 	ldw	r2,-56(fp)
    1df0:	1884983a 	sll	r2,r3,r2
    1df4:	1007883a 	mov	r3,r2
    1df8:	d0a6d217 	ldw	r2,-25784(gp)
    1dfc:	1884b03a 	or	r2,r3,r2
    1e00:	d0a6d215 	stw	r2,-25784(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1e04:	d0a6d217 	ldw	r2,-25784(gp)
    1e08:	100170fa 	wrctl	ienable,r2
    1e0c:	e0bff817 	ldw	r2,-32(fp)
    1e10:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1e14:	e0bff917 	ldw	r2,-28(fp)
    1e18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1e1c:	0005883a 	mov	r2,zero
    1e20:	00001906 	br	1e88 <alt_irq_register+0x158>
    1e24:	e0bffd17 	ldw	r2,-12(fp)
    1e28:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1e2c:	0005303a 	rdctl	r2,status
    1e30:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1e34:	e0fffa17 	ldw	r3,-24(fp)
    1e38:	00bfff84 	movi	r2,-2
    1e3c:	1884703a 	and	r2,r3,r2
    1e40:	1001703a 	wrctl	status,r2
  
  return context;
    1e44:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1e48:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    1e4c:	00c00044 	movi	r3,1
    1e50:	e0bff417 	ldw	r2,-48(fp)
    1e54:	1884983a 	sll	r2,r3,r2
    1e58:	0084303a 	nor	r2,zero,r2
    1e5c:	1007883a 	mov	r3,r2
    1e60:	d0a6d217 	ldw	r2,-25784(gp)
    1e64:	1884703a 	and	r2,r3,r2
    1e68:	d0a6d215 	stw	r2,-25784(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1e6c:	d0a6d217 	ldw	r2,-25784(gp)
    1e70:	100170fa 	wrctl	ienable,r2
    1e74:	e0bffb17 	ldw	r2,-20(fp)
    1e78:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1e7c:	e0bffc17 	ldw	r2,-16(fp)
    1e80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1e84:	0005883a 	mov	r2,zero
    1e88:	e0bff115 	stw	r2,-60(fp)
    1e8c:	e0bff317 	ldw	r2,-52(fp)
    1e90:	e0bff515 	stw	r2,-44(fp)
    1e94:	e0bff517 	ldw	r2,-44(fp)
    1e98:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    1e9c:	e0bff117 	ldw	r2,-60(fp)
}
    1ea0:	e037883a 	mov	sp,fp
    1ea4:	df000017 	ldw	fp,0(sp)
    1ea8:	dec00104 	addi	sp,sp,4
    1eac:	f800283a 	ret

00001eb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1eb0:	defffe04 	addi	sp,sp,-8
    1eb4:	dfc00115 	stw	ra,4(sp)
    1eb8:	df000015 	stw	fp,0(sp)
    1ebc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1ec0:	d0a00517 	ldw	r2,-32748(gp)
    1ec4:	10000326 	beq	r2,zero,1ed4 <alt_get_errno+0x24>
    1ec8:	d0a00517 	ldw	r2,-32748(gp)
    1ecc:	103ee83a 	callr	r2
    1ed0:	00000106 	br	1ed8 <alt_get_errno+0x28>
    1ed4:	d0a6d604 	addi	r2,gp,-25768
}
    1ed8:	e037883a 	mov	sp,fp
    1edc:	dfc00117 	ldw	ra,4(sp)
    1ee0:	df000017 	ldw	fp,0(sp)
    1ee4:	dec00204 	addi	sp,sp,8
    1ee8:	f800283a 	ret

00001eec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    1eec:	defffd04 	addi	sp,sp,-12
    1ef0:	df000215 	stw	fp,8(sp)
    1ef4:	df000204 	addi	fp,sp,8
    1ef8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    1efc:	e0bfff17 	ldw	r2,-4(fp)
    1f00:	10800217 	ldw	r2,8(r2)
    1f04:	10d00034 	orhi	r3,r2,16384
    1f08:	e0bfff17 	ldw	r2,-4(fp)
    1f0c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1f10:	e03ffe15 	stw	zero,-8(fp)
    1f14:	00001d06 	br	1f8c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1f18:	00800034 	movhi	r2,0
    1f1c:	109b8804 	addi	r2,r2,28192
    1f20:	e0fffe17 	ldw	r3,-8(fp)
    1f24:	18c00324 	muli	r3,r3,12
    1f28:	10c5883a 	add	r2,r2,r3
    1f2c:	10c00017 	ldw	r3,0(r2)
    1f30:	e0bfff17 	ldw	r2,-4(fp)
    1f34:	10800017 	ldw	r2,0(r2)
    1f38:	1880111e 	bne	r3,r2,1f80 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1f3c:	00800034 	movhi	r2,0
    1f40:	109b8804 	addi	r2,r2,28192
    1f44:	e0fffe17 	ldw	r3,-8(fp)
    1f48:	18c00324 	muli	r3,r3,12
    1f4c:	10c5883a 	add	r2,r2,r3
    1f50:	10800204 	addi	r2,r2,8
    1f54:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1f58:	1000090e 	bge	r2,zero,1f80 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    1f5c:	e0bffe17 	ldw	r2,-8(fp)
    1f60:	10c00324 	muli	r3,r2,12
    1f64:	00800034 	movhi	r2,0
    1f68:	109b8804 	addi	r2,r2,28192
    1f6c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1f70:	e0bfff17 	ldw	r2,-4(fp)
    1f74:	18800226 	beq	r3,r2,1f80 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    1f78:	00bffcc4 	movi	r2,-13
    1f7c:	00000806 	br	1fa0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1f80:	e0bffe17 	ldw	r2,-8(fp)
    1f84:	10800044 	addi	r2,r2,1
    1f88:	e0bffe15 	stw	r2,-8(fp)
    1f8c:	d0a00417 	ldw	r2,-32752(gp)
    1f90:	1007883a 	mov	r3,r2
    1f94:	e0bffe17 	ldw	r2,-8(fp)
    1f98:	18bfdf2e 	bgeu	r3,r2,1f18 <__alt_mem_onchip_memory2_0+0xf7bfdf18>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    1f9c:	0005883a 	mov	r2,zero
}
    1fa0:	e037883a 	mov	sp,fp
    1fa4:	df000017 	ldw	fp,0(sp)
    1fa8:	dec00104 	addi	sp,sp,4
    1fac:	f800283a 	ret

00001fb0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1fb0:	defff604 	addi	sp,sp,-40
    1fb4:	dfc00915 	stw	ra,36(sp)
    1fb8:	df000815 	stw	fp,32(sp)
    1fbc:	df000804 	addi	fp,sp,32
    1fc0:	e13ffd15 	stw	r4,-12(fp)
    1fc4:	e17ffe15 	stw	r5,-8(fp)
    1fc8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    1fcc:	00bfffc4 	movi	r2,-1
    1fd0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    1fd4:	00bffb44 	movi	r2,-19
    1fd8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    1fdc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1fe0:	d1600204 	addi	r5,gp,-32760
    1fe4:	e13ffd17 	ldw	r4,-12(fp)
    1fe8:	0001b2c0 	call	1b2c <alt_find_dev>
    1fec:	e0bff815 	stw	r2,-32(fp)
    1ff0:	e0bff817 	ldw	r2,-32(fp)
    1ff4:	1000051e 	bne	r2,zero,200c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    1ff8:	e13ffd17 	ldw	r4,-12(fp)
    1ffc:	00023300 	call	2330 <alt_find_file>
    2000:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    2004:	00800044 	movi	r2,1
    2008:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    200c:	e0bff817 	ldw	r2,-32(fp)
    2010:	10002926 	beq	r2,zero,20b8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    2014:	e13ff817 	ldw	r4,-32(fp)
    2018:	00024380 	call	2438 <alt_get_fd>
    201c:	e0bff915 	stw	r2,-28(fp)
    2020:	e0bff917 	ldw	r2,-28(fp)
    2024:	1000030e 	bge	r2,zero,2034 <open+0x84>
    {
      status = index;
    2028:	e0bff917 	ldw	r2,-28(fp)
    202c:	e0bffa15 	stw	r2,-24(fp)
    2030:	00002306 	br	20c0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    2034:	e0bff917 	ldw	r2,-28(fp)
    2038:	10c00324 	muli	r3,r2,12
    203c:	00800034 	movhi	r2,0
    2040:	109b8804 	addi	r2,r2,28192
    2044:	1885883a 	add	r2,r3,r2
    2048:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    204c:	e0fffe17 	ldw	r3,-8(fp)
    2050:	00900034 	movhi	r2,16384
    2054:	10bfffc4 	addi	r2,r2,-1
    2058:	1886703a 	and	r3,r3,r2
    205c:	e0bffc17 	ldw	r2,-16(fp)
    2060:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2064:	e0bffb17 	ldw	r2,-20(fp)
    2068:	1000051e 	bne	r2,zero,2080 <open+0xd0>
    206c:	e13ffc17 	ldw	r4,-16(fp)
    2070:	0001eec0 	call	1eec <alt_file_locked>
    2074:	e0bffa15 	stw	r2,-24(fp)
    2078:	e0bffa17 	ldw	r2,-24(fp)
    207c:	10001016 	blt	r2,zero,20c0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2080:	e0bff817 	ldw	r2,-32(fp)
    2084:	10800317 	ldw	r2,12(r2)
    2088:	10000826 	beq	r2,zero,20ac <open+0xfc>
    208c:	e0bff817 	ldw	r2,-32(fp)
    2090:	10800317 	ldw	r2,12(r2)
    2094:	e1ffff17 	ldw	r7,-4(fp)
    2098:	e1bffe17 	ldw	r6,-8(fp)
    209c:	e17ffd17 	ldw	r5,-12(fp)
    20a0:	e13ffc17 	ldw	r4,-16(fp)
    20a4:	103ee83a 	callr	r2
    20a8:	00000106 	br	20b0 <open+0x100>
    20ac:	0005883a 	mov	r2,zero
    20b0:	e0bffa15 	stw	r2,-24(fp)
    20b4:	00000206 	br	20c0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    20b8:	00bffb44 	movi	r2,-19
    20bc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    20c0:	e0bffa17 	ldw	r2,-24(fp)
    20c4:	1000090e 	bge	r2,zero,20ec <open+0x13c>
  {
    alt_release_fd (index);  
    20c8:	e13ff917 	ldw	r4,-28(fp)
    20cc:	00021040 	call	2104 <alt_release_fd>
    ALT_ERRNO = -status;
    20d0:	0001eb00 	call	1eb0 <alt_get_errno>
    20d4:	1007883a 	mov	r3,r2
    20d8:	e0bffa17 	ldw	r2,-24(fp)
    20dc:	0085c83a 	sub	r2,zero,r2
    20e0:	18800015 	stw	r2,0(r3)
    return -1;
    20e4:	00bfffc4 	movi	r2,-1
    20e8:	00000106 	br	20f0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    20ec:	e0bff917 	ldw	r2,-28(fp)
}
    20f0:	e037883a 	mov	sp,fp
    20f4:	dfc00117 	ldw	ra,4(sp)
    20f8:	df000017 	ldw	fp,0(sp)
    20fc:	dec00204 	addi	sp,sp,8
    2100:	f800283a 	ret

00002104 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2104:	defffe04 	addi	sp,sp,-8
    2108:	df000115 	stw	fp,4(sp)
    210c:	df000104 	addi	fp,sp,4
    2110:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    2114:	e0bfff17 	ldw	r2,-4(fp)
    2118:	108000d0 	cmplti	r2,r2,3
    211c:	10000d1e 	bne	r2,zero,2154 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    2120:	00800034 	movhi	r2,0
    2124:	109b8804 	addi	r2,r2,28192
    2128:	e0ffff17 	ldw	r3,-4(fp)
    212c:	18c00324 	muli	r3,r3,12
    2130:	10c5883a 	add	r2,r2,r3
    2134:	10800204 	addi	r2,r2,8
    2138:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    213c:	00800034 	movhi	r2,0
    2140:	109b8804 	addi	r2,r2,28192
    2144:	e0ffff17 	ldw	r3,-4(fp)
    2148:	18c00324 	muli	r3,r3,12
    214c:	10c5883a 	add	r2,r2,r3
    2150:	10000015 	stw	zero,0(r2)
  }
}
    2154:	0001883a 	nop
    2158:	e037883a 	mov	sp,fp
    215c:	df000017 	ldw	fp,0(sp)
    2160:	dec00104 	addi	sp,sp,4
    2164:	f800283a 	ret

00002168 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    2168:	defffa04 	addi	sp,sp,-24
    216c:	df000515 	stw	fp,20(sp)
    2170:	df000504 	addi	fp,sp,20
    2174:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2178:	0005303a 	rdctl	r2,status
    217c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2180:	e0fffc17 	ldw	r3,-16(fp)
    2184:	00bfff84 	movi	r2,-2
    2188:	1884703a 	and	r2,r3,r2
    218c:	1001703a 	wrctl	status,r2
  
  return context;
    2190:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    2194:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    2198:	e0bfff17 	ldw	r2,-4(fp)
    219c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    21a0:	e0bffd17 	ldw	r2,-12(fp)
    21a4:	10800017 	ldw	r2,0(r2)
    21a8:	e0fffd17 	ldw	r3,-12(fp)
    21ac:	18c00117 	ldw	r3,4(r3)
    21b0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    21b4:	e0bffd17 	ldw	r2,-12(fp)
    21b8:	10800117 	ldw	r2,4(r2)
    21bc:	e0fffd17 	ldw	r3,-12(fp)
    21c0:	18c00017 	ldw	r3,0(r3)
    21c4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    21c8:	e0bffd17 	ldw	r2,-12(fp)
    21cc:	e0fffd17 	ldw	r3,-12(fp)
    21d0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    21d4:	e0bffd17 	ldw	r2,-12(fp)
    21d8:	e0fffd17 	ldw	r3,-12(fp)
    21dc:	10c00015 	stw	r3,0(r2)
    21e0:	e0bffb17 	ldw	r2,-20(fp)
    21e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    21e8:	e0bffe17 	ldw	r2,-8(fp)
    21ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    21f0:	0001883a 	nop
    21f4:	e037883a 	mov	sp,fp
    21f8:	df000017 	ldw	fp,0(sp)
    21fc:	dec00104 	addi	sp,sp,4
    2200:	f800283a 	ret

00002204 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2204:	defffb04 	addi	sp,sp,-20
    2208:	dfc00415 	stw	ra,16(sp)
    220c:	df000315 	stw	fp,12(sp)
    2210:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2214:	d0a00717 	ldw	r2,-32740(gp)
    2218:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    221c:	d0a6d417 	ldw	r2,-25776(gp)
    2220:	10800044 	addi	r2,r2,1
    2224:	d0a6d415 	stw	r2,-25776(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2228:	00002e06 	br	22e4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    222c:	e0bffd17 	ldw	r2,-12(fp)
    2230:	10800017 	ldw	r2,0(r2)
    2234:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2238:	e0bffd17 	ldw	r2,-12(fp)
    223c:	10800403 	ldbu	r2,16(r2)
    2240:	10803fcc 	andi	r2,r2,255
    2244:	10000426 	beq	r2,zero,2258 <alt_tick+0x54>
    2248:	d0a6d417 	ldw	r2,-25776(gp)
    224c:	1000021e 	bne	r2,zero,2258 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    2250:	e0bffd17 	ldw	r2,-12(fp)
    2254:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2258:	e0bffd17 	ldw	r2,-12(fp)
    225c:	10800217 	ldw	r2,8(r2)
    2260:	d0e6d417 	ldw	r3,-25776(gp)
    2264:	18801d36 	bltu	r3,r2,22dc <alt_tick+0xd8>
    2268:	e0bffd17 	ldw	r2,-12(fp)
    226c:	10800403 	ldbu	r2,16(r2)
    2270:	10803fcc 	andi	r2,r2,255
    2274:	1000191e 	bne	r2,zero,22dc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    2278:	e0bffd17 	ldw	r2,-12(fp)
    227c:	10800317 	ldw	r2,12(r2)
    2280:	e0fffd17 	ldw	r3,-12(fp)
    2284:	18c00517 	ldw	r3,20(r3)
    2288:	1809883a 	mov	r4,r3
    228c:	103ee83a 	callr	r2
    2290:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2294:	e0bfff17 	ldw	r2,-4(fp)
    2298:	1000031e 	bne	r2,zero,22a8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    229c:	e13ffd17 	ldw	r4,-12(fp)
    22a0:	00021680 	call	2168 <alt_alarm_stop>
    22a4:	00000d06 	br	22dc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    22a8:	e0bffd17 	ldw	r2,-12(fp)
    22ac:	10c00217 	ldw	r3,8(r2)
    22b0:	e0bfff17 	ldw	r2,-4(fp)
    22b4:	1887883a 	add	r3,r3,r2
    22b8:	e0bffd17 	ldw	r2,-12(fp)
    22bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    22c0:	e0bffd17 	ldw	r2,-12(fp)
    22c4:	10c00217 	ldw	r3,8(r2)
    22c8:	d0a6d417 	ldw	r2,-25776(gp)
    22cc:	1880032e 	bgeu	r3,r2,22dc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    22d0:	e0bffd17 	ldw	r2,-12(fp)
    22d4:	00c00044 	movi	r3,1
    22d8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    22dc:	e0bffe17 	ldw	r2,-8(fp)
    22e0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    22e4:	e0fffd17 	ldw	r3,-12(fp)
    22e8:	d0a00704 	addi	r2,gp,-32740
    22ec:	18bfcf1e 	bne	r3,r2,222c <__alt_mem_onchip_memory2_0+0xf7bfe22c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    22f0:	0001883a 	nop
}
    22f4:	0001883a 	nop
    22f8:	e037883a 	mov	sp,fp
    22fc:	dfc00117 	ldw	ra,4(sp)
    2300:	df000017 	ldw	fp,0(sp)
    2304:	dec00204 	addi	sp,sp,8
    2308:	f800283a 	ret

0000230c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    230c:	deffff04 	addi	sp,sp,-4
    2310:	df000015 	stw	fp,0(sp)
    2314:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2318:	000170fa 	wrctl	ienable,zero
}
    231c:	0001883a 	nop
    2320:	e037883a 	mov	sp,fp
    2324:	df000017 	ldw	fp,0(sp)
    2328:	dec00104 	addi	sp,sp,4
    232c:	f800283a 	ret

00002330 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2330:	defffb04 	addi	sp,sp,-20
    2334:	dfc00415 	stw	ra,16(sp)
    2338:	df000315 	stw	fp,12(sp)
    233c:	df000304 	addi	fp,sp,12
    2340:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2344:	d0a00017 	ldw	r2,-32768(gp)
    2348:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    234c:	00003106 	br	2414 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    2350:	e0bffd17 	ldw	r2,-12(fp)
    2354:	10800217 	ldw	r2,8(r2)
    2358:	1009883a 	mov	r4,r2
    235c:	0003d780 	call	3d78 <strlen>
    2360:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    2364:	e0bffd17 	ldw	r2,-12(fp)
    2368:	10c00217 	ldw	r3,8(r2)
    236c:	e0bffe17 	ldw	r2,-8(fp)
    2370:	10bfffc4 	addi	r2,r2,-1
    2374:	1885883a 	add	r2,r3,r2
    2378:	10800003 	ldbu	r2,0(r2)
    237c:	10803fcc 	andi	r2,r2,255
    2380:	1080201c 	xori	r2,r2,128
    2384:	10bfe004 	addi	r2,r2,-128
    2388:	10800bd8 	cmpnei	r2,r2,47
    238c:	1000031e 	bne	r2,zero,239c <alt_find_file+0x6c>
    {
      len -= 1;
    2390:	e0bffe17 	ldw	r2,-8(fp)
    2394:	10bfffc4 	addi	r2,r2,-1
    2398:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    239c:	e0bffe17 	ldw	r2,-8(fp)
    23a0:	e0ffff17 	ldw	r3,-4(fp)
    23a4:	1885883a 	add	r2,r3,r2
    23a8:	10800003 	ldbu	r2,0(r2)
    23ac:	10803fcc 	andi	r2,r2,255
    23b0:	1080201c 	xori	r2,r2,128
    23b4:	10bfe004 	addi	r2,r2,-128
    23b8:	10800be0 	cmpeqi	r2,r2,47
    23bc:	1000081e 	bne	r2,zero,23e0 <alt_find_file+0xb0>
    23c0:	e0bffe17 	ldw	r2,-8(fp)
    23c4:	e0ffff17 	ldw	r3,-4(fp)
    23c8:	1885883a 	add	r2,r3,r2
    23cc:	10800003 	ldbu	r2,0(r2)
    23d0:	10803fcc 	andi	r2,r2,255
    23d4:	1080201c 	xori	r2,r2,128
    23d8:	10bfe004 	addi	r2,r2,-128
    23dc:	10000a1e 	bne	r2,zero,2408 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    23e0:	e0bffd17 	ldw	r2,-12(fp)
    23e4:	10800217 	ldw	r2,8(r2)
    23e8:	e0fffe17 	ldw	r3,-8(fp)
    23ec:	180d883a 	mov	r6,r3
    23f0:	e17fff17 	ldw	r5,-4(fp)
    23f4:	1009883a 	mov	r4,r2
    23f8:	00034a00 	call	34a0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    23fc:	1000021e 	bne	r2,zero,2408 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    2400:	e0bffd17 	ldw	r2,-12(fp)
    2404:	00000706 	br	2424 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    2408:	e0bffd17 	ldw	r2,-12(fp)
    240c:	10800017 	ldw	r2,0(r2)
    2410:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2414:	e0fffd17 	ldw	r3,-12(fp)
    2418:	d0a00004 	addi	r2,gp,-32768
    241c:	18bfcc1e 	bne	r3,r2,2350 <__alt_mem_onchip_memory2_0+0xf7bfe350>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    2420:	0005883a 	mov	r2,zero
}
    2424:	e037883a 	mov	sp,fp
    2428:	dfc00117 	ldw	ra,4(sp)
    242c:	df000017 	ldw	fp,0(sp)
    2430:	dec00204 	addi	sp,sp,8
    2434:	f800283a 	ret

00002438 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2438:	defffc04 	addi	sp,sp,-16
    243c:	df000315 	stw	fp,12(sp)
    2440:	df000304 	addi	fp,sp,12
    2444:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    2448:	00bffa04 	movi	r2,-24
    244c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2450:	e03ffd15 	stw	zero,-12(fp)
    2454:	00001906 	br	24bc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    2458:	00800034 	movhi	r2,0
    245c:	109b8804 	addi	r2,r2,28192
    2460:	e0fffd17 	ldw	r3,-12(fp)
    2464:	18c00324 	muli	r3,r3,12
    2468:	10c5883a 	add	r2,r2,r3
    246c:	10800017 	ldw	r2,0(r2)
    2470:	10000f1e 	bne	r2,zero,24b0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    2474:	00800034 	movhi	r2,0
    2478:	109b8804 	addi	r2,r2,28192
    247c:	e0fffd17 	ldw	r3,-12(fp)
    2480:	18c00324 	muli	r3,r3,12
    2484:	10c5883a 	add	r2,r2,r3
    2488:	e0ffff17 	ldw	r3,-4(fp)
    248c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    2490:	d0e00417 	ldw	r3,-32752(gp)
    2494:	e0bffd17 	ldw	r2,-12(fp)
    2498:	1880020e 	bge	r3,r2,24a4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    249c:	e0bffd17 	ldw	r2,-12(fp)
    24a0:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
    24a4:	e0bffd17 	ldw	r2,-12(fp)
    24a8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    24ac:	00000606 	br	24c8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    24b0:	e0bffd17 	ldw	r2,-12(fp)
    24b4:	10800044 	addi	r2,r2,1
    24b8:	e0bffd15 	stw	r2,-12(fp)
    24bc:	e0bffd17 	ldw	r2,-12(fp)
    24c0:	10800810 	cmplti	r2,r2,32
    24c4:	103fe41e 	bne	r2,zero,2458 <__alt_mem_onchip_memory2_0+0xf7bfe458>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    24c8:	e0bffe17 	ldw	r2,-8(fp)
}
    24cc:	e037883a 	mov	sp,fp
    24d0:	df000017 	ldw	fp,0(sp)
    24d4:	dec00104 	addi	sp,sp,4
    24d8:	f800283a 	ret

000024dc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    24dc:	defffb04 	addi	sp,sp,-20
    24e0:	df000415 	stw	fp,16(sp)
    24e4:	df000404 	addi	fp,sp,16
    24e8:	e13ffe15 	stw	r4,-8(fp)
    24ec:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    24f0:	e0bfff17 	ldw	r2,-4(fp)
    24f4:	10840070 	cmpltui	r2,r2,4097
    24f8:	1000021e 	bne	r2,zero,2504 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    24fc:	00840004 	movi	r2,4096
    2500:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    2504:	e0fffe17 	ldw	r3,-8(fp)
    2508:	e0bfff17 	ldw	r2,-4(fp)
    250c:	1885883a 	add	r2,r3,r2
    2510:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2514:	e0bffe17 	ldw	r2,-8(fp)
    2518:	e0bffc15 	stw	r2,-16(fp)
    251c:	00000506 	br	2534 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    2520:	e0bffc17 	ldw	r2,-16(fp)
    2524:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2528:	e0bffc17 	ldw	r2,-16(fp)
    252c:	10800804 	addi	r2,r2,32
    2530:	e0bffc15 	stw	r2,-16(fp)
    2534:	e0fffc17 	ldw	r3,-16(fp)
    2538:	e0bffd17 	ldw	r2,-12(fp)
    253c:	18bff836 	bltu	r3,r2,2520 <__alt_mem_onchip_memory2_0+0xf7bfe520>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    2540:	e0bffe17 	ldw	r2,-8(fp)
    2544:	108007cc 	andi	r2,r2,31
    2548:	10000226 	beq	r2,zero,2554 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    254c:	e0bffc17 	ldw	r2,-16(fp)
    2550:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2554:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    2558:	0001883a 	nop
    255c:	e037883a 	mov	sp,fp
    2560:	df000017 	ldw	fp,0(sp)
    2564:	dec00104 	addi	sp,sp,4
    2568:	f800283a 	ret

0000256c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    256c:	defffe04 	addi	sp,sp,-8
    2570:	df000115 	stw	fp,4(sp)
    2574:	df000104 	addi	fp,sp,4
    2578:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    257c:	e0bfff17 	ldw	r2,-4(fp)
    2580:	10bffe84 	addi	r2,r2,-6
    2584:	10c00428 	cmpgeui	r3,r2,16
    2588:	18001a1e 	bne	r3,zero,25f4 <alt_exception_cause_generated_bad_addr+0x88>
    258c:	100690ba 	slli	r3,r2,2
    2590:	00800034 	movhi	r2,0
    2594:	10896904 	addi	r2,r2,9636
    2598:	1885883a 	add	r2,r3,r2
    259c:	10800017 	ldw	r2,0(r2)
    25a0:	1000683a 	jmp	r2
    25a4:	000025e4 	muli	zero,zero,151
    25a8:	000025e4 	muli	zero,zero,151
    25ac:	000025f4 	movhi	zero,151
    25b0:	000025f4 	movhi	zero,151
    25b4:	000025f4 	movhi	zero,151
    25b8:	000025e4 	muli	zero,zero,151
    25bc:	000025ec 	andhi	zero,zero,151
    25c0:	000025f4 	movhi	zero,151
    25c4:	000025e4 	muli	zero,zero,151
    25c8:	000025e4 	muli	zero,zero,151
    25cc:	000025f4 	movhi	zero,151
    25d0:	000025e4 	muli	zero,zero,151
    25d4:	000025ec 	andhi	zero,zero,151
    25d8:	000025f4 	movhi	zero,151
    25dc:	000025f4 	movhi	zero,151
    25e0:	000025e4 	muli	zero,zero,151
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    25e4:	00800044 	movi	r2,1
    25e8:	00000306 	br	25f8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    25ec:	0005883a 	mov	r2,zero
    25f0:	00000106 	br	25f8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    25f4:	0005883a 	mov	r2,zero
  }
}
    25f8:	e037883a 	mov	sp,fp
    25fc:	df000017 	ldw	fp,0(sp)
    2600:	dec00104 	addi	sp,sp,4
    2604:	f800283a 	ret

00002608 <exit>:
    2608:	defffe04 	addi	sp,sp,-8
    260c:	000b883a 	mov	r5,zero
    2610:	dc000015 	stw	r16,0(sp)
    2614:	dfc00115 	stw	ra,4(sp)
    2618:	2021883a 	mov	r16,r4
    261c:	0003f640 	call	3f64 <__call_exitprocs>
    2620:	00800034 	movhi	r2,0
    2624:	109dfc04 	addi	r2,r2,30704
    2628:	11000017 	ldw	r4,0(r2)
    262c:	20800f17 	ldw	r2,60(r4)
    2630:	10000126 	beq	r2,zero,2638 <exit+0x30>
    2634:	103ee83a 	callr	r2
    2638:	8009883a 	mov	r4,r16
    263c:	00055e40 	call	55e4 <_exit>

00002640 <_fputs_r>:
    2640:	defff804 	addi	sp,sp,-32
    2644:	dc400615 	stw	r17,24(sp)
    2648:	2023883a 	mov	r17,r4
    264c:	2809883a 	mov	r4,r5
    2650:	dc000515 	stw	r16,20(sp)
    2654:	dfc00715 	stw	ra,28(sp)
    2658:	3021883a 	mov	r16,r6
    265c:	d9400315 	stw	r5,12(sp)
    2660:	0003d780 	call	3d78 <strlen>
    2664:	d8800215 	stw	r2,8(sp)
    2668:	d8800415 	stw	r2,16(sp)
    266c:	d8800304 	addi	r2,sp,12
    2670:	d8800015 	stw	r2,0(sp)
    2674:	00800044 	movi	r2,1
    2678:	d8800115 	stw	r2,4(sp)
    267c:	88000226 	beq	r17,zero,2688 <_fputs_r+0x48>
    2680:	88800e17 	ldw	r2,56(r17)
    2684:	10001226 	beq	r2,zero,26d0 <_fputs_r+0x90>
    2688:	8080030b 	ldhu	r2,12(r16)
    268c:	10c8000c 	andi	r3,r2,8192
    2690:	1800061e 	bne	r3,zero,26ac <_fputs_r+0x6c>
    2694:	81001917 	ldw	r4,100(r16)
    2698:	00f7ffc4 	movi	r3,-8193
    269c:	10880014 	ori	r2,r2,8192
    26a0:	20c6703a 	and	r3,r4,r3
    26a4:	8080030d 	sth	r2,12(r16)
    26a8:	80c01915 	stw	r3,100(r16)
    26ac:	d80d883a 	mov	r6,sp
    26b0:	800b883a 	mov	r5,r16
    26b4:	8809883a 	mov	r4,r17
    26b8:	00026f40 	call	26f4 <__sfvwrite_r>
    26bc:	dfc00717 	ldw	ra,28(sp)
    26c0:	dc400617 	ldw	r17,24(sp)
    26c4:	dc000517 	ldw	r16,20(sp)
    26c8:	dec00804 	addi	sp,sp,32
    26cc:	f800283a 	ret
    26d0:	8809883a 	mov	r4,r17
    26d4:	00046dc0 	call	46dc <__sinit>
    26d8:	003feb06 	br	2688 <__alt_mem_onchip_memory2_0+0xf7bfe688>

000026dc <fputs>:
    26dc:	00800034 	movhi	r2,0
    26e0:	109dfd04 	addi	r2,r2,30708
    26e4:	280d883a 	mov	r6,r5
    26e8:	200b883a 	mov	r5,r4
    26ec:	11000017 	ldw	r4,0(r2)
    26f0:	00026401 	jmpi	2640 <_fputs_r>

000026f4 <__sfvwrite_r>:
    26f4:	30800217 	ldw	r2,8(r6)
    26f8:	10006726 	beq	r2,zero,2898 <__sfvwrite_r+0x1a4>
    26fc:	28c0030b 	ldhu	r3,12(r5)
    2700:	defff404 	addi	sp,sp,-48
    2704:	dd400715 	stw	r21,28(sp)
    2708:	dd000615 	stw	r20,24(sp)
    270c:	dc000215 	stw	r16,8(sp)
    2710:	dfc00b15 	stw	ra,44(sp)
    2714:	df000a15 	stw	fp,40(sp)
    2718:	ddc00915 	stw	r23,36(sp)
    271c:	dd800815 	stw	r22,32(sp)
    2720:	dcc00515 	stw	r19,20(sp)
    2724:	dc800415 	stw	r18,16(sp)
    2728:	dc400315 	stw	r17,12(sp)
    272c:	1880020c 	andi	r2,r3,8
    2730:	2821883a 	mov	r16,r5
    2734:	202b883a 	mov	r21,r4
    2738:	3029883a 	mov	r20,r6
    273c:	10002726 	beq	r2,zero,27dc <__sfvwrite_r+0xe8>
    2740:	28800417 	ldw	r2,16(r5)
    2744:	10002526 	beq	r2,zero,27dc <__sfvwrite_r+0xe8>
    2748:	1880008c 	andi	r2,r3,2
    274c:	a4400017 	ldw	r17,0(r20)
    2750:	10002a26 	beq	r2,zero,27fc <__sfvwrite_r+0x108>
    2754:	05a00034 	movhi	r22,32768
    2758:	0027883a 	mov	r19,zero
    275c:	0025883a 	mov	r18,zero
    2760:	b5bf0004 	addi	r22,r22,-1024
    2764:	980d883a 	mov	r6,r19
    2768:	a809883a 	mov	r4,r21
    276c:	90004626 	beq	r18,zero,2888 <__sfvwrite_r+0x194>
    2770:	900f883a 	mov	r7,r18
    2774:	b480022e 	bgeu	r22,r18,2780 <__sfvwrite_r+0x8c>
    2778:	01e00034 	movhi	r7,32768
    277c:	39ff0004 	addi	r7,r7,-1024
    2780:	80800917 	ldw	r2,36(r16)
    2784:	81400717 	ldw	r5,28(r16)
    2788:	103ee83a 	callr	r2
    278c:	0080570e 	bge	zero,r2,28ec <__sfvwrite_r+0x1f8>
    2790:	a0c00217 	ldw	r3,8(r20)
    2794:	98a7883a 	add	r19,r19,r2
    2798:	90a5c83a 	sub	r18,r18,r2
    279c:	1885c83a 	sub	r2,r3,r2
    27a0:	a0800215 	stw	r2,8(r20)
    27a4:	103fef1e 	bne	r2,zero,2764 <__alt_mem_onchip_memory2_0+0xf7bfe764>
    27a8:	0005883a 	mov	r2,zero
    27ac:	dfc00b17 	ldw	ra,44(sp)
    27b0:	df000a17 	ldw	fp,40(sp)
    27b4:	ddc00917 	ldw	r23,36(sp)
    27b8:	dd800817 	ldw	r22,32(sp)
    27bc:	dd400717 	ldw	r21,28(sp)
    27c0:	dd000617 	ldw	r20,24(sp)
    27c4:	dcc00517 	ldw	r19,20(sp)
    27c8:	dc800417 	ldw	r18,16(sp)
    27cc:	dc400317 	ldw	r17,12(sp)
    27d0:	dc000217 	ldw	r16,8(sp)
    27d4:	dec00c04 	addi	sp,sp,48
    27d8:	f800283a 	ret
    27dc:	800b883a 	mov	r5,r16
    27e0:	a809883a 	mov	r4,r21
    27e4:	0003e100 	call	3e10 <__swsetup_r>
    27e8:	1000eb1e 	bne	r2,zero,2b98 <__sfvwrite_r+0x4a4>
    27ec:	80c0030b 	ldhu	r3,12(r16)
    27f0:	a4400017 	ldw	r17,0(r20)
    27f4:	1880008c 	andi	r2,r3,2
    27f8:	103fd61e 	bne	r2,zero,2754 <__alt_mem_onchip_memory2_0+0xf7bfe754>
    27fc:	1880004c 	andi	r2,r3,1
    2800:	10003f1e 	bne	r2,zero,2900 <__sfvwrite_r+0x20c>
    2804:	0039883a 	mov	fp,zero
    2808:	0025883a 	mov	r18,zero
    280c:	90001a26 	beq	r18,zero,2878 <__sfvwrite_r+0x184>
    2810:	1880800c 	andi	r2,r3,512
    2814:	84c00217 	ldw	r19,8(r16)
    2818:	10002126 	beq	r2,zero,28a0 <__sfvwrite_r+0x1ac>
    281c:	982f883a 	mov	r23,r19
    2820:	94c09336 	bltu	r18,r19,2a70 <__sfvwrite_r+0x37c>
    2824:	1881200c 	andi	r2,r3,1152
    2828:	10009e1e 	bne	r2,zero,2aa4 <__sfvwrite_r+0x3b0>
    282c:	81000017 	ldw	r4,0(r16)
    2830:	b80d883a 	mov	r6,r23
    2834:	e00b883a 	mov	r5,fp
    2838:	00036640 	call	3664 <memmove>
    283c:	80c00217 	ldw	r3,8(r16)
    2840:	81000017 	ldw	r4,0(r16)
    2844:	9005883a 	mov	r2,r18
    2848:	1ce7c83a 	sub	r19,r3,r19
    284c:	25cf883a 	add	r7,r4,r23
    2850:	84c00215 	stw	r19,8(r16)
    2854:	81c00015 	stw	r7,0(r16)
    2858:	a0c00217 	ldw	r3,8(r20)
    285c:	e0b9883a 	add	fp,fp,r2
    2860:	90a5c83a 	sub	r18,r18,r2
    2864:	18a7c83a 	sub	r19,r3,r2
    2868:	a4c00215 	stw	r19,8(r20)
    286c:	983fce26 	beq	r19,zero,27a8 <__alt_mem_onchip_memory2_0+0xf7bfe7a8>
    2870:	80c0030b 	ldhu	r3,12(r16)
    2874:	903fe61e 	bne	r18,zero,2810 <__alt_mem_onchip_memory2_0+0xf7bfe810>
    2878:	8f000017 	ldw	fp,0(r17)
    287c:	8c800117 	ldw	r18,4(r17)
    2880:	8c400204 	addi	r17,r17,8
    2884:	003fe106 	br	280c <__alt_mem_onchip_memory2_0+0xf7bfe80c>
    2888:	8cc00017 	ldw	r19,0(r17)
    288c:	8c800117 	ldw	r18,4(r17)
    2890:	8c400204 	addi	r17,r17,8
    2894:	003fb306 	br	2764 <__alt_mem_onchip_memory2_0+0xf7bfe764>
    2898:	0005883a 	mov	r2,zero
    289c:	f800283a 	ret
    28a0:	81000017 	ldw	r4,0(r16)
    28a4:	80800417 	ldw	r2,16(r16)
    28a8:	11005736 	bltu	r2,r4,2a08 <__sfvwrite_r+0x314>
    28ac:	85c00517 	ldw	r23,20(r16)
    28b0:	95c05536 	bltu	r18,r23,2a08 <__sfvwrite_r+0x314>
    28b4:	00a00034 	movhi	r2,32768
    28b8:	10bfffc4 	addi	r2,r2,-1
    28bc:	9009883a 	mov	r4,r18
    28c0:	1480012e 	bgeu	r2,r18,28c8 <__sfvwrite_r+0x1d4>
    28c4:	1009883a 	mov	r4,r2
    28c8:	b80b883a 	mov	r5,r23
    28cc:	00054300 	call	5430 <__divsi3>
    28d0:	15cf383a 	mul	r7,r2,r23
    28d4:	81400717 	ldw	r5,28(r16)
    28d8:	80800917 	ldw	r2,36(r16)
    28dc:	e00d883a 	mov	r6,fp
    28e0:	a809883a 	mov	r4,r21
    28e4:	103ee83a 	callr	r2
    28e8:	00bfdb16 	blt	zero,r2,2858 <__alt_mem_onchip_memory2_0+0xf7bfe858>
    28ec:	8080030b 	ldhu	r2,12(r16)
    28f0:	10801014 	ori	r2,r2,64
    28f4:	8080030d 	sth	r2,12(r16)
    28f8:	00bfffc4 	movi	r2,-1
    28fc:	003fab06 	br	27ac <__alt_mem_onchip_memory2_0+0xf7bfe7ac>
    2900:	0027883a 	mov	r19,zero
    2904:	0011883a 	mov	r8,zero
    2908:	0039883a 	mov	fp,zero
    290c:	0025883a 	mov	r18,zero
    2910:	90001f26 	beq	r18,zero,2990 <__sfvwrite_r+0x29c>
    2914:	40005a26 	beq	r8,zero,2a80 <__sfvwrite_r+0x38c>
    2918:	982d883a 	mov	r22,r19
    291c:	94c0012e 	bgeu	r18,r19,2924 <__sfvwrite_r+0x230>
    2920:	902d883a 	mov	r22,r18
    2924:	81000017 	ldw	r4,0(r16)
    2928:	80800417 	ldw	r2,16(r16)
    292c:	b02f883a 	mov	r23,r22
    2930:	81c00517 	ldw	r7,20(r16)
    2934:	1100032e 	bgeu	r2,r4,2944 <__sfvwrite_r+0x250>
    2938:	80c00217 	ldw	r3,8(r16)
    293c:	38c7883a 	add	r3,r7,r3
    2940:	1d801816 	blt	r3,r22,29a4 <__sfvwrite_r+0x2b0>
    2944:	b1c03e16 	blt	r22,r7,2a40 <__sfvwrite_r+0x34c>
    2948:	80800917 	ldw	r2,36(r16)
    294c:	81400717 	ldw	r5,28(r16)
    2950:	e00d883a 	mov	r6,fp
    2954:	da000115 	stw	r8,4(sp)
    2958:	a809883a 	mov	r4,r21
    295c:	103ee83a 	callr	r2
    2960:	102f883a 	mov	r23,r2
    2964:	da000117 	ldw	r8,4(sp)
    2968:	00bfe00e 	bge	zero,r2,28ec <__alt_mem_onchip_memory2_0+0xf7bfe8ec>
    296c:	9de7c83a 	sub	r19,r19,r23
    2970:	98001f26 	beq	r19,zero,29f0 <__sfvwrite_r+0x2fc>
    2974:	a0800217 	ldw	r2,8(r20)
    2978:	e5f9883a 	add	fp,fp,r23
    297c:	95e5c83a 	sub	r18,r18,r23
    2980:	15efc83a 	sub	r23,r2,r23
    2984:	a5c00215 	stw	r23,8(r20)
    2988:	b83f8726 	beq	r23,zero,27a8 <__alt_mem_onchip_memory2_0+0xf7bfe7a8>
    298c:	903fe11e 	bne	r18,zero,2914 <__alt_mem_onchip_memory2_0+0xf7bfe914>
    2990:	8f000017 	ldw	fp,0(r17)
    2994:	8c800117 	ldw	r18,4(r17)
    2998:	0011883a 	mov	r8,zero
    299c:	8c400204 	addi	r17,r17,8
    29a0:	003fdb06 	br	2910 <__alt_mem_onchip_memory2_0+0xf7bfe910>
    29a4:	180d883a 	mov	r6,r3
    29a8:	e00b883a 	mov	r5,fp
    29ac:	da000115 	stw	r8,4(sp)
    29b0:	d8c00015 	stw	r3,0(sp)
    29b4:	00036640 	call	3664 <memmove>
    29b8:	d8c00017 	ldw	r3,0(sp)
    29bc:	80800017 	ldw	r2,0(r16)
    29c0:	800b883a 	mov	r5,r16
    29c4:	a809883a 	mov	r4,r21
    29c8:	10c5883a 	add	r2,r2,r3
    29cc:	80800015 	stw	r2,0(r16)
    29d0:	d8c00015 	stw	r3,0(sp)
    29d4:	00043000 	call	4300 <_fflush_r>
    29d8:	d8c00017 	ldw	r3,0(sp)
    29dc:	da000117 	ldw	r8,4(sp)
    29e0:	103fc21e 	bne	r2,zero,28ec <__alt_mem_onchip_memory2_0+0xf7bfe8ec>
    29e4:	182f883a 	mov	r23,r3
    29e8:	9de7c83a 	sub	r19,r19,r23
    29ec:	983fe11e 	bne	r19,zero,2974 <__alt_mem_onchip_memory2_0+0xf7bfe974>
    29f0:	800b883a 	mov	r5,r16
    29f4:	a809883a 	mov	r4,r21
    29f8:	00043000 	call	4300 <_fflush_r>
    29fc:	103fbb1e 	bne	r2,zero,28ec <__alt_mem_onchip_memory2_0+0xf7bfe8ec>
    2a00:	0011883a 	mov	r8,zero
    2a04:	003fdb06 	br	2974 <__alt_mem_onchip_memory2_0+0xf7bfe974>
    2a08:	94c0012e 	bgeu	r18,r19,2a10 <__sfvwrite_r+0x31c>
    2a0c:	9027883a 	mov	r19,r18
    2a10:	980d883a 	mov	r6,r19
    2a14:	e00b883a 	mov	r5,fp
    2a18:	00036640 	call	3664 <memmove>
    2a1c:	80800217 	ldw	r2,8(r16)
    2a20:	80c00017 	ldw	r3,0(r16)
    2a24:	14c5c83a 	sub	r2,r2,r19
    2a28:	1cc7883a 	add	r3,r3,r19
    2a2c:	80800215 	stw	r2,8(r16)
    2a30:	80c00015 	stw	r3,0(r16)
    2a34:	10004326 	beq	r2,zero,2b44 <__sfvwrite_r+0x450>
    2a38:	9805883a 	mov	r2,r19
    2a3c:	003f8606 	br	2858 <__alt_mem_onchip_memory2_0+0xf7bfe858>
    2a40:	b00d883a 	mov	r6,r22
    2a44:	e00b883a 	mov	r5,fp
    2a48:	da000115 	stw	r8,4(sp)
    2a4c:	00036640 	call	3664 <memmove>
    2a50:	80800217 	ldw	r2,8(r16)
    2a54:	80c00017 	ldw	r3,0(r16)
    2a58:	da000117 	ldw	r8,4(sp)
    2a5c:	1585c83a 	sub	r2,r2,r22
    2a60:	1dad883a 	add	r22,r3,r22
    2a64:	80800215 	stw	r2,8(r16)
    2a68:	85800015 	stw	r22,0(r16)
    2a6c:	003fbf06 	br	296c <__alt_mem_onchip_memory2_0+0xf7bfe96c>
    2a70:	81000017 	ldw	r4,0(r16)
    2a74:	9027883a 	mov	r19,r18
    2a78:	902f883a 	mov	r23,r18
    2a7c:	003f6c06 	br	2830 <__alt_mem_onchip_memory2_0+0xf7bfe830>
    2a80:	900d883a 	mov	r6,r18
    2a84:	01400284 	movi	r5,10
    2a88:	e009883a 	mov	r4,fp
    2a8c:	00033bc0 	call	33bc <memchr>
    2a90:	10003e26 	beq	r2,zero,2b8c <__sfvwrite_r+0x498>
    2a94:	10800044 	addi	r2,r2,1
    2a98:	1727c83a 	sub	r19,r2,fp
    2a9c:	02000044 	movi	r8,1
    2aa0:	003f9d06 	br	2918 <__alt_mem_onchip_memory2_0+0xf7bfe918>
    2aa4:	80800517 	ldw	r2,20(r16)
    2aa8:	81400417 	ldw	r5,16(r16)
    2aac:	81c00017 	ldw	r7,0(r16)
    2ab0:	10a7883a 	add	r19,r2,r2
    2ab4:	9885883a 	add	r2,r19,r2
    2ab8:	1026d7fa 	srli	r19,r2,31
    2abc:	396dc83a 	sub	r22,r7,r5
    2ac0:	b1000044 	addi	r4,r22,1
    2ac4:	9885883a 	add	r2,r19,r2
    2ac8:	1027d07a 	srai	r19,r2,1
    2acc:	2485883a 	add	r2,r4,r18
    2ad0:	980d883a 	mov	r6,r19
    2ad4:	9880022e 	bgeu	r19,r2,2ae0 <__sfvwrite_r+0x3ec>
    2ad8:	1027883a 	mov	r19,r2
    2adc:	100d883a 	mov	r6,r2
    2ae0:	18c1000c 	andi	r3,r3,1024
    2ae4:	18001c26 	beq	r3,zero,2b58 <__sfvwrite_r+0x464>
    2ae8:	300b883a 	mov	r5,r6
    2aec:	a809883a 	mov	r4,r21
    2af0:	0002bb00 	call	2bb0 <_malloc_r>
    2af4:	102f883a 	mov	r23,r2
    2af8:	10002926 	beq	r2,zero,2ba0 <__sfvwrite_r+0x4ac>
    2afc:	81400417 	ldw	r5,16(r16)
    2b00:	b00d883a 	mov	r6,r22
    2b04:	1009883a 	mov	r4,r2
    2b08:	000351c0 	call	351c <memcpy>
    2b0c:	8080030b 	ldhu	r2,12(r16)
    2b10:	00fedfc4 	movi	r3,-1153
    2b14:	10c4703a 	and	r2,r2,r3
    2b18:	10802014 	ori	r2,r2,128
    2b1c:	8080030d 	sth	r2,12(r16)
    2b20:	bd89883a 	add	r4,r23,r22
    2b24:	9d8fc83a 	sub	r7,r19,r22
    2b28:	85c00415 	stw	r23,16(r16)
    2b2c:	84c00515 	stw	r19,20(r16)
    2b30:	81000015 	stw	r4,0(r16)
    2b34:	9027883a 	mov	r19,r18
    2b38:	81c00215 	stw	r7,8(r16)
    2b3c:	902f883a 	mov	r23,r18
    2b40:	003f3b06 	br	2830 <__alt_mem_onchip_memory2_0+0xf7bfe830>
    2b44:	800b883a 	mov	r5,r16
    2b48:	a809883a 	mov	r4,r21
    2b4c:	00043000 	call	4300 <_fflush_r>
    2b50:	103fb926 	beq	r2,zero,2a38 <__alt_mem_onchip_memory2_0+0xf7bfea38>
    2b54:	003f6506 	br	28ec <__alt_mem_onchip_memory2_0+0xf7bfe8ec>
    2b58:	a809883a 	mov	r4,r21
    2b5c:	00037c00 	call	37c0 <_realloc_r>
    2b60:	102f883a 	mov	r23,r2
    2b64:	103fee1e 	bne	r2,zero,2b20 <__alt_mem_onchip_memory2_0+0xf7bfeb20>
    2b68:	81400417 	ldw	r5,16(r16)
    2b6c:	a809883a 	mov	r4,r21
    2b70:	00048500 	call	4850 <_free_r>
    2b74:	8080030b 	ldhu	r2,12(r16)
    2b78:	00ffdfc4 	movi	r3,-129
    2b7c:	1884703a 	and	r2,r3,r2
    2b80:	00c00304 	movi	r3,12
    2b84:	a8c00015 	stw	r3,0(r21)
    2b88:	003f5906 	br	28f0 <__alt_mem_onchip_memory2_0+0xf7bfe8f0>
    2b8c:	94c00044 	addi	r19,r18,1
    2b90:	02000044 	movi	r8,1
    2b94:	003f6006 	br	2918 <__alt_mem_onchip_memory2_0+0xf7bfe918>
    2b98:	00bfffc4 	movi	r2,-1
    2b9c:	003f0306 	br	27ac <__alt_mem_onchip_memory2_0+0xf7bfe7ac>
    2ba0:	00800304 	movi	r2,12
    2ba4:	a8800015 	stw	r2,0(r21)
    2ba8:	8080030b 	ldhu	r2,12(r16)
    2bac:	003f5006 	br	28f0 <__alt_mem_onchip_memory2_0+0xf7bfe8f0>

00002bb0 <_malloc_r>:
    2bb0:	defff504 	addi	sp,sp,-44
    2bb4:	dc800315 	stw	r18,12(sp)
    2bb8:	dfc00a15 	stw	ra,40(sp)
    2bbc:	df000915 	stw	fp,36(sp)
    2bc0:	ddc00815 	stw	r23,32(sp)
    2bc4:	dd800715 	stw	r22,28(sp)
    2bc8:	dd400615 	stw	r21,24(sp)
    2bcc:	dd000515 	stw	r20,20(sp)
    2bd0:	dcc00415 	stw	r19,16(sp)
    2bd4:	dc400215 	stw	r17,8(sp)
    2bd8:	dc000115 	stw	r16,4(sp)
    2bdc:	288002c4 	addi	r2,r5,11
    2be0:	00c00584 	movi	r3,22
    2be4:	2025883a 	mov	r18,r4
    2be8:	18807f2e 	bgeu	r3,r2,2de8 <_malloc_r+0x238>
    2bec:	047ffe04 	movi	r17,-8
    2bf0:	1462703a 	and	r17,r2,r17
    2bf4:	8800a316 	blt	r17,zero,2e84 <_malloc_r+0x2d4>
    2bf8:	8940a236 	bltu	r17,r5,2e84 <_malloc_r+0x2d4>
    2bfc:	00058f40 	call	58f4 <__malloc_lock>
    2c00:	00807dc4 	movi	r2,503
    2c04:	1441e92e 	bgeu	r2,r17,33ac <_malloc_r+0x7fc>
    2c08:	8804d27a 	srli	r2,r17,9
    2c0c:	1000a126 	beq	r2,zero,2e94 <_malloc_r+0x2e4>
    2c10:	00c00104 	movi	r3,4
    2c14:	18811e36 	bltu	r3,r2,3090 <_malloc_r+0x4e0>
    2c18:	8804d1ba 	srli	r2,r17,6
    2c1c:	12000e44 	addi	r8,r2,57
    2c20:	11c00e04 	addi	r7,r2,56
    2c24:	4209883a 	add	r4,r8,r8
    2c28:	04c00034 	movhi	r19,0
    2c2c:	2109883a 	add	r4,r4,r4
    2c30:	9cdcf104 	addi	r19,r19,29636
    2c34:	2109883a 	add	r4,r4,r4
    2c38:	9909883a 	add	r4,r19,r4
    2c3c:	24000117 	ldw	r16,4(r4)
    2c40:	213ffe04 	addi	r4,r4,-8
    2c44:	24009726 	beq	r4,r16,2ea4 <_malloc_r+0x2f4>
    2c48:	80800117 	ldw	r2,4(r16)
    2c4c:	01bfff04 	movi	r6,-4
    2c50:	014003c4 	movi	r5,15
    2c54:	1184703a 	and	r2,r2,r6
    2c58:	1447c83a 	sub	r3,r2,r17
    2c5c:	28c00716 	blt	r5,r3,2c7c <_malloc_r+0xcc>
    2c60:	1800920e 	bge	r3,zero,2eac <_malloc_r+0x2fc>
    2c64:	84000317 	ldw	r16,12(r16)
    2c68:	24008e26 	beq	r4,r16,2ea4 <_malloc_r+0x2f4>
    2c6c:	80800117 	ldw	r2,4(r16)
    2c70:	1184703a 	and	r2,r2,r6
    2c74:	1447c83a 	sub	r3,r2,r17
    2c78:	28fff90e 	bge	r5,r3,2c60 <__alt_mem_onchip_memory2_0+0xf7bfec60>
    2c7c:	3809883a 	mov	r4,r7
    2c80:	01800034 	movhi	r6,0
    2c84:	9c000417 	ldw	r16,16(r19)
    2c88:	319cf104 	addi	r6,r6,29636
    2c8c:	32000204 	addi	r8,r6,8
    2c90:	82013426 	beq	r16,r8,3164 <_malloc_r+0x5b4>
    2c94:	80c00117 	ldw	r3,4(r16)
    2c98:	00bfff04 	movi	r2,-4
    2c9c:	188e703a 	and	r7,r3,r2
    2ca0:	3c45c83a 	sub	r2,r7,r17
    2ca4:	00c003c4 	movi	r3,15
    2ca8:	18811f16 	blt	r3,r2,3128 <_malloc_r+0x578>
    2cac:	32000515 	stw	r8,20(r6)
    2cb0:	32000415 	stw	r8,16(r6)
    2cb4:	10007f0e 	bge	r2,zero,2eb4 <_malloc_r+0x304>
    2cb8:	00807fc4 	movi	r2,511
    2cbc:	11c0fd36 	bltu	r2,r7,30b4 <_malloc_r+0x504>
    2cc0:	3806d0fa 	srli	r3,r7,3
    2cc4:	01c00044 	movi	r7,1
    2cc8:	30800117 	ldw	r2,4(r6)
    2ccc:	19400044 	addi	r5,r3,1
    2cd0:	294b883a 	add	r5,r5,r5
    2cd4:	1807d0ba 	srai	r3,r3,2
    2cd8:	294b883a 	add	r5,r5,r5
    2cdc:	294b883a 	add	r5,r5,r5
    2ce0:	298b883a 	add	r5,r5,r6
    2ce4:	38c6983a 	sll	r3,r7,r3
    2ce8:	29c00017 	ldw	r7,0(r5)
    2cec:	2a7ffe04 	addi	r9,r5,-8
    2cf0:	1886b03a 	or	r3,r3,r2
    2cf4:	82400315 	stw	r9,12(r16)
    2cf8:	81c00215 	stw	r7,8(r16)
    2cfc:	30c00115 	stw	r3,4(r6)
    2d00:	2c000015 	stw	r16,0(r5)
    2d04:	3c000315 	stw	r16,12(r7)
    2d08:	2005d0ba 	srai	r2,r4,2
    2d0c:	01400044 	movi	r5,1
    2d10:	288a983a 	sll	r5,r5,r2
    2d14:	19406f36 	bltu	r3,r5,2ed4 <_malloc_r+0x324>
    2d18:	28c4703a 	and	r2,r5,r3
    2d1c:	10000a1e 	bne	r2,zero,2d48 <_malloc_r+0x198>
    2d20:	00bfff04 	movi	r2,-4
    2d24:	294b883a 	add	r5,r5,r5
    2d28:	2088703a 	and	r4,r4,r2
    2d2c:	28c4703a 	and	r2,r5,r3
    2d30:	21000104 	addi	r4,r4,4
    2d34:	1000041e 	bne	r2,zero,2d48 <_malloc_r+0x198>
    2d38:	294b883a 	add	r5,r5,r5
    2d3c:	28c4703a 	and	r2,r5,r3
    2d40:	21000104 	addi	r4,r4,4
    2d44:	103ffc26 	beq	r2,zero,2d38 <__alt_mem_onchip_memory2_0+0xf7bfed38>
    2d48:	02bfff04 	movi	r10,-4
    2d4c:	024003c4 	movi	r9,15
    2d50:	21800044 	addi	r6,r4,1
    2d54:	318d883a 	add	r6,r6,r6
    2d58:	318d883a 	add	r6,r6,r6
    2d5c:	318d883a 	add	r6,r6,r6
    2d60:	998d883a 	add	r6,r19,r6
    2d64:	333ffe04 	addi	r12,r6,-8
    2d68:	2017883a 	mov	r11,r4
    2d6c:	31800104 	addi	r6,r6,4
    2d70:	34000017 	ldw	r16,0(r6)
    2d74:	31fffd04 	addi	r7,r6,-12
    2d78:	81c0041e 	bne	r16,r7,2d8c <_malloc_r+0x1dc>
    2d7c:	0000fb06 	br	316c <_malloc_r+0x5bc>
    2d80:	1801030e 	bge	r3,zero,3190 <_malloc_r+0x5e0>
    2d84:	84000317 	ldw	r16,12(r16)
    2d88:	81c0f826 	beq	r16,r7,316c <_malloc_r+0x5bc>
    2d8c:	80800117 	ldw	r2,4(r16)
    2d90:	1284703a 	and	r2,r2,r10
    2d94:	1447c83a 	sub	r3,r2,r17
    2d98:	48fff90e 	bge	r9,r3,2d80 <__alt_mem_onchip_memory2_0+0xf7bfed80>
    2d9c:	80800317 	ldw	r2,12(r16)
    2da0:	81000217 	ldw	r4,8(r16)
    2da4:	89400054 	ori	r5,r17,1
    2da8:	81400115 	stw	r5,4(r16)
    2dac:	20800315 	stw	r2,12(r4)
    2db0:	11000215 	stw	r4,8(r2)
    2db4:	8463883a 	add	r17,r16,r17
    2db8:	9c400515 	stw	r17,20(r19)
    2dbc:	9c400415 	stw	r17,16(r19)
    2dc0:	18800054 	ori	r2,r3,1
    2dc4:	88800115 	stw	r2,4(r17)
    2dc8:	8a000315 	stw	r8,12(r17)
    2dcc:	8a000215 	stw	r8,8(r17)
    2dd0:	88e3883a 	add	r17,r17,r3
    2dd4:	88c00015 	stw	r3,0(r17)
    2dd8:	9009883a 	mov	r4,r18
    2ddc:	00059180 	call	5918 <__malloc_unlock>
    2de0:	80800204 	addi	r2,r16,8
    2de4:	00001b06 	br	2e54 <_malloc_r+0x2a4>
    2de8:	04400404 	movi	r17,16
    2dec:	89402536 	bltu	r17,r5,2e84 <_malloc_r+0x2d4>
    2df0:	00058f40 	call	58f4 <__malloc_lock>
    2df4:	00800184 	movi	r2,6
    2df8:	01000084 	movi	r4,2
    2dfc:	04c00034 	movhi	r19,0
    2e00:	1085883a 	add	r2,r2,r2
    2e04:	9cdcf104 	addi	r19,r19,29636
    2e08:	1085883a 	add	r2,r2,r2
    2e0c:	9885883a 	add	r2,r19,r2
    2e10:	14000117 	ldw	r16,4(r2)
    2e14:	10fffe04 	addi	r3,r2,-8
    2e18:	80c0d926 	beq	r16,r3,3180 <_malloc_r+0x5d0>
    2e1c:	80c00117 	ldw	r3,4(r16)
    2e20:	81000317 	ldw	r4,12(r16)
    2e24:	00bfff04 	movi	r2,-4
    2e28:	1884703a 	and	r2,r3,r2
    2e2c:	81400217 	ldw	r5,8(r16)
    2e30:	8085883a 	add	r2,r16,r2
    2e34:	10c00117 	ldw	r3,4(r2)
    2e38:	29000315 	stw	r4,12(r5)
    2e3c:	21400215 	stw	r5,8(r4)
    2e40:	18c00054 	ori	r3,r3,1
    2e44:	10c00115 	stw	r3,4(r2)
    2e48:	9009883a 	mov	r4,r18
    2e4c:	00059180 	call	5918 <__malloc_unlock>
    2e50:	80800204 	addi	r2,r16,8
    2e54:	dfc00a17 	ldw	ra,40(sp)
    2e58:	df000917 	ldw	fp,36(sp)
    2e5c:	ddc00817 	ldw	r23,32(sp)
    2e60:	dd800717 	ldw	r22,28(sp)
    2e64:	dd400617 	ldw	r21,24(sp)
    2e68:	dd000517 	ldw	r20,20(sp)
    2e6c:	dcc00417 	ldw	r19,16(sp)
    2e70:	dc800317 	ldw	r18,12(sp)
    2e74:	dc400217 	ldw	r17,8(sp)
    2e78:	dc000117 	ldw	r16,4(sp)
    2e7c:	dec00b04 	addi	sp,sp,44
    2e80:	f800283a 	ret
    2e84:	00800304 	movi	r2,12
    2e88:	90800015 	stw	r2,0(r18)
    2e8c:	0005883a 	mov	r2,zero
    2e90:	003ff006 	br	2e54 <__alt_mem_onchip_memory2_0+0xf7bfee54>
    2e94:	01002004 	movi	r4,128
    2e98:	02001004 	movi	r8,64
    2e9c:	01c00fc4 	movi	r7,63
    2ea0:	003f6106 	br	2c28 <__alt_mem_onchip_memory2_0+0xf7bfec28>
    2ea4:	4009883a 	mov	r4,r8
    2ea8:	003f7506 	br	2c80 <__alt_mem_onchip_memory2_0+0xf7bfec80>
    2eac:	81000317 	ldw	r4,12(r16)
    2eb0:	003fde06 	br	2e2c <__alt_mem_onchip_memory2_0+0xf7bfee2c>
    2eb4:	81c5883a 	add	r2,r16,r7
    2eb8:	11400117 	ldw	r5,4(r2)
    2ebc:	9009883a 	mov	r4,r18
    2ec0:	29400054 	ori	r5,r5,1
    2ec4:	11400115 	stw	r5,4(r2)
    2ec8:	00059180 	call	5918 <__malloc_unlock>
    2ecc:	80800204 	addi	r2,r16,8
    2ed0:	003fe006 	br	2e54 <__alt_mem_onchip_memory2_0+0xf7bfee54>
    2ed4:	9c000217 	ldw	r16,8(r19)
    2ed8:	00bfff04 	movi	r2,-4
    2edc:	85800117 	ldw	r22,4(r16)
    2ee0:	b0ac703a 	and	r22,r22,r2
    2ee4:	b4400336 	bltu	r22,r17,2ef4 <_malloc_r+0x344>
    2ee8:	b445c83a 	sub	r2,r22,r17
    2eec:	00c003c4 	movi	r3,15
    2ef0:	18805d16 	blt	r3,r2,3068 <_malloc_r+0x4b8>
    2ef4:	05c00034 	movhi	r23,0
    2ef8:	00800074 	movhi	r2,1
    2efc:	10a4cc04 	addi	r2,r2,-27856
    2f00:	bdddfe04 	addi	r23,r23,30712
    2f04:	15400017 	ldw	r21,0(r2)
    2f08:	b8c00017 	ldw	r3,0(r23)
    2f0c:	00bfffc4 	movi	r2,-1
    2f10:	858d883a 	add	r6,r16,r22
    2f14:	8d6b883a 	add	r21,r17,r21
    2f18:	1880ea26 	beq	r3,r2,32c4 <_malloc_r+0x714>
    2f1c:	ad4403c4 	addi	r21,r21,4111
    2f20:	00bc0004 	movi	r2,-4096
    2f24:	a8aa703a 	and	r21,r21,r2
    2f28:	a80b883a 	mov	r5,r21
    2f2c:	9009883a 	mov	r4,r18
    2f30:	d9800015 	stw	r6,0(sp)
    2f34:	0003d240 	call	3d24 <_sbrk_r>
    2f38:	1029883a 	mov	r20,r2
    2f3c:	00bfffc4 	movi	r2,-1
    2f40:	d9800017 	ldw	r6,0(sp)
    2f44:	a080e826 	beq	r20,r2,32e8 <_malloc_r+0x738>
    2f48:	a180a636 	bltu	r20,r6,31e4 <_malloc_r+0x634>
    2f4c:	07000074 	movhi	fp,1
    2f50:	e724cd04 	addi	fp,fp,-27852
    2f54:	e0800017 	ldw	r2,0(fp)
    2f58:	a887883a 	add	r3,r21,r2
    2f5c:	e0c00015 	stw	r3,0(fp)
    2f60:	3500e626 	beq	r6,r20,32fc <_malloc_r+0x74c>
    2f64:	b9000017 	ldw	r4,0(r23)
    2f68:	00bfffc4 	movi	r2,-1
    2f6c:	2080ee26 	beq	r4,r2,3328 <_malloc_r+0x778>
    2f70:	a185c83a 	sub	r2,r20,r6
    2f74:	10c5883a 	add	r2,r2,r3
    2f78:	e0800015 	stw	r2,0(fp)
    2f7c:	a0c001cc 	andi	r3,r20,7
    2f80:	1800bc26 	beq	r3,zero,3274 <_malloc_r+0x6c4>
    2f84:	a0e9c83a 	sub	r20,r20,r3
    2f88:	00840204 	movi	r2,4104
    2f8c:	a5000204 	addi	r20,r20,8
    2f90:	10c7c83a 	sub	r3,r2,r3
    2f94:	a545883a 	add	r2,r20,r21
    2f98:	1083ffcc 	andi	r2,r2,4095
    2f9c:	18abc83a 	sub	r21,r3,r2
    2fa0:	a80b883a 	mov	r5,r21
    2fa4:	9009883a 	mov	r4,r18
    2fa8:	0003d240 	call	3d24 <_sbrk_r>
    2fac:	00ffffc4 	movi	r3,-1
    2fb0:	10c0e126 	beq	r2,r3,3338 <_malloc_r+0x788>
    2fb4:	1505c83a 	sub	r2,r2,r20
    2fb8:	1545883a 	add	r2,r2,r21
    2fbc:	10800054 	ori	r2,r2,1
    2fc0:	e0c00017 	ldw	r3,0(fp)
    2fc4:	9d000215 	stw	r20,8(r19)
    2fc8:	a0800115 	stw	r2,4(r20)
    2fcc:	a8c7883a 	add	r3,r21,r3
    2fd0:	e0c00015 	stw	r3,0(fp)
    2fd4:	84c00e26 	beq	r16,r19,3010 <_malloc_r+0x460>
    2fd8:	018003c4 	movi	r6,15
    2fdc:	3580a72e 	bgeu	r6,r22,327c <_malloc_r+0x6cc>
    2fe0:	81400117 	ldw	r5,4(r16)
    2fe4:	013ffe04 	movi	r4,-8
    2fe8:	b0bffd04 	addi	r2,r22,-12
    2fec:	1104703a 	and	r2,r2,r4
    2ff0:	2900004c 	andi	r4,r5,1
    2ff4:	2088b03a 	or	r4,r4,r2
    2ff8:	81000115 	stw	r4,4(r16)
    2ffc:	01400144 	movi	r5,5
    3000:	8089883a 	add	r4,r16,r2
    3004:	21400115 	stw	r5,4(r4)
    3008:	21400215 	stw	r5,8(r4)
    300c:	3080cd36 	bltu	r6,r2,3344 <_malloc_r+0x794>
    3010:	00800074 	movhi	r2,1
    3014:	10a4cb04 	addi	r2,r2,-27860
    3018:	11000017 	ldw	r4,0(r2)
    301c:	20c0012e 	bgeu	r4,r3,3024 <_malloc_r+0x474>
    3020:	10c00015 	stw	r3,0(r2)
    3024:	00800074 	movhi	r2,1
    3028:	10a4ca04 	addi	r2,r2,-27864
    302c:	11000017 	ldw	r4,0(r2)
    3030:	9c000217 	ldw	r16,8(r19)
    3034:	20c0012e 	bgeu	r4,r3,303c <_malloc_r+0x48c>
    3038:	10c00015 	stw	r3,0(r2)
    303c:	80c00117 	ldw	r3,4(r16)
    3040:	00bfff04 	movi	r2,-4
    3044:	1886703a 	and	r3,r3,r2
    3048:	1c45c83a 	sub	r2,r3,r17
    304c:	1c400236 	bltu	r3,r17,3058 <_malloc_r+0x4a8>
    3050:	00c003c4 	movi	r3,15
    3054:	18800416 	blt	r3,r2,3068 <_malloc_r+0x4b8>
    3058:	9009883a 	mov	r4,r18
    305c:	00059180 	call	5918 <__malloc_unlock>
    3060:	0005883a 	mov	r2,zero
    3064:	003f7b06 	br	2e54 <__alt_mem_onchip_memory2_0+0xf7bfee54>
    3068:	88c00054 	ori	r3,r17,1
    306c:	80c00115 	stw	r3,4(r16)
    3070:	8463883a 	add	r17,r16,r17
    3074:	10800054 	ori	r2,r2,1
    3078:	9c400215 	stw	r17,8(r19)
    307c:	88800115 	stw	r2,4(r17)
    3080:	9009883a 	mov	r4,r18
    3084:	00059180 	call	5918 <__malloc_unlock>
    3088:	80800204 	addi	r2,r16,8
    308c:	003f7106 	br	2e54 <__alt_mem_onchip_memory2_0+0xf7bfee54>
    3090:	00c00504 	movi	r3,20
    3094:	18804a2e 	bgeu	r3,r2,31c0 <_malloc_r+0x610>
    3098:	00c01504 	movi	r3,84
    309c:	18806e36 	bltu	r3,r2,3258 <_malloc_r+0x6a8>
    30a0:	8804d33a 	srli	r2,r17,12
    30a4:	12001bc4 	addi	r8,r2,111
    30a8:	11c01b84 	addi	r7,r2,110
    30ac:	4209883a 	add	r4,r8,r8
    30b0:	003edd06 	br	2c28 <__alt_mem_onchip_memory2_0+0xf7bfec28>
    30b4:	3804d27a 	srli	r2,r7,9
    30b8:	00c00104 	movi	r3,4
    30bc:	1880442e 	bgeu	r3,r2,31d0 <_malloc_r+0x620>
    30c0:	00c00504 	movi	r3,20
    30c4:	18808136 	bltu	r3,r2,32cc <_malloc_r+0x71c>
    30c8:	11401704 	addi	r5,r2,92
    30cc:	10c016c4 	addi	r3,r2,91
    30d0:	294b883a 	add	r5,r5,r5
    30d4:	294b883a 	add	r5,r5,r5
    30d8:	294b883a 	add	r5,r5,r5
    30dc:	994b883a 	add	r5,r19,r5
    30e0:	28800017 	ldw	r2,0(r5)
    30e4:	01800034 	movhi	r6,0
    30e8:	297ffe04 	addi	r5,r5,-8
    30ec:	319cf104 	addi	r6,r6,29636
    30f0:	28806526 	beq	r5,r2,3288 <_malloc_r+0x6d8>
    30f4:	01bfff04 	movi	r6,-4
    30f8:	10c00117 	ldw	r3,4(r2)
    30fc:	1986703a 	and	r3,r3,r6
    3100:	38c0022e 	bgeu	r7,r3,310c <_malloc_r+0x55c>
    3104:	10800217 	ldw	r2,8(r2)
    3108:	28bffb1e 	bne	r5,r2,30f8 <__alt_mem_onchip_memory2_0+0xf7bff0f8>
    310c:	11400317 	ldw	r5,12(r2)
    3110:	98c00117 	ldw	r3,4(r19)
    3114:	81400315 	stw	r5,12(r16)
    3118:	80800215 	stw	r2,8(r16)
    311c:	2c000215 	stw	r16,8(r5)
    3120:	14000315 	stw	r16,12(r2)
    3124:	003ef806 	br	2d08 <__alt_mem_onchip_memory2_0+0xf7bfed08>
    3128:	88c00054 	ori	r3,r17,1
    312c:	80c00115 	stw	r3,4(r16)
    3130:	8463883a 	add	r17,r16,r17
    3134:	34400515 	stw	r17,20(r6)
    3138:	34400415 	stw	r17,16(r6)
    313c:	10c00054 	ori	r3,r2,1
    3140:	8a000315 	stw	r8,12(r17)
    3144:	8a000215 	stw	r8,8(r17)
    3148:	88c00115 	stw	r3,4(r17)
    314c:	88a3883a 	add	r17,r17,r2
    3150:	88800015 	stw	r2,0(r17)
    3154:	9009883a 	mov	r4,r18
    3158:	00059180 	call	5918 <__malloc_unlock>
    315c:	80800204 	addi	r2,r16,8
    3160:	003f3c06 	br	2e54 <__alt_mem_onchip_memory2_0+0xf7bfee54>
    3164:	30c00117 	ldw	r3,4(r6)
    3168:	003ee706 	br	2d08 <__alt_mem_onchip_memory2_0+0xf7bfed08>
    316c:	5ac00044 	addi	r11,r11,1
    3170:	588000cc 	andi	r2,r11,3
    3174:	31800204 	addi	r6,r6,8
    3178:	103efd1e 	bne	r2,zero,2d70 <__alt_mem_onchip_memory2_0+0xf7bfed70>
    317c:	00002406 	br	3210 <_malloc_r+0x660>
    3180:	14000317 	ldw	r16,12(r2)
    3184:	143f251e 	bne	r2,r16,2e1c <__alt_mem_onchip_memory2_0+0xf7bfee1c>
    3188:	21000084 	addi	r4,r4,2
    318c:	003ebc06 	br	2c80 <__alt_mem_onchip_memory2_0+0xf7bfec80>
    3190:	8085883a 	add	r2,r16,r2
    3194:	10c00117 	ldw	r3,4(r2)
    3198:	81000317 	ldw	r4,12(r16)
    319c:	81400217 	ldw	r5,8(r16)
    31a0:	18c00054 	ori	r3,r3,1
    31a4:	10c00115 	stw	r3,4(r2)
    31a8:	29000315 	stw	r4,12(r5)
    31ac:	21400215 	stw	r5,8(r4)
    31b0:	9009883a 	mov	r4,r18
    31b4:	00059180 	call	5918 <__malloc_unlock>
    31b8:	80800204 	addi	r2,r16,8
    31bc:	003f2506 	br	2e54 <__alt_mem_onchip_memory2_0+0xf7bfee54>
    31c0:	12001704 	addi	r8,r2,92
    31c4:	11c016c4 	addi	r7,r2,91
    31c8:	4209883a 	add	r4,r8,r8
    31cc:	003e9606 	br	2c28 <__alt_mem_onchip_memory2_0+0xf7bfec28>
    31d0:	3804d1ba 	srli	r2,r7,6
    31d4:	11400e44 	addi	r5,r2,57
    31d8:	10c00e04 	addi	r3,r2,56
    31dc:	294b883a 	add	r5,r5,r5
    31e0:	003fbc06 	br	30d4 <__alt_mem_onchip_memory2_0+0xf7bff0d4>
    31e4:	84ff5926 	beq	r16,r19,2f4c <__alt_mem_onchip_memory2_0+0xf7bfef4c>
    31e8:	00800034 	movhi	r2,0
    31ec:	109cf104 	addi	r2,r2,29636
    31f0:	14000217 	ldw	r16,8(r2)
    31f4:	00bfff04 	movi	r2,-4
    31f8:	80c00117 	ldw	r3,4(r16)
    31fc:	1886703a 	and	r3,r3,r2
    3200:	003f9106 	br	3048 <__alt_mem_onchip_memory2_0+0xf7bff048>
    3204:	60800217 	ldw	r2,8(r12)
    3208:	213fffc4 	addi	r4,r4,-1
    320c:	1300651e 	bne	r2,r12,33a4 <_malloc_r+0x7f4>
    3210:	208000cc 	andi	r2,r4,3
    3214:	633ffe04 	addi	r12,r12,-8
    3218:	103ffa1e 	bne	r2,zero,3204 <__alt_mem_onchip_memory2_0+0xf7bff204>
    321c:	98800117 	ldw	r2,4(r19)
    3220:	0146303a 	nor	r3,zero,r5
    3224:	1884703a 	and	r2,r3,r2
    3228:	98800115 	stw	r2,4(r19)
    322c:	294b883a 	add	r5,r5,r5
    3230:	117f2836 	bltu	r2,r5,2ed4 <__alt_mem_onchip_memory2_0+0xf7bfeed4>
    3234:	283f2726 	beq	r5,zero,2ed4 <__alt_mem_onchip_memory2_0+0xf7bfeed4>
    3238:	2886703a 	and	r3,r5,r2
    323c:	5809883a 	mov	r4,r11
    3240:	183ec31e 	bne	r3,zero,2d50 <__alt_mem_onchip_memory2_0+0xf7bfed50>
    3244:	294b883a 	add	r5,r5,r5
    3248:	2886703a 	and	r3,r5,r2
    324c:	21000104 	addi	r4,r4,4
    3250:	183ffc26 	beq	r3,zero,3244 <__alt_mem_onchip_memory2_0+0xf7bff244>
    3254:	003ebe06 	br	2d50 <__alt_mem_onchip_memory2_0+0xf7bfed50>
    3258:	00c05504 	movi	r3,340
    325c:	18801236 	bltu	r3,r2,32a8 <_malloc_r+0x6f8>
    3260:	8804d3fa 	srli	r2,r17,15
    3264:	12001e04 	addi	r8,r2,120
    3268:	11c01dc4 	addi	r7,r2,119
    326c:	4209883a 	add	r4,r8,r8
    3270:	003e6d06 	br	2c28 <__alt_mem_onchip_memory2_0+0xf7bfec28>
    3274:	00c40004 	movi	r3,4096
    3278:	003f4606 	br	2f94 <__alt_mem_onchip_memory2_0+0xf7bfef94>
    327c:	00800044 	movi	r2,1
    3280:	a0800115 	stw	r2,4(r20)
    3284:	003f7406 	br	3058 <__alt_mem_onchip_memory2_0+0xf7bff058>
    3288:	1805d0ba 	srai	r2,r3,2
    328c:	01c00044 	movi	r7,1
    3290:	30c00117 	ldw	r3,4(r6)
    3294:	388e983a 	sll	r7,r7,r2
    3298:	2805883a 	mov	r2,r5
    329c:	38c6b03a 	or	r3,r7,r3
    32a0:	30c00115 	stw	r3,4(r6)
    32a4:	003f9b06 	br	3114 <__alt_mem_onchip_memory2_0+0xf7bff114>
    32a8:	00c15504 	movi	r3,1364
    32ac:	18801a36 	bltu	r3,r2,3318 <_malloc_r+0x768>
    32b0:	8804d4ba 	srli	r2,r17,18
    32b4:	12001f44 	addi	r8,r2,125
    32b8:	11c01f04 	addi	r7,r2,124
    32bc:	4209883a 	add	r4,r8,r8
    32c0:	003e5906 	br	2c28 <__alt_mem_onchip_memory2_0+0xf7bfec28>
    32c4:	ad400404 	addi	r21,r21,16
    32c8:	003f1706 	br	2f28 <__alt_mem_onchip_memory2_0+0xf7bfef28>
    32cc:	00c01504 	movi	r3,84
    32d0:	18802336 	bltu	r3,r2,3360 <_malloc_r+0x7b0>
    32d4:	3804d33a 	srli	r2,r7,12
    32d8:	11401bc4 	addi	r5,r2,111
    32dc:	10c01b84 	addi	r3,r2,110
    32e0:	294b883a 	add	r5,r5,r5
    32e4:	003f7b06 	br	30d4 <__alt_mem_onchip_memory2_0+0xf7bff0d4>
    32e8:	9c000217 	ldw	r16,8(r19)
    32ec:	00bfff04 	movi	r2,-4
    32f0:	80c00117 	ldw	r3,4(r16)
    32f4:	1886703a 	and	r3,r3,r2
    32f8:	003f5306 	br	3048 <__alt_mem_onchip_memory2_0+0xf7bff048>
    32fc:	3083ffcc 	andi	r2,r6,4095
    3300:	103f181e 	bne	r2,zero,2f64 <__alt_mem_onchip_memory2_0+0xf7bfef64>
    3304:	99000217 	ldw	r4,8(r19)
    3308:	b545883a 	add	r2,r22,r21
    330c:	10800054 	ori	r2,r2,1
    3310:	20800115 	stw	r2,4(r4)
    3314:	003f3e06 	br	3010 <__alt_mem_onchip_memory2_0+0xf7bff010>
    3318:	01003f84 	movi	r4,254
    331c:	02001fc4 	movi	r8,127
    3320:	01c01f84 	movi	r7,126
    3324:	003e4006 	br	2c28 <__alt_mem_onchip_memory2_0+0xf7bfec28>
    3328:	00800034 	movhi	r2,0
    332c:	109dfe04 	addi	r2,r2,30712
    3330:	15000015 	stw	r20,0(r2)
    3334:	003f1106 	br	2f7c <__alt_mem_onchip_memory2_0+0xf7bfef7c>
    3338:	00800044 	movi	r2,1
    333c:	002b883a 	mov	r21,zero
    3340:	003f1f06 	br	2fc0 <__alt_mem_onchip_memory2_0+0xf7bfefc0>
    3344:	81400204 	addi	r5,r16,8
    3348:	9009883a 	mov	r4,r18
    334c:	00048500 	call	4850 <_free_r>
    3350:	00800074 	movhi	r2,1
    3354:	10a4cd04 	addi	r2,r2,-27852
    3358:	10c00017 	ldw	r3,0(r2)
    335c:	003f2c06 	br	3010 <__alt_mem_onchip_memory2_0+0xf7bff010>
    3360:	00c05504 	movi	r3,340
    3364:	18800536 	bltu	r3,r2,337c <_malloc_r+0x7cc>
    3368:	3804d3fa 	srli	r2,r7,15
    336c:	11401e04 	addi	r5,r2,120
    3370:	10c01dc4 	addi	r3,r2,119
    3374:	294b883a 	add	r5,r5,r5
    3378:	003f5606 	br	30d4 <__alt_mem_onchip_memory2_0+0xf7bff0d4>
    337c:	00c15504 	movi	r3,1364
    3380:	18800536 	bltu	r3,r2,3398 <_malloc_r+0x7e8>
    3384:	3804d4ba 	srli	r2,r7,18
    3388:	11401f44 	addi	r5,r2,125
    338c:	10c01f04 	addi	r3,r2,124
    3390:	294b883a 	add	r5,r5,r5
    3394:	003f4f06 	br	30d4 <__alt_mem_onchip_memory2_0+0xf7bff0d4>
    3398:	01403f84 	movi	r5,254
    339c:	00c01f84 	movi	r3,126
    33a0:	003f4c06 	br	30d4 <__alt_mem_onchip_memory2_0+0xf7bff0d4>
    33a4:	98800117 	ldw	r2,4(r19)
    33a8:	003fa006 	br	322c <__alt_mem_onchip_memory2_0+0xf7bff22c>
    33ac:	8808d0fa 	srli	r4,r17,3
    33b0:	20800044 	addi	r2,r4,1
    33b4:	1085883a 	add	r2,r2,r2
    33b8:	003e9006 	br	2dfc <__alt_mem_onchip_memory2_0+0xf7bfedfc>

000033bc <memchr>:
    33bc:	208000cc 	andi	r2,r4,3
    33c0:	280f883a 	mov	r7,r5
    33c4:	10003426 	beq	r2,zero,3498 <memchr+0xdc>
    33c8:	30bfffc4 	addi	r2,r6,-1
    33cc:	30001a26 	beq	r6,zero,3438 <memchr+0x7c>
    33d0:	20c00003 	ldbu	r3,0(r4)
    33d4:	29803fcc 	andi	r6,r5,255
    33d8:	30c0051e 	bne	r6,r3,33f0 <memchr+0x34>
    33dc:	00001806 	br	3440 <memchr+0x84>
    33e0:	10001526 	beq	r2,zero,3438 <memchr+0x7c>
    33e4:	20c00003 	ldbu	r3,0(r4)
    33e8:	10bfffc4 	addi	r2,r2,-1
    33ec:	30c01426 	beq	r6,r3,3440 <memchr+0x84>
    33f0:	21000044 	addi	r4,r4,1
    33f4:	20c000cc 	andi	r3,r4,3
    33f8:	183ff91e 	bne	r3,zero,33e0 <__alt_mem_onchip_memory2_0+0xf7bff3e0>
    33fc:	020000c4 	movi	r8,3
    3400:	40801136 	bltu	r8,r2,3448 <memchr+0x8c>
    3404:	10000c26 	beq	r2,zero,3438 <memchr+0x7c>
    3408:	20c00003 	ldbu	r3,0(r4)
    340c:	29403fcc 	andi	r5,r5,255
    3410:	28c00b26 	beq	r5,r3,3440 <memchr+0x84>
    3414:	20c00044 	addi	r3,r4,1
    3418:	39803fcc 	andi	r6,r7,255
    341c:	2089883a 	add	r4,r4,r2
    3420:	00000306 	br	3430 <memchr+0x74>
    3424:	18c00044 	addi	r3,r3,1
    3428:	197fffc3 	ldbu	r5,-1(r3)
    342c:	31400526 	beq	r6,r5,3444 <memchr+0x88>
    3430:	1805883a 	mov	r2,r3
    3434:	20fffb1e 	bne	r4,r3,3424 <__alt_mem_onchip_memory2_0+0xf7bff424>
    3438:	0005883a 	mov	r2,zero
    343c:	f800283a 	ret
    3440:	2005883a 	mov	r2,r4
    3444:	f800283a 	ret
    3448:	28c03fcc 	andi	r3,r5,255
    344c:	1812923a 	slli	r9,r3,8
    3450:	02ffbff4 	movhi	r11,65279
    3454:	02a02074 	movhi	r10,32897
    3458:	48d2b03a 	or	r9,r9,r3
    345c:	4806943a 	slli	r3,r9,16
    3460:	5affbfc4 	addi	r11,r11,-257
    3464:	52a02004 	addi	r10,r10,-32640
    3468:	48d2b03a 	or	r9,r9,r3
    346c:	20c00017 	ldw	r3,0(r4)
    3470:	48c6f03a 	xor	r3,r9,r3
    3474:	1acd883a 	add	r6,r3,r11
    3478:	00c6303a 	nor	r3,zero,r3
    347c:	30c6703a 	and	r3,r6,r3
    3480:	1a86703a 	and	r3,r3,r10
    3484:	183fe01e 	bne	r3,zero,3408 <__alt_mem_onchip_memory2_0+0xf7bff408>
    3488:	10bfff04 	addi	r2,r2,-4
    348c:	21000104 	addi	r4,r4,4
    3490:	40bff636 	bltu	r8,r2,346c <__alt_mem_onchip_memory2_0+0xf7bff46c>
    3494:	003fdb06 	br	3404 <__alt_mem_onchip_memory2_0+0xf7bff404>
    3498:	3005883a 	mov	r2,r6
    349c:	003fd706 	br	33fc <__alt_mem_onchip_memory2_0+0xf7bff3fc>

000034a0 <memcmp>:
    34a0:	01c000c4 	movi	r7,3
    34a4:	3980192e 	bgeu	r7,r6,350c <memcmp+0x6c>
    34a8:	2144b03a 	or	r2,r4,r5
    34ac:	11c4703a 	and	r2,r2,r7
    34b0:	10000f26 	beq	r2,zero,34f0 <memcmp+0x50>
    34b4:	20800003 	ldbu	r2,0(r4)
    34b8:	28c00003 	ldbu	r3,0(r5)
    34bc:	10c0151e 	bne	r2,r3,3514 <memcmp+0x74>
    34c0:	31bfff84 	addi	r6,r6,-2
    34c4:	01ffffc4 	movi	r7,-1
    34c8:	00000406 	br	34dc <memcmp+0x3c>
    34cc:	20800003 	ldbu	r2,0(r4)
    34d0:	28c00003 	ldbu	r3,0(r5)
    34d4:	31bfffc4 	addi	r6,r6,-1
    34d8:	10c00e1e 	bne	r2,r3,3514 <memcmp+0x74>
    34dc:	21000044 	addi	r4,r4,1
    34e0:	29400044 	addi	r5,r5,1
    34e4:	31fff91e 	bne	r6,r7,34cc <__alt_mem_onchip_memory2_0+0xf7bff4cc>
    34e8:	0005883a 	mov	r2,zero
    34ec:	f800283a 	ret
    34f0:	20c00017 	ldw	r3,0(r4)
    34f4:	28800017 	ldw	r2,0(r5)
    34f8:	18bfee1e 	bne	r3,r2,34b4 <__alt_mem_onchip_memory2_0+0xf7bff4b4>
    34fc:	31bfff04 	addi	r6,r6,-4
    3500:	21000104 	addi	r4,r4,4
    3504:	29400104 	addi	r5,r5,4
    3508:	39bff936 	bltu	r7,r6,34f0 <__alt_mem_onchip_memory2_0+0xf7bff4f0>
    350c:	303fe91e 	bne	r6,zero,34b4 <__alt_mem_onchip_memory2_0+0xf7bff4b4>
    3510:	003ff506 	br	34e8 <__alt_mem_onchip_memory2_0+0xf7bff4e8>
    3514:	10c5c83a 	sub	r2,r2,r3
    3518:	f800283a 	ret

0000351c <memcpy>:
    351c:	defffd04 	addi	sp,sp,-12
    3520:	dfc00215 	stw	ra,8(sp)
    3524:	dc400115 	stw	r17,4(sp)
    3528:	dc000015 	stw	r16,0(sp)
    352c:	00c003c4 	movi	r3,15
    3530:	2005883a 	mov	r2,r4
    3534:	1980452e 	bgeu	r3,r6,364c <memcpy+0x130>
    3538:	2906b03a 	or	r3,r5,r4
    353c:	18c000cc 	andi	r3,r3,3
    3540:	1800441e 	bne	r3,zero,3654 <memcpy+0x138>
    3544:	347ffc04 	addi	r17,r6,-16
    3548:	8822d13a 	srli	r17,r17,4
    354c:	28c00104 	addi	r3,r5,4
    3550:	23400104 	addi	r13,r4,4
    3554:	8820913a 	slli	r16,r17,4
    3558:	2b000204 	addi	r12,r5,8
    355c:	22c00204 	addi	r11,r4,8
    3560:	84000504 	addi	r16,r16,20
    3564:	2a800304 	addi	r10,r5,12
    3568:	22400304 	addi	r9,r4,12
    356c:	2c21883a 	add	r16,r5,r16
    3570:	2811883a 	mov	r8,r5
    3574:	200f883a 	mov	r7,r4
    3578:	41000017 	ldw	r4,0(r8)
    357c:	1fc00017 	ldw	ra,0(r3)
    3580:	63c00017 	ldw	r15,0(r12)
    3584:	39000015 	stw	r4,0(r7)
    3588:	53800017 	ldw	r14,0(r10)
    358c:	6fc00015 	stw	ra,0(r13)
    3590:	5bc00015 	stw	r15,0(r11)
    3594:	4b800015 	stw	r14,0(r9)
    3598:	18c00404 	addi	r3,r3,16
    359c:	39c00404 	addi	r7,r7,16
    35a0:	42000404 	addi	r8,r8,16
    35a4:	6b400404 	addi	r13,r13,16
    35a8:	63000404 	addi	r12,r12,16
    35ac:	5ac00404 	addi	r11,r11,16
    35b0:	52800404 	addi	r10,r10,16
    35b4:	4a400404 	addi	r9,r9,16
    35b8:	1c3fef1e 	bne	r3,r16,3578 <__alt_mem_onchip_memory2_0+0xf7bff578>
    35bc:	89c00044 	addi	r7,r17,1
    35c0:	380e913a 	slli	r7,r7,4
    35c4:	310003cc 	andi	r4,r6,15
    35c8:	02c000c4 	movi	r11,3
    35cc:	11c7883a 	add	r3,r2,r7
    35d0:	29cb883a 	add	r5,r5,r7
    35d4:	5900212e 	bgeu	r11,r4,365c <memcpy+0x140>
    35d8:	1813883a 	mov	r9,r3
    35dc:	2811883a 	mov	r8,r5
    35e0:	200f883a 	mov	r7,r4
    35e4:	42800017 	ldw	r10,0(r8)
    35e8:	4a400104 	addi	r9,r9,4
    35ec:	39ffff04 	addi	r7,r7,-4
    35f0:	4abfff15 	stw	r10,-4(r9)
    35f4:	42000104 	addi	r8,r8,4
    35f8:	59fffa36 	bltu	r11,r7,35e4 <__alt_mem_onchip_memory2_0+0xf7bff5e4>
    35fc:	213fff04 	addi	r4,r4,-4
    3600:	2008d0ba 	srli	r4,r4,2
    3604:	318000cc 	andi	r6,r6,3
    3608:	21000044 	addi	r4,r4,1
    360c:	2109883a 	add	r4,r4,r4
    3610:	2109883a 	add	r4,r4,r4
    3614:	1907883a 	add	r3,r3,r4
    3618:	290b883a 	add	r5,r5,r4
    361c:	30000626 	beq	r6,zero,3638 <memcpy+0x11c>
    3620:	198d883a 	add	r6,r3,r6
    3624:	29c00003 	ldbu	r7,0(r5)
    3628:	18c00044 	addi	r3,r3,1
    362c:	29400044 	addi	r5,r5,1
    3630:	19ffffc5 	stb	r7,-1(r3)
    3634:	19bffb1e 	bne	r3,r6,3624 <__alt_mem_onchip_memory2_0+0xf7bff624>
    3638:	dfc00217 	ldw	ra,8(sp)
    363c:	dc400117 	ldw	r17,4(sp)
    3640:	dc000017 	ldw	r16,0(sp)
    3644:	dec00304 	addi	sp,sp,12
    3648:	f800283a 	ret
    364c:	2007883a 	mov	r3,r4
    3650:	003ff206 	br	361c <__alt_mem_onchip_memory2_0+0xf7bff61c>
    3654:	2007883a 	mov	r3,r4
    3658:	003ff106 	br	3620 <__alt_mem_onchip_memory2_0+0xf7bff620>
    365c:	200d883a 	mov	r6,r4
    3660:	003fee06 	br	361c <__alt_mem_onchip_memory2_0+0xf7bff61c>

00003664 <memmove>:
    3664:	2005883a 	mov	r2,r4
    3668:	29000b2e 	bgeu	r5,r4,3698 <memmove+0x34>
    366c:	298f883a 	add	r7,r5,r6
    3670:	21c0092e 	bgeu	r4,r7,3698 <memmove+0x34>
    3674:	2187883a 	add	r3,r4,r6
    3678:	198bc83a 	sub	r5,r3,r6
    367c:	30004826 	beq	r6,zero,37a0 <memmove+0x13c>
    3680:	39ffffc4 	addi	r7,r7,-1
    3684:	39000003 	ldbu	r4,0(r7)
    3688:	18ffffc4 	addi	r3,r3,-1
    368c:	19000005 	stb	r4,0(r3)
    3690:	28fffb1e 	bne	r5,r3,3680 <__alt_mem_onchip_memory2_0+0xf7bff680>
    3694:	f800283a 	ret
    3698:	00c003c4 	movi	r3,15
    369c:	1980412e 	bgeu	r3,r6,37a4 <memmove+0x140>
    36a0:	2886b03a 	or	r3,r5,r2
    36a4:	18c000cc 	andi	r3,r3,3
    36a8:	1800401e 	bne	r3,zero,37ac <memmove+0x148>
    36ac:	33fffc04 	addi	r15,r6,-16
    36b0:	781ed13a 	srli	r15,r15,4
    36b4:	28c00104 	addi	r3,r5,4
    36b8:	13400104 	addi	r13,r2,4
    36bc:	781c913a 	slli	r14,r15,4
    36c0:	2b000204 	addi	r12,r5,8
    36c4:	12c00204 	addi	r11,r2,8
    36c8:	73800504 	addi	r14,r14,20
    36cc:	2a800304 	addi	r10,r5,12
    36d0:	12400304 	addi	r9,r2,12
    36d4:	2b9d883a 	add	r14,r5,r14
    36d8:	2811883a 	mov	r8,r5
    36dc:	100f883a 	mov	r7,r2
    36e0:	41000017 	ldw	r4,0(r8)
    36e4:	39c00404 	addi	r7,r7,16
    36e8:	18c00404 	addi	r3,r3,16
    36ec:	393ffc15 	stw	r4,-16(r7)
    36f0:	193ffc17 	ldw	r4,-16(r3)
    36f4:	6b400404 	addi	r13,r13,16
    36f8:	5ac00404 	addi	r11,r11,16
    36fc:	693ffc15 	stw	r4,-16(r13)
    3700:	61000017 	ldw	r4,0(r12)
    3704:	4a400404 	addi	r9,r9,16
    3708:	42000404 	addi	r8,r8,16
    370c:	593ffc15 	stw	r4,-16(r11)
    3710:	51000017 	ldw	r4,0(r10)
    3714:	63000404 	addi	r12,r12,16
    3718:	52800404 	addi	r10,r10,16
    371c:	493ffc15 	stw	r4,-16(r9)
    3720:	1bbfef1e 	bne	r3,r14,36e0 <__alt_mem_onchip_memory2_0+0xf7bff6e0>
    3724:	79000044 	addi	r4,r15,1
    3728:	2008913a 	slli	r4,r4,4
    372c:	328003cc 	andi	r10,r6,15
    3730:	02c000c4 	movi	r11,3
    3734:	1107883a 	add	r3,r2,r4
    3738:	290b883a 	add	r5,r5,r4
    373c:	5a801e2e 	bgeu	r11,r10,37b8 <memmove+0x154>
    3740:	1813883a 	mov	r9,r3
    3744:	2811883a 	mov	r8,r5
    3748:	500f883a 	mov	r7,r10
    374c:	41000017 	ldw	r4,0(r8)
    3750:	4a400104 	addi	r9,r9,4
    3754:	39ffff04 	addi	r7,r7,-4
    3758:	493fff15 	stw	r4,-4(r9)
    375c:	42000104 	addi	r8,r8,4
    3760:	59fffa36 	bltu	r11,r7,374c <__alt_mem_onchip_memory2_0+0xf7bff74c>
    3764:	513fff04 	addi	r4,r10,-4
    3768:	2008d0ba 	srli	r4,r4,2
    376c:	318000cc 	andi	r6,r6,3
    3770:	21000044 	addi	r4,r4,1
    3774:	2109883a 	add	r4,r4,r4
    3778:	2109883a 	add	r4,r4,r4
    377c:	1907883a 	add	r3,r3,r4
    3780:	290b883a 	add	r5,r5,r4
    3784:	30000b26 	beq	r6,zero,37b4 <memmove+0x150>
    3788:	198d883a 	add	r6,r3,r6
    378c:	29c00003 	ldbu	r7,0(r5)
    3790:	18c00044 	addi	r3,r3,1
    3794:	29400044 	addi	r5,r5,1
    3798:	19ffffc5 	stb	r7,-1(r3)
    379c:	19bffb1e 	bne	r3,r6,378c <__alt_mem_onchip_memory2_0+0xf7bff78c>
    37a0:	f800283a 	ret
    37a4:	1007883a 	mov	r3,r2
    37a8:	003ff606 	br	3784 <__alt_mem_onchip_memory2_0+0xf7bff784>
    37ac:	1007883a 	mov	r3,r2
    37b0:	003ff506 	br	3788 <__alt_mem_onchip_memory2_0+0xf7bff788>
    37b4:	f800283a 	ret
    37b8:	500d883a 	mov	r6,r10
    37bc:	003ff106 	br	3784 <__alt_mem_onchip_memory2_0+0xf7bff784>

000037c0 <_realloc_r>:
    37c0:	defff604 	addi	sp,sp,-40
    37c4:	dc800215 	stw	r18,8(sp)
    37c8:	dfc00915 	stw	ra,36(sp)
    37cc:	df000815 	stw	fp,32(sp)
    37d0:	ddc00715 	stw	r23,28(sp)
    37d4:	dd800615 	stw	r22,24(sp)
    37d8:	dd400515 	stw	r21,20(sp)
    37dc:	dd000415 	stw	r20,16(sp)
    37e0:	dcc00315 	stw	r19,12(sp)
    37e4:	dc400115 	stw	r17,4(sp)
    37e8:	dc000015 	stw	r16,0(sp)
    37ec:	3025883a 	mov	r18,r6
    37f0:	2800b726 	beq	r5,zero,3ad0 <_realloc_r+0x310>
    37f4:	282b883a 	mov	r21,r5
    37f8:	2029883a 	mov	r20,r4
    37fc:	00058f40 	call	58f4 <__malloc_lock>
    3800:	a8bfff17 	ldw	r2,-4(r21)
    3804:	043fff04 	movi	r16,-4
    3808:	90c002c4 	addi	r3,r18,11
    380c:	01000584 	movi	r4,22
    3810:	acfffe04 	addi	r19,r21,-8
    3814:	1420703a 	and	r16,r2,r16
    3818:	20c0332e 	bgeu	r4,r3,38e8 <_realloc_r+0x128>
    381c:	047ffe04 	movi	r17,-8
    3820:	1c62703a 	and	r17,r3,r17
    3824:	8807883a 	mov	r3,r17
    3828:	88005816 	blt	r17,zero,398c <_realloc_r+0x1cc>
    382c:	8c805736 	bltu	r17,r18,398c <_realloc_r+0x1cc>
    3830:	80c0300e 	bge	r16,r3,38f4 <_realloc_r+0x134>
    3834:	07000034 	movhi	fp,0
    3838:	e71cf104 	addi	fp,fp,29636
    383c:	e1c00217 	ldw	r7,8(fp)
    3840:	9c09883a 	add	r4,r19,r16
    3844:	22000117 	ldw	r8,4(r4)
    3848:	21c06326 	beq	r4,r7,39d8 <_realloc_r+0x218>
    384c:	017fff84 	movi	r5,-2
    3850:	414a703a 	and	r5,r8,r5
    3854:	214b883a 	add	r5,r4,r5
    3858:	29800117 	ldw	r6,4(r5)
    385c:	3180004c 	andi	r6,r6,1
    3860:	30003f26 	beq	r6,zero,3960 <_realloc_r+0x1a0>
    3864:	1080004c 	andi	r2,r2,1
    3868:	10008326 	beq	r2,zero,3a78 <_realloc_r+0x2b8>
    386c:	900b883a 	mov	r5,r18
    3870:	a009883a 	mov	r4,r20
    3874:	0002bb00 	call	2bb0 <_malloc_r>
    3878:	1025883a 	mov	r18,r2
    387c:	10011e26 	beq	r2,zero,3cf8 <_realloc_r+0x538>
    3880:	a93fff17 	ldw	r4,-4(r21)
    3884:	10fffe04 	addi	r3,r2,-8
    3888:	00bfff84 	movi	r2,-2
    388c:	2084703a 	and	r2,r4,r2
    3890:	9885883a 	add	r2,r19,r2
    3894:	1880ee26 	beq	r3,r2,3c50 <_realloc_r+0x490>
    3898:	81bfff04 	addi	r6,r16,-4
    389c:	00800904 	movi	r2,36
    38a0:	1180b836 	bltu	r2,r6,3b84 <_realloc_r+0x3c4>
    38a4:	00c004c4 	movi	r3,19
    38a8:	19809636 	bltu	r3,r6,3b04 <_realloc_r+0x344>
    38ac:	9005883a 	mov	r2,r18
    38b0:	a807883a 	mov	r3,r21
    38b4:	19000017 	ldw	r4,0(r3)
    38b8:	11000015 	stw	r4,0(r2)
    38bc:	19000117 	ldw	r4,4(r3)
    38c0:	11000115 	stw	r4,4(r2)
    38c4:	18c00217 	ldw	r3,8(r3)
    38c8:	10c00215 	stw	r3,8(r2)
    38cc:	a80b883a 	mov	r5,r21
    38d0:	a009883a 	mov	r4,r20
    38d4:	00048500 	call	4850 <_free_r>
    38d8:	a009883a 	mov	r4,r20
    38dc:	00059180 	call	5918 <__malloc_unlock>
    38e0:	9005883a 	mov	r2,r18
    38e4:	00001206 	br	3930 <_realloc_r+0x170>
    38e8:	00c00404 	movi	r3,16
    38ec:	1823883a 	mov	r17,r3
    38f0:	003fce06 	br	382c <__alt_mem_onchip_memory2_0+0xf7bff82c>
    38f4:	a825883a 	mov	r18,r21
    38f8:	8445c83a 	sub	r2,r16,r17
    38fc:	00c003c4 	movi	r3,15
    3900:	18802636 	bltu	r3,r2,399c <_realloc_r+0x1dc>
    3904:	99800117 	ldw	r6,4(r19)
    3908:	9c07883a 	add	r3,r19,r16
    390c:	3180004c 	andi	r6,r6,1
    3910:	3420b03a 	or	r16,r6,r16
    3914:	9c000115 	stw	r16,4(r19)
    3918:	18800117 	ldw	r2,4(r3)
    391c:	10800054 	ori	r2,r2,1
    3920:	18800115 	stw	r2,4(r3)
    3924:	a009883a 	mov	r4,r20
    3928:	00059180 	call	5918 <__malloc_unlock>
    392c:	9005883a 	mov	r2,r18
    3930:	dfc00917 	ldw	ra,36(sp)
    3934:	df000817 	ldw	fp,32(sp)
    3938:	ddc00717 	ldw	r23,28(sp)
    393c:	dd800617 	ldw	r22,24(sp)
    3940:	dd400517 	ldw	r21,20(sp)
    3944:	dd000417 	ldw	r20,16(sp)
    3948:	dcc00317 	ldw	r19,12(sp)
    394c:	dc800217 	ldw	r18,8(sp)
    3950:	dc400117 	ldw	r17,4(sp)
    3954:	dc000017 	ldw	r16,0(sp)
    3958:	dec00a04 	addi	sp,sp,40
    395c:	f800283a 	ret
    3960:	017fff04 	movi	r5,-4
    3964:	414a703a 	and	r5,r8,r5
    3968:	814d883a 	add	r6,r16,r5
    396c:	30c01f16 	blt	r6,r3,39ec <_realloc_r+0x22c>
    3970:	20800317 	ldw	r2,12(r4)
    3974:	20c00217 	ldw	r3,8(r4)
    3978:	a825883a 	mov	r18,r21
    397c:	3021883a 	mov	r16,r6
    3980:	18800315 	stw	r2,12(r3)
    3984:	10c00215 	stw	r3,8(r2)
    3988:	003fdb06 	br	38f8 <__alt_mem_onchip_memory2_0+0xf7bff8f8>
    398c:	00800304 	movi	r2,12
    3990:	a0800015 	stw	r2,0(r20)
    3994:	0005883a 	mov	r2,zero
    3998:	003fe506 	br	3930 <__alt_mem_onchip_memory2_0+0xf7bff930>
    399c:	98c00117 	ldw	r3,4(r19)
    39a0:	9c4b883a 	add	r5,r19,r17
    39a4:	11000054 	ori	r4,r2,1
    39a8:	18c0004c 	andi	r3,r3,1
    39ac:	1c62b03a 	or	r17,r3,r17
    39b0:	9c400115 	stw	r17,4(r19)
    39b4:	29000115 	stw	r4,4(r5)
    39b8:	2885883a 	add	r2,r5,r2
    39bc:	10c00117 	ldw	r3,4(r2)
    39c0:	29400204 	addi	r5,r5,8
    39c4:	a009883a 	mov	r4,r20
    39c8:	18c00054 	ori	r3,r3,1
    39cc:	10c00115 	stw	r3,4(r2)
    39d0:	00048500 	call	4850 <_free_r>
    39d4:	003fd306 	br	3924 <__alt_mem_onchip_memory2_0+0xf7bff924>
    39d8:	017fff04 	movi	r5,-4
    39dc:	414a703a 	and	r5,r8,r5
    39e0:	89800404 	addi	r6,r17,16
    39e4:	8151883a 	add	r8,r16,r5
    39e8:	4180590e 	bge	r8,r6,3b50 <_realloc_r+0x390>
    39ec:	1080004c 	andi	r2,r2,1
    39f0:	103f9e1e 	bne	r2,zero,386c <__alt_mem_onchip_memory2_0+0xf7bff86c>
    39f4:	adbffe17 	ldw	r22,-8(r21)
    39f8:	00bfff04 	movi	r2,-4
    39fc:	9dadc83a 	sub	r22,r19,r22
    3a00:	b1800117 	ldw	r6,4(r22)
    3a04:	3084703a 	and	r2,r6,r2
    3a08:	20002026 	beq	r4,zero,3a8c <_realloc_r+0x2cc>
    3a0c:	80af883a 	add	r23,r16,r2
    3a10:	b96f883a 	add	r23,r23,r5
    3a14:	21c05f26 	beq	r4,r7,3b94 <_realloc_r+0x3d4>
    3a18:	b8c01c16 	blt	r23,r3,3a8c <_realloc_r+0x2cc>
    3a1c:	20800317 	ldw	r2,12(r4)
    3a20:	20c00217 	ldw	r3,8(r4)
    3a24:	81bfff04 	addi	r6,r16,-4
    3a28:	01000904 	movi	r4,36
    3a2c:	18800315 	stw	r2,12(r3)
    3a30:	10c00215 	stw	r3,8(r2)
    3a34:	b0c00217 	ldw	r3,8(r22)
    3a38:	b0800317 	ldw	r2,12(r22)
    3a3c:	b4800204 	addi	r18,r22,8
    3a40:	18800315 	stw	r2,12(r3)
    3a44:	10c00215 	stw	r3,8(r2)
    3a48:	21801b36 	bltu	r4,r6,3ab8 <_realloc_r+0x2f8>
    3a4c:	008004c4 	movi	r2,19
    3a50:	1180352e 	bgeu	r2,r6,3b28 <_realloc_r+0x368>
    3a54:	a8800017 	ldw	r2,0(r21)
    3a58:	b0800215 	stw	r2,8(r22)
    3a5c:	a8800117 	ldw	r2,4(r21)
    3a60:	b0800315 	stw	r2,12(r22)
    3a64:	008006c4 	movi	r2,27
    3a68:	11807f36 	bltu	r2,r6,3c68 <_realloc_r+0x4a8>
    3a6c:	b0800404 	addi	r2,r22,16
    3a70:	ad400204 	addi	r21,r21,8
    3a74:	00002d06 	br	3b2c <_realloc_r+0x36c>
    3a78:	adbffe17 	ldw	r22,-8(r21)
    3a7c:	00bfff04 	movi	r2,-4
    3a80:	9dadc83a 	sub	r22,r19,r22
    3a84:	b1000117 	ldw	r4,4(r22)
    3a88:	2084703a 	and	r2,r4,r2
    3a8c:	b03f7726 	beq	r22,zero,386c <__alt_mem_onchip_memory2_0+0xf7bff86c>
    3a90:	80af883a 	add	r23,r16,r2
    3a94:	b8ff7516 	blt	r23,r3,386c <__alt_mem_onchip_memory2_0+0xf7bff86c>
    3a98:	b0800317 	ldw	r2,12(r22)
    3a9c:	b0c00217 	ldw	r3,8(r22)
    3aa0:	81bfff04 	addi	r6,r16,-4
    3aa4:	01000904 	movi	r4,36
    3aa8:	18800315 	stw	r2,12(r3)
    3aac:	10c00215 	stw	r3,8(r2)
    3ab0:	b4800204 	addi	r18,r22,8
    3ab4:	21bfe52e 	bgeu	r4,r6,3a4c <__alt_mem_onchip_memory2_0+0xf7bffa4c>
    3ab8:	a80b883a 	mov	r5,r21
    3abc:	9009883a 	mov	r4,r18
    3ac0:	00036640 	call	3664 <memmove>
    3ac4:	b821883a 	mov	r16,r23
    3ac8:	b027883a 	mov	r19,r22
    3acc:	003f8a06 	br	38f8 <__alt_mem_onchip_memory2_0+0xf7bff8f8>
    3ad0:	300b883a 	mov	r5,r6
    3ad4:	dfc00917 	ldw	ra,36(sp)
    3ad8:	df000817 	ldw	fp,32(sp)
    3adc:	ddc00717 	ldw	r23,28(sp)
    3ae0:	dd800617 	ldw	r22,24(sp)
    3ae4:	dd400517 	ldw	r21,20(sp)
    3ae8:	dd000417 	ldw	r20,16(sp)
    3aec:	dcc00317 	ldw	r19,12(sp)
    3af0:	dc800217 	ldw	r18,8(sp)
    3af4:	dc400117 	ldw	r17,4(sp)
    3af8:	dc000017 	ldw	r16,0(sp)
    3afc:	dec00a04 	addi	sp,sp,40
    3b00:	0002bb01 	jmpi	2bb0 <_malloc_r>
    3b04:	a8c00017 	ldw	r3,0(r21)
    3b08:	90c00015 	stw	r3,0(r18)
    3b0c:	a8c00117 	ldw	r3,4(r21)
    3b10:	90c00115 	stw	r3,4(r18)
    3b14:	00c006c4 	movi	r3,27
    3b18:	19804536 	bltu	r3,r6,3c30 <_realloc_r+0x470>
    3b1c:	90800204 	addi	r2,r18,8
    3b20:	a8c00204 	addi	r3,r21,8
    3b24:	003f6306 	br	38b4 <__alt_mem_onchip_memory2_0+0xf7bff8b4>
    3b28:	9005883a 	mov	r2,r18
    3b2c:	a8c00017 	ldw	r3,0(r21)
    3b30:	b821883a 	mov	r16,r23
    3b34:	b027883a 	mov	r19,r22
    3b38:	10c00015 	stw	r3,0(r2)
    3b3c:	a8c00117 	ldw	r3,4(r21)
    3b40:	10c00115 	stw	r3,4(r2)
    3b44:	a8c00217 	ldw	r3,8(r21)
    3b48:	10c00215 	stw	r3,8(r2)
    3b4c:	003f6a06 	br	38f8 <__alt_mem_onchip_memory2_0+0xf7bff8f8>
    3b50:	9c67883a 	add	r19,r19,r17
    3b54:	4445c83a 	sub	r2,r8,r17
    3b58:	e4c00215 	stw	r19,8(fp)
    3b5c:	10800054 	ori	r2,r2,1
    3b60:	98800115 	stw	r2,4(r19)
    3b64:	a8bfff17 	ldw	r2,-4(r21)
    3b68:	a009883a 	mov	r4,r20
    3b6c:	1080004c 	andi	r2,r2,1
    3b70:	1462b03a 	or	r17,r2,r17
    3b74:	ac7fff15 	stw	r17,-4(r21)
    3b78:	00059180 	call	5918 <__malloc_unlock>
    3b7c:	a805883a 	mov	r2,r21
    3b80:	003f6b06 	br	3930 <__alt_mem_onchip_memory2_0+0xf7bff930>
    3b84:	a80b883a 	mov	r5,r21
    3b88:	9009883a 	mov	r4,r18
    3b8c:	00036640 	call	3664 <memmove>
    3b90:	003f4e06 	br	38cc <__alt_mem_onchip_memory2_0+0xf7bff8cc>
    3b94:	89000404 	addi	r4,r17,16
    3b98:	b93fbc16 	blt	r23,r4,3a8c <__alt_mem_onchip_memory2_0+0xf7bffa8c>
    3b9c:	b0800317 	ldw	r2,12(r22)
    3ba0:	b0c00217 	ldw	r3,8(r22)
    3ba4:	81bfff04 	addi	r6,r16,-4
    3ba8:	01000904 	movi	r4,36
    3bac:	18800315 	stw	r2,12(r3)
    3bb0:	10c00215 	stw	r3,8(r2)
    3bb4:	b4800204 	addi	r18,r22,8
    3bb8:	21804336 	bltu	r4,r6,3cc8 <_realloc_r+0x508>
    3bbc:	008004c4 	movi	r2,19
    3bc0:	11803f2e 	bgeu	r2,r6,3cc0 <_realloc_r+0x500>
    3bc4:	a8800017 	ldw	r2,0(r21)
    3bc8:	b0800215 	stw	r2,8(r22)
    3bcc:	a8800117 	ldw	r2,4(r21)
    3bd0:	b0800315 	stw	r2,12(r22)
    3bd4:	008006c4 	movi	r2,27
    3bd8:	11803f36 	bltu	r2,r6,3cd8 <_realloc_r+0x518>
    3bdc:	b0800404 	addi	r2,r22,16
    3be0:	ad400204 	addi	r21,r21,8
    3be4:	a8c00017 	ldw	r3,0(r21)
    3be8:	10c00015 	stw	r3,0(r2)
    3bec:	a8c00117 	ldw	r3,4(r21)
    3bf0:	10c00115 	stw	r3,4(r2)
    3bf4:	a8c00217 	ldw	r3,8(r21)
    3bf8:	10c00215 	stw	r3,8(r2)
    3bfc:	b447883a 	add	r3,r22,r17
    3c00:	bc45c83a 	sub	r2,r23,r17
    3c04:	e0c00215 	stw	r3,8(fp)
    3c08:	10800054 	ori	r2,r2,1
    3c0c:	18800115 	stw	r2,4(r3)
    3c10:	b0800117 	ldw	r2,4(r22)
    3c14:	a009883a 	mov	r4,r20
    3c18:	1080004c 	andi	r2,r2,1
    3c1c:	1462b03a 	or	r17,r2,r17
    3c20:	b4400115 	stw	r17,4(r22)
    3c24:	00059180 	call	5918 <__malloc_unlock>
    3c28:	9005883a 	mov	r2,r18
    3c2c:	003f4006 	br	3930 <__alt_mem_onchip_memory2_0+0xf7bff930>
    3c30:	a8c00217 	ldw	r3,8(r21)
    3c34:	90c00215 	stw	r3,8(r18)
    3c38:	a8c00317 	ldw	r3,12(r21)
    3c3c:	90c00315 	stw	r3,12(r18)
    3c40:	30801126 	beq	r6,r2,3c88 <_realloc_r+0x4c8>
    3c44:	90800404 	addi	r2,r18,16
    3c48:	a8c00404 	addi	r3,r21,16
    3c4c:	003f1906 	br	38b4 <__alt_mem_onchip_memory2_0+0xf7bff8b4>
    3c50:	90ffff17 	ldw	r3,-4(r18)
    3c54:	00bfff04 	movi	r2,-4
    3c58:	a825883a 	mov	r18,r21
    3c5c:	1884703a 	and	r2,r3,r2
    3c60:	80a1883a 	add	r16,r16,r2
    3c64:	003f2406 	br	38f8 <__alt_mem_onchip_memory2_0+0xf7bff8f8>
    3c68:	a8800217 	ldw	r2,8(r21)
    3c6c:	b0800415 	stw	r2,16(r22)
    3c70:	a8800317 	ldw	r2,12(r21)
    3c74:	b0800515 	stw	r2,20(r22)
    3c78:	31000a26 	beq	r6,r4,3ca4 <_realloc_r+0x4e4>
    3c7c:	b0800604 	addi	r2,r22,24
    3c80:	ad400404 	addi	r21,r21,16
    3c84:	003fa906 	br	3b2c <__alt_mem_onchip_memory2_0+0xf7bffb2c>
    3c88:	a9000417 	ldw	r4,16(r21)
    3c8c:	90800604 	addi	r2,r18,24
    3c90:	a8c00604 	addi	r3,r21,24
    3c94:	91000415 	stw	r4,16(r18)
    3c98:	a9000517 	ldw	r4,20(r21)
    3c9c:	91000515 	stw	r4,20(r18)
    3ca0:	003f0406 	br	38b4 <__alt_mem_onchip_memory2_0+0xf7bff8b4>
    3ca4:	a8c00417 	ldw	r3,16(r21)
    3ca8:	ad400604 	addi	r21,r21,24
    3cac:	b0800804 	addi	r2,r22,32
    3cb0:	b0c00615 	stw	r3,24(r22)
    3cb4:	a8ffff17 	ldw	r3,-4(r21)
    3cb8:	b0c00715 	stw	r3,28(r22)
    3cbc:	003f9b06 	br	3b2c <__alt_mem_onchip_memory2_0+0xf7bffb2c>
    3cc0:	9005883a 	mov	r2,r18
    3cc4:	003fc706 	br	3be4 <__alt_mem_onchip_memory2_0+0xf7bffbe4>
    3cc8:	a80b883a 	mov	r5,r21
    3ccc:	9009883a 	mov	r4,r18
    3cd0:	00036640 	call	3664 <memmove>
    3cd4:	003fc906 	br	3bfc <__alt_mem_onchip_memory2_0+0xf7bffbfc>
    3cd8:	a8800217 	ldw	r2,8(r21)
    3cdc:	b0800415 	stw	r2,16(r22)
    3ce0:	a8800317 	ldw	r2,12(r21)
    3ce4:	b0800515 	stw	r2,20(r22)
    3ce8:	31000726 	beq	r6,r4,3d08 <_realloc_r+0x548>
    3cec:	b0800604 	addi	r2,r22,24
    3cf0:	ad400404 	addi	r21,r21,16
    3cf4:	003fbb06 	br	3be4 <__alt_mem_onchip_memory2_0+0xf7bffbe4>
    3cf8:	a009883a 	mov	r4,r20
    3cfc:	00059180 	call	5918 <__malloc_unlock>
    3d00:	0005883a 	mov	r2,zero
    3d04:	003f0a06 	br	3930 <__alt_mem_onchip_memory2_0+0xf7bff930>
    3d08:	a8c00417 	ldw	r3,16(r21)
    3d0c:	ad400604 	addi	r21,r21,24
    3d10:	b0800804 	addi	r2,r22,32
    3d14:	b0c00615 	stw	r3,24(r22)
    3d18:	a8ffff17 	ldw	r3,-4(r21)
    3d1c:	b0c00715 	stw	r3,28(r22)
    3d20:	003fb006 	br	3be4 <__alt_mem_onchip_memory2_0+0xf7bffbe4>

00003d24 <_sbrk_r>:
    3d24:	defffd04 	addi	sp,sp,-12
    3d28:	dc000015 	stw	r16,0(sp)
    3d2c:	04000074 	movhi	r16,1
    3d30:	dc400115 	stw	r17,4(sp)
    3d34:	8424c904 	addi	r16,r16,-27868
    3d38:	2023883a 	mov	r17,r4
    3d3c:	2809883a 	mov	r4,r5
    3d40:	dfc00215 	stw	ra,8(sp)
    3d44:	80000015 	stw	zero,0(r16)
    3d48:	0005a740 	call	5a74 <sbrk>
    3d4c:	00ffffc4 	movi	r3,-1
    3d50:	10c00526 	beq	r2,r3,3d68 <_sbrk_r+0x44>
    3d54:	dfc00217 	ldw	ra,8(sp)
    3d58:	dc400117 	ldw	r17,4(sp)
    3d5c:	dc000017 	ldw	r16,0(sp)
    3d60:	dec00304 	addi	sp,sp,12
    3d64:	f800283a 	ret
    3d68:	80c00017 	ldw	r3,0(r16)
    3d6c:	183ff926 	beq	r3,zero,3d54 <__alt_mem_onchip_memory2_0+0xf7bffd54>
    3d70:	88c00015 	stw	r3,0(r17)
    3d74:	003ff706 	br	3d54 <__alt_mem_onchip_memory2_0+0xf7bffd54>

00003d78 <strlen>:
    3d78:	208000cc 	andi	r2,r4,3
    3d7c:	10002026 	beq	r2,zero,3e00 <strlen+0x88>
    3d80:	20800007 	ldb	r2,0(r4)
    3d84:	10002026 	beq	r2,zero,3e08 <strlen+0x90>
    3d88:	2005883a 	mov	r2,r4
    3d8c:	00000206 	br	3d98 <strlen+0x20>
    3d90:	10c00007 	ldb	r3,0(r2)
    3d94:	18001826 	beq	r3,zero,3df8 <strlen+0x80>
    3d98:	10800044 	addi	r2,r2,1
    3d9c:	10c000cc 	andi	r3,r2,3
    3da0:	183ffb1e 	bne	r3,zero,3d90 <__alt_mem_onchip_memory2_0+0xf7bffd90>
    3da4:	10c00017 	ldw	r3,0(r2)
    3da8:	01ffbff4 	movhi	r7,65279
    3dac:	39ffbfc4 	addi	r7,r7,-257
    3db0:	00ca303a 	nor	r5,zero,r3
    3db4:	01a02074 	movhi	r6,32897
    3db8:	19c7883a 	add	r3,r3,r7
    3dbc:	31a02004 	addi	r6,r6,-32640
    3dc0:	1946703a 	and	r3,r3,r5
    3dc4:	1986703a 	and	r3,r3,r6
    3dc8:	1800091e 	bne	r3,zero,3df0 <strlen+0x78>
    3dcc:	10800104 	addi	r2,r2,4
    3dd0:	10c00017 	ldw	r3,0(r2)
    3dd4:	19cb883a 	add	r5,r3,r7
    3dd8:	00c6303a 	nor	r3,zero,r3
    3ddc:	28c6703a 	and	r3,r5,r3
    3de0:	1986703a 	and	r3,r3,r6
    3de4:	183ff926 	beq	r3,zero,3dcc <__alt_mem_onchip_memory2_0+0xf7bffdcc>
    3de8:	00000106 	br	3df0 <strlen+0x78>
    3dec:	10800044 	addi	r2,r2,1
    3df0:	10c00007 	ldb	r3,0(r2)
    3df4:	183ffd1e 	bne	r3,zero,3dec <__alt_mem_onchip_memory2_0+0xf7bffdec>
    3df8:	1105c83a 	sub	r2,r2,r4
    3dfc:	f800283a 	ret
    3e00:	2005883a 	mov	r2,r4
    3e04:	003fe706 	br	3da4 <__alt_mem_onchip_memory2_0+0xf7bffda4>
    3e08:	0005883a 	mov	r2,zero
    3e0c:	f800283a 	ret

00003e10 <__swsetup_r>:
    3e10:	00800034 	movhi	r2,0
    3e14:	defffd04 	addi	sp,sp,-12
    3e18:	109dfd04 	addi	r2,r2,30708
    3e1c:	dc400115 	stw	r17,4(sp)
    3e20:	2023883a 	mov	r17,r4
    3e24:	11000017 	ldw	r4,0(r2)
    3e28:	dc000015 	stw	r16,0(sp)
    3e2c:	dfc00215 	stw	ra,8(sp)
    3e30:	2821883a 	mov	r16,r5
    3e34:	20000226 	beq	r4,zero,3e40 <__swsetup_r+0x30>
    3e38:	20800e17 	ldw	r2,56(r4)
    3e3c:	10003126 	beq	r2,zero,3f04 <__swsetup_r+0xf4>
    3e40:	8080030b 	ldhu	r2,12(r16)
    3e44:	10c0020c 	andi	r3,r2,8
    3e48:	1009883a 	mov	r4,r2
    3e4c:	18000f26 	beq	r3,zero,3e8c <__swsetup_r+0x7c>
    3e50:	80c00417 	ldw	r3,16(r16)
    3e54:	18001526 	beq	r3,zero,3eac <__swsetup_r+0x9c>
    3e58:	1100004c 	andi	r4,r2,1
    3e5c:	20001c1e 	bne	r4,zero,3ed0 <__swsetup_r+0xc0>
    3e60:	1080008c 	andi	r2,r2,2
    3e64:	1000291e 	bne	r2,zero,3f0c <__swsetup_r+0xfc>
    3e68:	80800517 	ldw	r2,20(r16)
    3e6c:	80800215 	stw	r2,8(r16)
    3e70:	18001c26 	beq	r3,zero,3ee4 <__swsetup_r+0xd4>
    3e74:	0005883a 	mov	r2,zero
    3e78:	dfc00217 	ldw	ra,8(sp)
    3e7c:	dc400117 	ldw	r17,4(sp)
    3e80:	dc000017 	ldw	r16,0(sp)
    3e84:	dec00304 	addi	sp,sp,12
    3e88:	f800283a 	ret
    3e8c:	2080040c 	andi	r2,r4,16
    3e90:	10002e26 	beq	r2,zero,3f4c <__swsetup_r+0x13c>
    3e94:	2080010c 	andi	r2,r4,4
    3e98:	10001e1e 	bne	r2,zero,3f14 <__swsetup_r+0x104>
    3e9c:	80c00417 	ldw	r3,16(r16)
    3ea0:	20800214 	ori	r2,r4,8
    3ea4:	8080030d 	sth	r2,12(r16)
    3ea8:	183feb1e 	bne	r3,zero,3e58 <__alt_mem_onchip_memory2_0+0xf7bffe58>
    3eac:	1100a00c 	andi	r4,r2,640
    3eb0:	01408004 	movi	r5,512
    3eb4:	217fe826 	beq	r4,r5,3e58 <__alt_mem_onchip_memory2_0+0xf7bffe58>
    3eb8:	800b883a 	mov	r5,r16
    3ebc:	8809883a 	mov	r4,r17
    3ec0:	0004ce80 	call	4ce8 <__smakebuf_r>
    3ec4:	8080030b 	ldhu	r2,12(r16)
    3ec8:	80c00417 	ldw	r3,16(r16)
    3ecc:	003fe206 	br	3e58 <__alt_mem_onchip_memory2_0+0xf7bffe58>
    3ed0:	80800517 	ldw	r2,20(r16)
    3ed4:	80000215 	stw	zero,8(r16)
    3ed8:	0085c83a 	sub	r2,zero,r2
    3edc:	80800615 	stw	r2,24(r16)
    3ee0:	183fe41e 	bne	r3,zero,3e74 <__alt_mem_onchip_memory2_0+0xf7bffe74>
    3ee4:	80c0030b 	ldhu	r3,12(r16)
    3ee8:	0005883a 	mov	r2,zero
    3eec:	1900200c 	andi	r4,r3,128
    3ef0:	203fe126 	beq	r4,zero,3e78 <__alt_mem_onchip_memory2_0+0xf7bffe78>
    3ef4:	18c01014 	ori	r3,r3,64
    3ef8:	80c0030d 	sth	r3,12(r16)
    3efc:	00bfffc4 	movi	r2,-1
    3f00:	003fdd06 	br	3e78 <__alt_mem_onchip_memory2_0+0xf7bffe78>
    3f04:	00046dc0 	call	46dc <__sinit>
    3f08:	003fcd06 	br	3e40 <__alt_mem_onchip_memory2_0+0xf7bffe40>
    3f0c:	0005883a 	mov	r2,zero
    3f10:	003fd606 	br	3e6c <__alt_mem_onchip_memory2_0+0xf7bffe6c>
    3f14:	81400c17 	ldw	r5,48(r16)
    3f18:	28000626 	beq	r5,zero,3f34 <__swsetup_r+0x124>
    3f1c:	80801004 	addi	r2,r16,64
    3f20:	28800326 	beq	r5,r2,3f30 <__swsetup_r+0x120>
    3f24:	8809883a 	mov	r4,r17
    3f28:	00048500 	call	4850 <_free_r>
    3f2c:	8100030b 	ldhu	r4,12(r16)
    3f30:	80000c15 	stw	zero,48(r16)
    3f34:	80c00417 	ldw	r3,16(r16)
    3f38:	00bff6c4 	movi	r2,-37
    3f3c:	1108703a 	and	r4,r2,r4
    3f40:	80000115 	stw	zero,4(r16)
    3f44:	80c00015 	stw	r3,0(r16)
    3f48:	003fd506 	br	3ea0 <__alt_mem_onchip_memory2_0+0xf7bffea0>
    3f4c:	00800244 	movi	r2,9
    3f50:	88800015 	stw	r2,0(r17)
    3f54:	20801014 	ori	r2,r4,64
    3f58:	8080030d 	sth	r2,12(r16)
    3f5c:	00bfffc4 	movi	r2,-1
    3f60:	003fc506 	br	3e78 <__alt_mem_onchip_memory2_0+0xf7bffe78>

00003f64 <__call_exitprocs>:
    3f64:	defff504 	addi	sp,sp,-44
    3f68:	df000915 	stw	fp,36(sp)
    3f6c:	dd400615 	stw	r21,24(sp)
    3f70:	dc800315 	stw	r18,12(sp)
    3f74:	dfc00a15 	stw	ra,40(sp)
    3f78:	ddc00815 	stw	r23,32(sp)
    3f7c:	dd800715 	stw	r22,28(sp)
    3f80:	dd000515 	stw	r20,20(sp)
    3f84:	dcc00415 	stw	r19,16(sp)
    3f88:	dc400215 	stw	r17,8(sp)
    3f8c:	dc000115 	stw	r16,4(sp)
    3f90:	d9000015 	stw	r4,0(sp)
    3f94:	2839883a 	mov	fp,r5
    3f98:	04800044 	movi	r18,1
    3f9c:	057fffc4 	movi	r21,-1
    3fa0:	00800034 	movhi	r2,0
    3fa4:	109dfc04 	addi	r2,r2,30704
    3fa8:	12000017 	ldw	r8,0(r2)
    3fac:	45005217 	ldw	r20,328(r8)
    3fb0:	44c05204 	addi	r19,r8,328
    3fb4:	a0001c26 	beq	r20,zero,4028 <__call_exitprocs+0xc4>
    3fb8:	a0800117 	ldw	r2,4(r20)
    3fbc:	15ffffc4 	addi	r23,r2,-1
    3fc0:	b8000d16 	blt	r23,zero,3ff8 <__call_exitprocs+0x94>
    3fc4:	14000044 	addi	r16,r2,1
    3fc8:	8421883a 	add	r16,r16,r16
    3fcc:	8421883a 	add	r16,r16,r16
    3fd0:	84402004 	addi	r17,r16,128
    3fd4:	a463883a 	add	r17,r20,r17
    3fd8:	a421883a 	add	r16,r20,r16
    3fdc:	e0001e26 	beq	fp,zero,4058 <__call_exitprocs+0xf4>
    3fe0:	80804017 	ldw	r2,256(r16)
    3fe4:	e0801c26 	beq	fp,r2,4058 <__call_exitprocs+0xf4>
    3fe8:	bdffffc4 	addi	r23,r23,-1
    3fec:	843fff04 	addi	r16,r16,-4
    3ff0:	8c7fff04 	addi	r17,r17,-4
    3ff4:	bd7ff91e 	bne	r23,r21,3fdc <__alt_mem_onchip_memory2_0+0xf7bfffdc>
    3ff8:	00800034 	movhi	r2,0
    3ffc:	10800004 	addi	r2,r2,0
    4000:	10000926 	beq	r2,zero,4028 <__call_exitprocs+0xc4>
    4004:	a0800117 	ldw	r2,4(r20)
    4008:	1000301e 	bne	r2,zero,40cc <__call_exitprocs+0x168>
    400c:	a0800017 	ldw	r2,0(r20)
    4010:	10003226 	beq	r2,zero,40dc <__call_exitprocs+0x178>
    4014:	a009883a 	mov	r4,r20
    4018:	98800015 	stw	r2,0(r19)
    401c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
    4020:	9d000017 	ldw	r20,0(r19)
    4024:	a03fe41e 	bne	r20,zero,3fb8 <__alt_mem_onchip_memory2_0+0xf7bfffb8>
    4028:	dfc00a17 	ldw	ra,40(sp)
    402c:	df000917 	ldw	fp,36(sp)
    4030:	ddc00817 	ldw	r23,32(sp)
    4034:	dd800717 	ldw	r22,28(sp)
    4038:	dd400617 	ldw	r21,24(sp)
    403c:	dd000517 	ldw	r20,20(sp)
    4040:	dcc00417 	ldw	r19,16(sp)
    4044:	dc800317 	ldw	r18,12(sp)
    4048:	dc400217 	ldw	r17,8(sp)
    404c:	dc000117 	ldw	r16,4(sp)
    4050:	dec00b04 	addi	sp,sp,44
    4054:	f800283a 	ret
    4058:	a0800117 	ldw	r2,4(r20)
    405c:	80c00017 	ldw	r3,0(r16)
    4060:	10bfffc4 	addi	r2,r2,-1
    4064:	15c01426 	beq	r2,r23,40b8 <__call_exitprocs+0x154>
    4068:	80000015 	stw	zero,0(r16)
    406c:	183fde26 	beq	r3,zero,3fe8 <__alt_mem_onchip_memory2_0+0xf7bfffe8>
    4070:	95c8983a 	sll	r4,r18,r23
    4074:	a0806217 	ldw	r2,392(r20)
    4078:	a5800117 	ldw	r22,4(r20)
    407c:	2084703a 	and	r2,r4,r2
    4080:	10000b26 	beq	r2,zero,40b0 <__call_exitprocs+0x14c>
    4084:	a0806317 	ldw	r2,396(r20)
    4088:	2088703a 	and	r4,r4,r2
    408c:	20000c1e 	bne	r4,zero,40c0 <__call_exitprocs+0x15c>
    4090:	89400017 	ldw	r5,0(r17)
    4094:	d9000017 	ldw	r4,0(sp)
    4098:	183ee83a 	callr	r3
    409c:	a0800117 	ldw	r2,4(r20)
    40a0:	15bfbf1e 	bne	r2,r22,3fa0 <__alt_mem_onchip_memory2_0+0xf7bfffa0>
    40a4:	98800017 	ldw	r2,0(r19)
    40a8:	153fcf26 	beq	r2,r20,3fe8 <__alt_mem_onchip_memory2_0+0xf7bfffe8>
    40ac:	003fbc06 	br	3fa0 <__alt_mem_onchip_memory2_0+0xf7bfffa0>
    40b0:	183ee83a 	callr	r3
    40b4:	003ff906 	br	409c <__alt_mem_onchip_memory2_0+0xf7c0009c>
    40b8:	a5c00115 	stw	r23,4(r20)
    40bc:	003feb06 	br	406c <__alt_mem_onchip_memory2_0+0xf7c0006c>
    40c0:	89000017 	ldw	r4,0(r17)
    40c4:	183ee83a 	callr	r3
    40c8:	003ff406 	br	409c <__alt_mem_onchip_memory2_0+0xf7c0009c>
    40cc:	a0800017 	ldw	r2,0(r20)
    40d0:	a027883a 	mov	r19,r20
    40d4:	1029883a 	mov	r20,r2
    40d8:	003fb606 	br	3fb4 <__alt_mem_onchip_memory2_0+0xf7bfffb4>
    40dc:	0005883a 	mov	r2,zero
    40e0:	003ffb06 	br	40d0 <__alt_mem_onchip_memory2_0+0xf7c000d0>

000040e4 <__sflush_r>:
    40e4:	2880030b 	ldhu	r2,12(r5)
    40e8:	defffb04 	addi	sp,sp,-20
    40ec:	dcc00315 	stw	r19,12(sp)
    40f0:	dc400115 	stw	r17,4(sp)
    40f4:	dfc00415 	stw	ra,16(sp)
    40f8:	dc800215 	stw	r18,8(sp)
    40fc:	dc000015 	stw	r16,0(sp)
    4100:	10c0020c 	andi	r3,r2,8
    4104:	2823883a 	mov	r17,r5
    4108:	2027883a 	mov	r19,r4
    410c:	1800311e 	bne	r3,zero,41d4 <__sflush_r+0xf0>
    4110:	28c00117 	ldw	r3,4(r5)
    4114:	10820014 	ori	r2,r2,2048
    4118:	2880030d 	sth	r2,12(r5)
    411c:	00c04b0e 	bge	zero,r3,424c <__sflush_r+0x168>
    4120:	8a000a17 	ldw	r8,40(r17)
    4124:	40002326 	beq	r8,zero,41b4 <__sflush_r+0xd0>
    4128:	9c000017 	ldw	r16,0(r19)
    412c:	10c4000c 	andi	r3,r2,4096
    4130:	98000015 	stw	zero,0(r19)
    4134:	18004826 	beq	r3,zero,4258 <__sflush_r+0x174>
    4138:	89801417 	ldw	r6,80(r17)
    413c:	10c0010c 	andi	r3,r2,4
    4140:	18000626 	beq	r3,zero,415c <__sflush_r+0x78>
    4144:	88c00117 	ldw	r3,4(r17)
    4148:	88800c17 	ldw	r2,48(r17)
    414c:	30cdc83a 	sub	r6,r6,r3
    4150:	10000226 	beq	r2,zero,415c <__sflush_r+0x78>
    4154:	88800f17 	ldw	r2,60(r17)
    4158:	308dc83a 	sub	r6,r6,r2
    415c:	89400717 	ldw	r5,28(r17)
    4160:	000f883a 	mov	r7,zero
    4164:	9809883a 	mov	r4,r19
    4168:	403ee83a 	callr	r8
    416c:	00ffffc4 	movi	r3,-1
    4170:	10c04426 	beq	r2,r3,4284 <__sflush_r+0x1a0>
    4174:	88c0030b 	ldhu	r3,12(r17)
    4178:	89000417 	ldw	r4,16(r17)
    417c:	88000115 	stw	zero,4(r17)
    4180:	197dffcc 	andi	r5,r3,63487
    4184:	8940030d 	sth	r5,12(r17)
    4188:	89000015 	stw	r4,0(r17)
    418c:	18c4000c 	andi	r3,r3,4096
    4190:	18002c1e 	bne	r3,zero,4244 <__sflush_r+0x160>
    4194:	89400c17 	ldw	r5,48(r17)
    4198:	9c000015 	stw	r16,0(r19)
    419c:	28000526 	beq	r5,zero,41b4 <__sflush_r+0xd0>
    41a0:	88801004 	addi	r2,r17,64
    41a4:	28800226 	beq	r5,r2,41b0 <__sflush_r+0xcc>
    41a8:	9809883a 	mov	r4,r19
    41ac:	00048500 	call	4850 <_free_r>
    41b0:	88000c15 	stw	zero,48(r17)
    41b4:	0005883a 	mov	r2,zero
    41b8:	dfc00417 	ldw	ra,16(sp)
    41bc:	dcc00317 	ldw	r19,12(sp)
    41c0:	dc800217 	ldw	r18,8(sp)
    41c4:	dc400117 	ldw	r17,4(sp)
    41c8:	dc000017 	ldw	r16,0(sp)
    41cc:	dec00504 	addi	sp,sp,20
    41d0:	f800283a 	ret
    41d4:	2c800417 	ldw	r18,16(r5)
    41d8:	903ff626 	beq	r18,zero,41b4 <__alt_mem_onchip_memory2_0+0xf7c001b4>
    41dc:	2c000017 	ldw	r16,0(r5)
    41e0:	108000cc 	andi	r2,r2,3
    41e4:	2c800015 	stw	r18,0(r5)
    41e8:	84a1c83a 	sub	r16,r16,r18
    41ec:	1000131e 	bne	r2,zero,423c <__sflush_r+0x158>
    41f0:	28800517 	ldw	r2,20(r5)
    41f4:	88800215 	stw	r2,8(r17)
    41f8:	04000316 	blt	zero,r16,4208 <__sflush_r+0x124>
    41fc:	003fed06 	br	41b4 <__alt_mem_onchip_memory2_0+0xf7c001b4>
    4200:	90a5883a 	add	r18,r18,r2
    4204:	043feb0e 	bge	zero,r16,41b4 <__alt_mem_onchip_memory2_0+0xf7c001b4>
    4208:	88800917 	ldw	r2,36(r17)
    420c:	89400717 	ldw	r5,28(r17)
    4210:	800f883a 	mov	r7,r16
    4214:	900d883a 	mov	r6,r18
    4218:	9809883a 	mov	r4,r19
    421c:	103ee83a 	callr	r2
    4220:	80a1c83a 	sub	r16,r16,r2
    4224:	00bff616 	blt	zero,r2,4200 <__alt_mem_onchip_memory2_0+0xf7c00200>
    4228:	88c0030b 	ldhu	r3,12(r17)
    422c:	00bfffc4 	movi	r2,-1
    4230:	18c01014 	ori	r3,r3,64
    4234:	88c0030d 	sth	r3,12(r17)
    4238:	003fdf06 	br	41b8 <__alt_mem_onchip_memory2_0+0xf7c001b8>
    423c:	0005883a 	mov	r2,zero
    4240:	003fec06 	br	41f4 <__alt_mem_onchip_memory2_0+0xf7c001f4>
    4244:	88801415 	stw	r2,80(r17)
    4248:	003fd206 	br	4194 <__alt_mem_onchip_memory2_0+0xf7c00194>
    424c:	28c00f17 	ldw	r3,60(r5)
    4250:	00ffb316 	blt	zero,r3,4120 <__alt_mem_onchip_memory2_0+0xf7c00120>
    4254:	003fd706 	br	41b4 <__alt_mem_onchip_memory2_0+0xf7c001b4>
    4258:	89400717 	ldw	r5,28(r17)
    425c:	000d883a 	mov	r6,zero
    4260:	01c00044 	movi	r7,1
    4264:	9809883a 	mov	r4,r19
    4268:	403ee83a 	callr	r8
    426c:	100d883a 	mov	r6,r2
    4270:	00bfffc4 	movi	r2,-1
    4274:	30801426 	beq	r6,r2,42c8 <__sflush_r+0x1e4>
    4278:	8880030b 	ldhu	r2,12(r17)
    427c:	8a000a17 	ldw	r8,40(r17)
    4280:	003fae06 	br	413c <__alt_mem_onchip_memory2_0+0xf7c0013c>
    4284:	98c00017 	ldw	r3,0(r19)
    4288:	183fba26 	beq	r3,zero,4174 <__alt_mem_onchip_memory2_0+0xf7c00174>
    428c:	01000744 	movi	r4,29
    4290:	19000626 	beq	r3,r4,42ac <__sflush_r+0x1c8>
    4294:	01000584 	movi	r4,22
    4298:	19000426 	beq	r3,r4,42ac <__sflush_r+0x1c8>
    429c:	88c0030b 	ldhu	r3,12(r17)
    42a0:	18c01014 	ori	r3,r3,64
    42a4:	88c0030d 	sth	r3,12(r17)
    42a8:	003fc306 	br	41b8 <__alt_mem_onchip_memory2_0+0xf7c001b8>
    42ac:	8880030b 	ldhu	r2,12(r17)
    42b0:	88c00417 	ldw	r3,16(r17)
    42b4:	88000115 	stw	zero,4(r17)
    42b8:	10bdffcc 	andi	r2,r2,63487
    42bc:	8880030d 	sth	r2,12(r17)
    42c0:	88c00015 	stw	r3,0(r17)
    42c4:	003fb306 	br	4194 <__alt_mem_onchip_memory2_0+0xf7c00194>
    42c8:	98800017 	ldw	r2,0(r19)
    42cc:	103fea26 	beq	r2,zero,4278 <__alt_mem_onchip_memory2_0+0xf7c00278>
    42d0:	00c00744 	movi	r3,29
    42d4:	10c00226 	beq	r2,r3,42e0 <__sflush_r+0x1fc>
    42d8:	00c00584 	movi	r3,22
    42dc:	10c0031e 	bne	r2,r3,42ec <__sflush_r+0x208>
    42e0:	9c000015 	stw	r16,0(r19)
    42e4:	0005883a 	mov	r2,zero
    42e8:	003fb306 	br	41b8 <__alt_mem_onchip_memory2_0+0xf7c001b8>
    42ec:	88c0030b 	ldhu	r3,12(r17)
    42f0:	3005883a 	mov	r2,r6
    42f4:	18c01014 	ori	r3,r3,64
    42f8:	88c0030d 	sth	r3,12(r17)
    42fc:	003fae06 	br	41b8 <__alt_mem_onchip_memory2_0+0xf7c001b8>

00004300 <_fflush_r>:
    4300:	defffd04 	addi	sp,sp,-12
    4304:	dc000115 	stw	r16,4(sp)
    4308:	dfc00215 	stw	ra,8(sp)
    430c:	2021883a 	mov	r16,r4
    4310:	20000226 	beq	r4,zero,431c <_fflush_r+0x1c>
    4314:	20800e17 	ldw	r2,56(r4)
    4318:	10000c26 	beq	r2,zero,434c <_fflush_r+0x4c>
    431c:	2880030f 	ldh	r2,12(r5)
    4320:	1000051e 	bne	r2,zero,4338 <_fflush_r+0x38>
    4324:	0005883a 	mov	r2,zero
    4328:	dfc00217 	ldw	ra,8(sp)
    432c:	dc000117 	ldw	r16,4(sp)
    4330:	dec00304 	addi	sp,sp,12
    4334:	f800283a 	ret
    4338:	8009883a 	mov	r4,r16
    433c:	dfc00217 	ldw	ra,8(sp)
    4340:	dc000117 	ldw	r16,4(sp)
    4344:	dec00304 	addi	sp,sp,12
    4348:	00040e41 	jmpi	40e4 <__sflush_r>
    434c:	d9400015 	stw	r5,0(sp)
    4350:	00046dc0 	call	46dc <__sinit>
    4354:	d9400017 	ldw	r5,0(sp)
    4358:	003ff006 	br	431c <__alt_mem_onchip_memory2_0+0xf7c0031c>

0000435c <fflush>:
    435c:	20000526 	beq	r4,zero,4374 <fflush+0x18>
    4360:	00800034 	movhi	r2,0
    4364:	109dfd04 	addi	r2,r2,30708
    4368:	200b883a 	mov	r5,r4
    436c:	11000017 	ldw	r4,0(r2)
    4370:	00043001 	jmpi	4300 <_fflush_r>
    4374:	00800034 	movhi	r2,0
    4378:	109dfc04 	addi	r2,r2,30704
    437c:	11000017 	ldw	r4,0(r2)
    4380:	01400034 	movhi	r5,0
    4384:	2950c004 	addi	r5,r5,17152
    4388:	0004c241 	jmpi	4c24 <_fwalk_reent>

0000438c <__fp_unlock>:
    438c:	0005883a 	mov	r2,zero
    4390:	f800283a 	ret

00004394 <_cleanup_r>:
    4394:	01400034 	movhi	r5,0
    4398:	29546f04 	addi	r5,r5,20924
    439c:	0004c241 	jmpi	4c24 <_fwalk_reent>

000043a0 <__sinit.part.1>:
    43a0:	defff704 	addi	sp,sp,-36
    43a4:	00c00034 	movhi	r3,0
    43a8:	dfc00815 	stw	ra,32(sp)
    43ac:	ddc00715 	stw	r23,28(sp)
    43b0:	dd800615 	stw	r22,24(sp)
    43b4:	dd400515 	stw	r21,20(sp)
    43b8:	dd000415 	stw	r20,16(sp)
    43bc:	dcc00315 	stw	r19,12(sp)
    43c0:	dc800215 	stw	r18,8(sp)
    43c4:	dc400115 	stw	r17,4(sp)
    43c8:	dc000015 	stw	r16,0(sp)
    43cc:	18d0e504 	addi	r3,r3,17300
    43d0:	24000117 	ldw	r16,4(r4)
    43d4:	20c00f15 	stw	r3,60(r4)
    43d8:	2080bb04 	addi	r2,r4,748
    43dc:	00c000c4 	movi	r3,3
    43e0:	20c0b915 	stw	r3,740(r4)
    43e4:	2080ba15 	stw	r2,744(r4)
    43e8:	2000b815 	stw	zero,736(r4)
    43ec:	05c00204 	movi	r23,8
    43f0:	00800104 	movi	r2,4
    43f4:	2025883a 	mov	r18,r4
    43f8:	b80d883a 	mov	r6,r23
    43fc:	81001704 	addi	r4,r16,92
    4400:	000b883a 	mov	r5,zero
    4404:	80000015 	stw	zero,0(r16)
    4408:	80000115 	stw	zero,4(r16)
    440c:	80000215 	stw	zero,8(r16)
    4410:	8080030d 	sth	r2,12(r16)
    4414:	80001915 	stw	zero,100(r16)
    4418:	8000038d 	sth	zero,14(r16)
    441c:	80000415 	stw	zero,16(r16)
    4420:	80000515 	stw	zero,20(r16)
    4424:	80000615 	stw	zero,24(r16)
    4428:	0004ea40 	call	4ea4 <memset>
    442c:	05800034 	movhi	r22,0
    4430:	94400217 	ldw	r17,8(r18)
    4434:	05400034 	movhi	r21,0
    4438:	05000034 	movhi	r20,0
    443c:	04c00034 	movhi	r19,0
    4440:	b593f304 	addi	r22,r22,20428
    4444:	ad540a04 	addi	r21,r21,20520
    4448:	a5142904 	addi	r20,r20,20644
    444c:	9cd44004 	addi	r19,r19,20736
    4450:	85800815 	stw	r22,32(r16)
    4454:	85400915 	stw	r21,36(r16)
    4458:	85000a15 	stw	r20,40(r16)
    445c:	84c00b15 	stw	r19,44(r16)
    4460:	84000715 	stw	r16,28(r16)
    4464:	00800284 	movi	r2,10
    4468:	8880030d 	sth	r2,12(r17)
    446c:	00800044 	movi	r2,1
    4470:	b80d883a 	mov	r6,r23
    4474:	89001704 	addi	r4,r17,92
    4478:	000b883a 	mov	r5,zero
    447c:	88000015 	stw	zero,0(r17)
    4480:	88000115 	stw	zero,4(r17)
    4484:	88000215 	stw	zero,8(r17)
    4488:	88001915 	stw	zero,100(r17)
    448c:	8880038d 	sth	r2,14(r17)
    4490:	88000415 	stw	zero,16(r17)
    4494:	88000515 	stw	zero,20(r17)
    4498:	88000615 	stw	zero,24(r17)
    449c:	0004ea40 	call	4ea4 <memset>
    44a0:	94000317 	ldw	r16,12(r18)
    44a4:	00800484 	movi	r2,18
    44a8:	8c400715 	stw	r17,28(r17)
    44ac:	8d800815 	stw	r22,32(r17)
    44b0:	8d400915 	stw	r21,36(r17)
    44b4:	8d000a15 	stw	r20,40(r17)
    44b8:	8cc00b15 	stw	r19,44(r17)
    44bc:	8080030d 	sth	r2,12(r16)
    44c0:	00800084 	movi	r2,2
    44c4:	80000015 	stw	zero,0(r16)
    44c8:	80000115 	stw	zero,4(r16)
    44cc:	80000215 	stw	zero,8(r16)
    44d0:	80001915 	stw	zero,100(r16)
    44d4:	8080038d 	sth	r2,14(r16)
    44d8:	80000415 	stw	zero,16(r16)
    44dc:	80000515 	stw	zero,20(r16)
    44e0:	80000615 	stw	zero,24(r16)
    44e4:	b80d883a 	mov	r6,r23
    44e8:	000b883a 	mov	r5,zero
    44ec:	81001704 	addi	r4,r16,92
    44f0:	0004ea40 	call	4ea4 <memset>
    44f4:	00800044 	movi	r2,1
    44f8:	84000715 	stw	r16,28(r16)
    44fc:	85800815 	stw	r22,32(r16)
    4500:	85400915 	stw	r21,36(r16)
    4504:	85000a15 	stw	r20,40(r16)
    4508:	84c00b15 	stw	r19,44(r16)
    450c:	90800e15 	stw	r2,56(r18)
    4510:	dfc00817 	ldw	ra,32(sp)
    4514:	ddc00717 	ldw	r23,28(sp)
    4518:	dd800617 	ldw	r22,24(sp)
    451c:	dd400517 	ldw	r21,20(sp)
    4520:	dd000417 	ldw	r20,16(sp)
    4524:	dcc00317 	ldw	r19,12(sp)
    4528:	dc800217 	ldw	r18,8(sp)
    452c:	dc400117 	ldw	r17,4(sp)
    4530:	dc000017 	ldw	r16,0(sp)
    4534:	dec00904 	addi	sp,sp,36
    4538:	f800283a 	ret

0000453c <__fp_lock>:
    453c:	0005883a 	mov	r2,zero
    4540:	f800283a 	ret

00004544 <__sfmoreglue>:
    4544:	defffc04 	addi	sp,sp,-16
    4548:	dc400115 	stw	r17,4(sp)
    454c:	2c7fffc4 	addi	r17,r5,-1
    4550:	8c401a24 	muli	r17,r17,104
    4554:	dc800215 	stw	r18,8(sp)
    4558:	2825883a 	mov	r18,r5
    455c:	89401d04 	addi	r5,r17,116
    4560:	dc000015 	stw	r16,0(sp)
    4564:	dfc00315 	stw	ra,12(sp)
    4568:	0002bb00 	call	2bb0 <_malloc_r>
    456c:	1021883a 	mov	r16,r2
    4570:	10000726 	beq	r2,zero,4590 <__sfmoreglue+0x4c>
    4574:	11000304 	addi	r4,r2,12
    4578:	10000015 	stw	zero,0(r2)
    457c:	14800115 	stw	r18,4(r2)
    4580:	11000215 	stw	r4,8(r2)
    4584:	89801a04 	addi	r6,r17,104
    4588:	000b883a 	mov	r5,zero
    458c:	0004ea40 	call	4ea4 <memset>
    4590:	8005883a 	mov	r2,r16
    4594:	dfc00317 	ldw	ra,12(sp)
    4598:	dc800217 	ldw	r18,8(sp)
    459c:	dc400117 	ldw	r17,4(sp)
    45a0:	dc000017 	ldw	r16,0(sp)
    45a4:	dec00404 	addi	sp,sp,16
    45a8:	f800283a 	ret

000045ac <__sfp>:
    45ac:	defffb04 	addi	sp,sp,-20
    45b0:	dc000015 	stw	r16,0(sp)
    45b4:	04000034 	movhi	r16,0
    45b8:	841dfc04 	addi	r16,r16,30704
    45bc:	dcc00315 	stw	r19,12(sp)
    45c0:	2027883a 	mov	r19,r4
    45c4:	81000017 	ldw	r4,0(r16)
    45c8:	dfc00415 	stw	ra,16(sp)
    45cc:	dc800215 	stw	r18,8(sp)
    45d0:	20800e17 	ldw	r2,56(r4)
    45d4:	dc400115 	stw	r17,4(sp)
    45d8:	1000021e 	bne	r2,zero,45e4 <__sfp+0x38>
    45dc:	00043a00 	call	43a0 <__sinit.part.1>
    45e0:	81000017 	ldw	r4,0(r16)
    45e4:	2480b804 	addi	r18,r4,736
    45e8:	047fffc4 	movi	r17,-1
    45ec:	91000117 	ldw	r4,4(r18)
    45f0:	94000217 	ldw	r16,8(r18)
    45f4:	213fffc4 	addi	r4,r4,-1
    45f8:	20000a16 	blt	r4,zero,4624 <__sfp+0x78>
    45fc:	8080030f 	ldh	r2,12(r16)
    4600:	10000c26 	beq	r2,zero,4634 <__sfp+0x88>
    4604:	80c01d04 	addi	r3,r16,116
    4608:	00000206 	br	4614 <__sfp+0x68>
    460c:	18bfe60f 	ldh	r2,-104(r3)
    4610:	10000826 	beq	r2,zero,4634 <__sfp+0x88>
    4614:	213fffc4 	addi	r4,r4,-1
    4618:	1c3ffd04 	addi	r16,r3,-12
    461c:	18c01a04 	addi	r3,r3,104
    4620:	247ffa1e 	bne	r4,r17,460c <__alt_mem_onchip_memory2_0+0xf7c0060c>
    4624:	90800017 	ldw	r2,0(r18)
    4628:	10001d26 	beq	r2,zero,46a0 <__sfp+0xf4>
    462c:	1025883a 	mov	r18,r2
    4630:	003fee06 	br	45ec <__alt_mem_onchip_memory2_0+0xf7c005ec>
    4634:	00bfffc4 	movi	r2,-1
    4638:	8080038d 	sth	r2,14(r16)
    463c:	00800044 	movi	r2,1
    4640:	8080030d 	sth	r2,12(r16)
    4644:	80001915 	stw	zero,100(r16)
    4648:	80000015 	stw	zero,0(r16)
    464c:	80000215 	stw	zero,8(r16)
    4650:	80000115 	stw	zero,4(r16)
    4654:	80000415 	stw	zero,16(r16)
    4658:	80000515 	stw	zero,20(r16)
    465c:	80000615 	stw	zero,24(r16)
    4660:	01800204 	movi	r6,8
    4664:	000b883a 	mov	r5,zero
    4668:	81001704 	addi	r4,r16,92
    466c:	0004ea40 	call	4ea4 <memset>
    4670:	8005883a 	mov	r2,r16
    4674:	80000c15 	stw	zero,48(r16)
    4678:	80000d15 	stw	zero,52(r16)
    467c:	80001115 	stw	zero,68(r16)
    4680:	80001215 	stw	zero,72(r16)
    4684:	dfc00417 	ldw	ra,16(sp)
    4688:	dcc00317 	ldw	r19,12(sp)
    468c:	dc800217 	ldw	r18,8(sp)
    4690:	dc400117 	ldw	r17,4(sp)
    4694:	dc000017 	ldw	r16,0(sp)
    4698:	dec00504 	addi	sp,sp,20
    469c:	f800283a 	ret
    46a0:	01400104 	movi	r5,4
    46a4:	9809883a 	mov	r4,r19
    46a8:	00045440 	call	4544 <__sfmoreglue>
    46ac:	90800015 	stw	r2,0(r18)
    46b0:	103fde1e 	bne	r2,zero,462c <__alt_mem_onchip_memory2_0+0xf7c0062c>
    46b4:	00800304 	movi	r2,12
    46b8:	98800015 	stw	r2,0(r19)
    46bc:	0005883a 	mov	r2,zero
    46c0:	003ff006 	br	4684 <__alt_mem_onchip_memory2_0+0xf7c00684>

000046c4 <_cleanup>:
    46c4:	00800034 	movhi	r2,0
    46c8:	109dfc04 	addi	r2,r2,30704
    46cc:	11000017 	ldw	r4,0(r2)
    46d0:	01400034 	movhi	r5,0
    46d4:	29546f04 	addi	r5,r5,20924
    46d8:	0004c241 	jmpi	4c24 <_fwalk_reent>

000046dc <__sinit>:
    46dc:	20800e17 	ldw	r2,56(r4)
    46e0:	10000126 	beq	r2,zero,46e8 <__sinit+0xc>
    46e4:	f800283a 	ret
    46e8:	00043a01 	jmpi	43a0 <__sinit.part.1>

000046ec <__sfp_lock_acquire>:
    46ec:	f800283a 	ret

000046f0 <__sfp_lock_release>:
    46f0:	f800283a 	ret

000046f4 <__sinit_lock_acquire>:
    46f4:	f800283a 	ret

000046f8 <__sinit_lock_release>:
    46f8:	f800283a 	ret

000046fc <__fp_lock_all>:
    46fc:	00800034 	movhi	r2,0
    4700:	109dfd04 	addi	r2,r2,30708
    4704:	11000017 	ldw	r4,0(r2)
    4708:	01400034 	movhi	r5,0
    470c:	29514f04 	addi	r5,r5,17724
    4710:	0004b601 	jmpi	4b60 <_fwalk>

00004714 <__fp_unlock_all>:
    4714:	00800034 	movhi	r2,0
    4718:	109dfd04 	addi	r2,r2,30708
    471c:	11000017 	ldw	r4,0(r2)
    4720:	01400034 	movhi	r5,0
    4724:	2950e304 	addi	r5,r5,17292
    4728:	0004b601 	jmpi	4b60 <_fwalk>

0000472c <_malloc_trim_r>:
    472c:	defffb04 	addi	sp,sp,-20
    4730:	dcc00315 	stw	r19,12(sp)
    4734:	04c00034 	movhi	r19,0
    4738:	dc800215 	stw	r18,8(sp)
    473c:	dc400115 	stw	r17,4(sp)
    4740:	dc000015 	stw	r16,0(sp)
    4744:	dfc00415 	stw	ra,16(sp)
    4748:	2821883a 	mov	r16,r5
    474c:	9cdcf104 	addi	r19,r19,29636
    4750:	2025883a 	mov	r18,r4
    4754:	00058f40 	call	58f4 <__malloc_lock>
    4758:	98800217 	ldw	r2,8(r19)
    475c:	14400117 	ldw	r17,4(r2)
    4760:	00bfff04 	movi	r2,-4
    4764:	88a2703a 	and	r17,r17,r2
    4768:	8c21c83a 	sub	r16,r17,r16
    476c:	8403fbc4 	addi	r16,r16,4079
    4770:	8020d33a 	srli	r16,r16,12
    4774:	0083ffc4 	movi	r2,4095
    4778:	843fffc4 	addi	r16,r16,-1
    477c:	8020933a 	slli	r16,r16,12
    4780:	1400060e 	bge	r2,r16,479c <_malloc_trim_r+0x70>
    4784:	000b883a 	mov	r5,zero
    4788:	9009883a 	mov	r4,r18
    478c:	0003d240 	call	3d24 <_sbrk_r>
    4790:	98c00217 	ldw	r3,8(r19)
    4794:	1c47883a 	add	r3,r3,r17
    4798:	10c00a26 	beq	r2,r3,47c4 <_malloc_trim_r+0x98>
    479c:	9009883a 	mov	r4,r18
    47a0:	00059180 	call	5918 <__malloc_unlock>
    47a4:	0005883a 	mov	r2,zero
    47a8:	dfc00417 	ldw	ra,16(sp)
    47ac:	dcc00317 	ldw	r19,12(sp)
    47b0:	dc800217 	ldw	r18,8(sp)
    47b4:	dc400117 	ldw	r17,4(sp)
    47b8:	dc000017 	ldw	r16,0(sp)
    47bc:	dec00504 	addi	sp,sp,20
    47c0:	f800283a 	ret
    47c4:	040bc83a 	sub	r5,zero,r16
    47c8:	9009883a 	mov	r4,r18
    47cc:	0003d240 	call	3d24 <_sbrk_r>
    47d0:	00ffffc4 	movi	r3,-1
    47d4:	10c00d26 	beq	r2,r3,480c <_malloc_trim_r+0xe0>
    47d8:	00c00074 	movhi	r3,1
    47dc:	18e4cd04 	addi	r3,r3,-27852
    47e0:	18800017 	ldw	r2,0(r3)
    47e4:	99000217 	ldw	r4,8(r19)
    47e8:	8c23c83a 	sub	r17,r17,r16
    47ec:	8c400054 	ori	r17,r17,1
    47f0:	1421c83a 	sub	r16,r2,r16
    47f4:	24400115 	stw	r17,4(r4)
    47f8:	9009883a 	mov	r4,r18
    47fc:	1c000015 	stw	r16,0(r3)
    4800:	00059180 	call	5918 <__malloc_unlock>
    4804:	00800044 	movi	r2,1
    4808:	003fe706 	br	47a8 <__alt_mem_onchip_memory2_0+0xf7c007a8>
    480c:	000b883a 	mov	r5,zero
    4810:	9009883a 	mov	r4,r18
    4814:	0003d240 	call	3d24 <_sbrk_r>
    4818:	99000217 	ldw	r4,8(r19)
    481c:	014003c4 	movi	r5,15
    4820:	1107c83a 	sub	r3,r2,r4
    4824:	28ffdd0e 	bge	r5,r3,479c <__alt_mem_onchip_memory2_0+0xf7c0079c>
    4828:	01400034 	movhi	r5,0
    482c:	295dfe04 	addi	r5,r5,30712
    4830:	29400017 	ldw	r5,0(r5)
    4834:	18c00054 	ori	r3,r3,1
    4838:	20c00115 	stw	r3,4(r4)
    483c:	00c00074 	movhi	r3,1
    4840:	1145c83a 	sub	r2,r2,r5
    4844:	18e4cd04 	addi	r3,r3,-27852
    4848:	18800015 	stw	r2,0(r3)
    484c:	003fd306 	br	479c <__alt_mem_onchip_memory2_0+0xf7c0079c>

00004850 <_free_r>:
    4850:	28004126 	beq	r5,zero,4958 <_free_r+0x108>
    4854:	defffd04 	addi	sp,sp,-12
    4858:	dc400115 	stw	r17,4(sp)
    485c:	dc000015 	stw	r16,0(sp)
    4860:	2023883a 	mov	r17,r4
    4864:	2821883a 	mov	r16,r5
    4868:	dfc00215 	stw	ra,8(sp)
    486c:	00058f40 	call	58f4 <__malloc_lock>
    4870:	81ffff17 	ldw	r7,-4(r16)
    4874:	00bfff84 	movi	r2,-2
    4878:	01000034 	movhi	r4,0
    487c:	81bffe04 	addi	r6,r16,-8
    4880:	3884703a 	and	r2,r7,r2
    4884:	211cf104 	addi	r4,r4,29636
    4888:	308b883a 	add	r5,r6,r2
    488c:	2a400117 	ldw	r9,4(r5)
    4890:	22000217 	ldw	r8,8(r4)
    4894:	00ffff04 	movi	r3,-4
    4898:	48c6703a 	and	r3,r9,r3
    489c:	2a005726 	beq	r5,r8,49fc <_free_r+0x1ac>
    48a0:	28c00115 	stw	r3,4(r5)
    48a4:	39c0004c 	andi	r7,r7,1
    48a8:	3800091e 	bne	r7,zero,48d0 <_free_r+0x80>
    48ac:	823ffe17 	ldw	r8,-8(r16)
    48b0:	22400204 	addi	r9,r4,8
    48b4:	320dc83a 	sub	r6,r6,r8
    48b8:	31c00217 	ldw	r7,8(r6)
    48bc:	1205883a 	add	r2,r2,r8
    48c0:	3a406526 	beq	r7,r9,4a58 <_free_r+0x208>
    48c4:	32000317 	ldw	r8,12(r6)
    48c8:	3a000315 	stw	r8,12(r7)
    48cc:	41c00215 	stw	r7,8(r8)
    48d0:	28cf883a 	add	r7,r5,r3
    48d4:	39c00117 	ldw	r7,4(r7)
    48d8:	39c0004c 	andi	r7,r7,1
    48dc:	38003a26 	beq	r7,zero,49c8 <_free_r+0x178>
    48e0:	10c00054 	ori	r3,r2,1
    48e4:	30c00115 	stw	r3,4(r6)
    48e8:	3087883a 	add	r3,r6,r2
    48ec:	18800015 	stw	r2,0(r3)
    48f0:	00c07fc4 	movi	r3,511
    48f4:	18801936 	bltu	r3,r2,495c <_free_r+0x10c>
    48f8:	1004d0fa 	srli	r2,r2,3
    48fc:	01c00044 	movi	r7,1
    4900:	21400117 	ldw	r5,4(r4)
    4904:	10c00044 	addi	r3,r2,1
    4908:	18c7883a 	add	r3,r3,r3
    490c:	1005d0ba 	srai	r2,r2,2
    4910:	18c7883a 	add	r3,r3,r3
    4914:	18c7883a 	add	r3,r3,r3
    4918:	1907883a 	add	r3,r3,r4
    491c:	3884983a 	sll	r2,r7,r2
    4920:	19c00017 	ldw	r7,0(r3)
    4924:	1a3ffe04 	addi	r8,r3,-8
    4928:	1144b03a 	or	r2,r2,r5
    492c:	32000315 	stw	r8,12(r6)
    4930:	31c00215 	stw	r7,8(r6)
    4934:	20800115 	stw	r2,4(r4)
    4938:	19800015 	stw	r6,0(r3)
    493c:	39800315 	stw	r6,12(r7)
    4940:	8809883a 	mov	r4,r17
    4944:	dfc00217 	ldw	ra,8(sp)
    4948:	dc400117 	ldw	r17,4(sp)
    494c:	dc000017 	ldw	r16,0(sp)
    4950:	dec00304 	addi	sp,sp,12
    4954:	00059181 	jmpi	5918 <__malloc_unlock>
    4958:	f800283a 	ret
    495c:	100ad27a 	srli	r5,r2,9
    4960:	00c00104 	movi	r3,4
    4964:	19404a36 	bltu	r3,r5,4a90 <_free_r+0x240>
    4968:	100ad1ba 	srli	r5,r2,6
    496c:	28c00e44 	addi	r3,r5,57
    4970:	18c7883a 	add	r3,r3,r3
    4974:	29400e04 	addi	r5,r5,56
    4978:	18c7883a 	add	r3,r3,r3
    497c:	18c7883a 	add	r3,r3,r3
    4980:	1909883a 	add	r4,r3,r4
    4984:	20c00017 	ldw	r3,0(r4)
    4988:	01c00034 	movhi	r7,0
    498c:	213ffe04 	addi	r4,r4,-8
    4990:	39dcf104 	addi	r7,r7,29636
    4994:	20c04426 	beq	r4,r3,4aa8 <_free_r+0x258>
    4998:	01ffff04 	movi	r7,-4
    499c:	19400117 	ldw	r5,4(r3)
    49a0:	29ca703a 	and	r5,r5,r7
    49a4:	1140022e 	bgeu	r2,r5,49b0 <_free_r+0x160>
    49a8:	18c00217 	ldw	r3,8(r3)
    49ac:	20fffb1e 	bne	r4,r3,499c <__alt_mem_onchip_memory2_0+0xf7c0099c>
    49b0:	19000317 	ldw	r4,12(r3)
    49b4:	31000315 	stw	r4,12(r6)
    49b8:	30c00215 	stw	r3,8(r6)
    49bc:	21800215 	stw	r6,8(r4)
    49c0:	19800315 	stw	r6,12(r3)
    49c4:	003fde06 	br	4940 <__alt_mem_onchip_memory2_0+0xf7c00940>
    49c8:	29c00217 	ldw	r7,8(r5)
    49cc:	10c5883a 	add	r2,r2,r3
    49d0:	00c00034 	movhi	r3,0
    49d4:	18dcf304 	addi	r3,r3,29644
    49d8:	38c03b26 	beq	r7,r3,4ac8 <_free_r+0x278>
    49dc:	2a000317 	ldw	r8,12(r5)
    49e0:	11400054 	ori	r5,r2,1
    49e4:	3087883a 	add	r3,r6,r2
    49e8:	3a000315 	stw	r8,12(r7)
    49ec:	41c00215 	stw	r7,8(r8)
    49f0:	31400115 	stw	r5,4(r6)
    49f4:	18800015 	stw	r2,0(r3)
    49f8:	003fbd06 	br	48f0 <__alt_mem_onchip_memory2_0+0xf7c008f0>
    49fc:	39c0004c 	andi	r7,r7,1
    4a00:	10c5883a 	add	r2,r2,r3
    4a04:	3800071e 	bne	r7,zero,4a24 <_free_r+0x1d4>
    4a08:	81fffe17 	ldw	r7,-8(r16)
    4a0c:	31cdc83a 	sub	r6,r6,r7
    4a10:	30c00317 	ldw	r3,12(r6)
    4a14:	31400217 	ldw	r5,8(r6)
    4a18:	11c5883a 	add	r2,r2,r7
    4a1c:	28c00315 	stw	r3,12(r5)
    4a20:	19400215 	stw	r5,8(r3)
    4a24:	10c00054 	ori	r3,r2,1
    4a28:	30c00115 	stw	r3,4(r6)
    4a2c:	00c00034 	movhi	r3,0
    4a30:	18ddff04 	addi	r3,r3,30716
    4a34:	18c00017 	ldw	r3,0(r3)
    4a38:	21800215 	stw	r6,8(r4)
    4a3c:	10ffc036 	bltu	r2,r3,4940 <__alt_mem_onchip_memory2_0+0xf7c00940>
    4a40:	00800074 	movhi	r2,1
    4a44:	10a4cc04 	addi	r2,r2,-27856
    4a48:	11400017 	ldw	r5,0(r2)
    4a4c:	8809883a 	mov	r4,r17
    4a50:	000472c0 	call	472c <_malloc_trim_r>
    4a54:	003fba06 	br	4940 <__alt_mem_onchip_memory2_0+0xf7c00940>
    4a58:	28c9883a 	add	r4,r5,r3
    4a5c:	21000117 	ldw	r4,4(r4)
    4a60:	2100004c 	andi	r4,r4,1
    4a64:	2000391e 	bne	r4,zero,4b4c <_free_r+0x2fc>
    4a68:	29c00217 	ldw	r7,8(r5)
    4a6c:	29000317 	ldw	r4,12(r5)
    4a70:	1885883a 	add	r2,r3,r2
    4a74:	10c00054 	ori	r3,r2,1
    4a78:	39000315 	stw	r4,12(r7)
    4a7c:	21c00215 	stw	r7,8(r4)
    4a80:	30c00115 	stw	r3,4(r6)
    4a84:	308d883a 	add	r6,r6,r2
    4a88:	30800015 	stw	r2,0(r6)
    4a8c:	003fac06 	br	4940 <__alt_mem_onchip_memory2_0+0xf7c00940>
    4a90:	00c00504 	movi	r3,20
    4a94:	19401536 	bltu	r3,r5,4aec <_free_r+0x29c>
    4a98:	28c01704 	addi	r3,r5,92
    4a9c:	18c7883a 	add	r3,r3,r3
    4aa0:	294016c4 	addi	r5,r5,91
    4aa4:	003fb406 	br	4978 <__alt_mem_onchip_memory2_0+0xf7c00978>
    4aa8:	280bd0ba 	srai	r5,r5,2
    4aac:	00c00044 	movi	r3,1
    4ab0:	38800117 	ldw	r2,4(r7)
    4ab4:	194a983a 	sll	r5,r3,r5
    4ab8:	2007883a 	mov	r3,r4
    4abc:	2884b03a 	or	r2,r5,r2
    4ac0:	38800115 	stw	r2,4(r7)
    4ac4:	003fbb06 	br	49b4 <__alt_mem_onchip_memory2_0+0xf7c009b4>
    4ac8:	21800515 	stw	r6,20(r4)
    4acc:	21800415 	stw	r6,16(r4)
    4ad0:	10c00054 	ori	r3,r2,1
    4ad4:	31c00315 	stw	r7,12(r6)
    4ad8:	31c00215 	stw	r7,8(r6)
    4adc:	30c00115 	stw	r3,4(r6)
    4ae0:	308d883a 	add	r6,r6,r2
    4ae4:	30800015 	stw	r2,0(r6)
    4ae8:	003f9506 	br	4940 <__alt_mem_onchip_memory2_0+0xf7c00940>
    4aec:	00c01504 	movi	r3,84
    4af0:	19400536 	bltu	r3,r5,4b08 <_free_r+0x2b8>
    4af4:	100ad33a 	srli	r5,r2,12
    4af8:	28c01bc4 	addi	r3,r5,111
    4afc:	18c7883a 	add	r3,r3,r3
    4b00:	29401b84 	addi	r5,r5,110
    4b04:	003f9c06 	br	4978 <__alt_mem_onchip_memory2_0+0xf7c00978>
    4b08:	00c05504 	movi	r3,340
    4b0c:	19400536 	bltu	r3,r5,4b24 <_free_r+0x2d4>
    4b10:	100ad3fa 	srli	r5,r2,15
    4b14:	28c01e04 	addi	r3,r5,120
    4b18:	18c7883a 	add	r3,r3,r3
    4b1c:	29401dc4 	addi	r5,r5,119
    4b20:	003f9506 	br	4978 <__alt_mem_onchip_memory2_0+0xf7c00978>
    4b24:	00c15504 	movi	r3,1364
    4b28:	19400536 	bltu	r3,r5,4b40 <_free_r+0x2f0>
    4b2c:	100ad4ba 	srli	r5,r2,18
    4b30:	28c01f44 	addi	r3,r5,125
    4b34:	18c7883a 	add	r3,r3,r3
    4b38:	29401f04 	addi	r5,r5,124
    4b3c:	003f8e06 	br	4978 <__alt_mem_onchip_memory2_0+0xf7c00978>
    4b40:	00c03f84 	movi	r3,254
    4b44:	01401f84 	movi	r5,126
    4b48:	003f8b06 	br	4978 <__alt_mem_onchip_memory2_0+0xf7c00978>
    4b4c:	10c00054 	ori	r3,r2,1
    4b50:	30c00115 	stw	r3,4(r6)
    4b54:	308d883a 	add	r6,r6,r2
    4b58:	30800015 	stw	r2,0(r6)
    4b5c:	003f7806 	br	4940 <__alt_mem_onchip_memory2_0+0xf7c00940>

00004b60 <_fwalk>:
    4b60:	defff704 	addi	sp,sp,-36
    4b64:	dd000415 	stw	r20,16(sp)
    4b68:	dfc00815 	stw	ra,32(sp)
    4b6c:	ddc00715 	stw	r23,28(sp)
    4b70:	dd800615 	stw	r22,24(sp)
    4b74:	dd400515 	stw	r21,20(sp)
    4b78:	dcc00315 	stw	r19,12(sp)
    4b7c:	dc800215 	stw	r18,8(sp)
    4b80:	dc400115 	stw	r17,4(sp)
    4b84:	dc000015 	stw	r16,0(sp)
    4b88:	2500b804 	addi	r20,r4,736
    4b8c:	a0002326 	beq	r20,zero,4c1c <_fwalk+0xbc>
    4b90:	282b883a 	mov	r21,r5
    4b94:	002f883a 	mov	r23,zero
    4b98:	05800044 	movi	r22,1
    4b9c:	04ffffc4 	movi	r19,-1
    4ba0:	a4400117 	ldw	r17,4(r20)
    4ba4:	a4800217 	ldw	r18,8(r20)
    4ba8:	8c7fffc4 	addi	r17,r17,-1
    4bac:	88000d16 	blt	r17,zero,4be4 <_fwalk+0x84>
    4bb0:	94000304 	addi	r16,r18,12
    4bb4:	94800384 	addi	r18,r18,14
    4bb8:	8080000b 	ldhu	r2,0(r16)
    4bbc:	8c7fffc4 	addi	r17,r17,-1
    4bc0:	813ffd04 	addi	r4,r16,-12
    4bc4:	b080042e 	bgeu	r22,r2,4bd8 <_fwalk+0x78>
    4bc8:	9080000f 	ldh	r2,0(r18)
    4bcc:	14c00226 	beq	r2,r19,4bd8 <_fwalk+0x78>
    4bd0:	a83ee83a 	callr	r21
    4bd4:	b8aeb03a 	or	r23,r23,r2
    4bd8:	84001a04 	addi	r16,r16,104
    4bdc:	94801a04 	addi	r18,r18,104
    4be0:	8cfff51e 	bne	r17,r19,4bb8 <__alt_mem_onchip_memory2_0+0xf7c00bb8>
    4be4:	a5000017 	ldw	r20,0(r20)
    4be8:	a03fed1e 	bne	r20,zero,4ba0 <__alt_mem_onchip_memory2_0+0xf7c00ba0>
    4bec:	b805883a 	mov	r2,r23
    4bf0:	dfc00817 	ldw	ra,32(sp)
    4bf4:	ddc00717 	ldw	r23,28(sp)
    4bf8:	dd800617 	ldw	r22,24(sp)
    4bfc:	dd400517 	ldw	r21,20(sp)
    4c00:	dd000417 	ldw	r20,16(sp)
    4c04:	dcc00317 	ldw	r19,12(sp)
    4c08:	dc800217 	ldw	r18,8(sp)
    4c0c:	dc400117 	ldw	r17,4(sp)
    4c10:	dc000017 	ldw	r16,0(sp)
    4c14:	dec00904 	addi	sp,sp,36
    4c18:	f800283a 	ret
    4c1c:	002f883a 	mov	r23,zero
    4c20:	003ff206 	br	4bec <__alt_mem_onchip_memory2_0+0xf7c00bec>

00004c24 <_fwalk_reent>:
    4c24:	defff704 	addi	sp,sp,-36
    4c28:	dd000415 	stw	r20,16(sp)
    4c2c:	dfc00815 	stw	ra,32(sp)
    4c30:	ddc00715 	stw	r23,28(sp)
    4c34:	dd800615 	stw	r22,24(sp)
    4c38:	dd400515 	stw	r21,20(sp)
    4c3c:	dcc00315 	stw	r19,12(sp)
    4c40:	dc800215 	stw	r18,8(sp)
    4c44:	dc400115 	stw	r17,4(sp)
    4c48:	dc000015 	stw	r16,0(sp)
    4c4c:	2500b804 	addi	r20,r4,736
    4c50:	a0002326 	beq	r20,zero,4ce0 <_fwalk_reent+0xbc>
    4c54:	282b883a 	mov	r21,r5
    4c58:	2027883a 	mov	r19,r4
    4c5c:	002f883a 	mov	r23,zero
    4c60:	05800044 	movi	r22,1
    4c64:	04bfffc4 	movi	r18,-1
    4c68:	a4400117 	ldw	r17,4(r20)
    4c6c:	a4000217 	ldw	r16,8(r20)
    4c70:	8c7fffc4 	addi	r17,r17,-1
    4c74:	88000c16 	blt	r17,zero,4ca8 <_fwalk_reent+0x84>
    4c78:	84000304 	addi	r16,r16,12
    4c7c:	8080000b 	ldhu	r2,0(r16)
    4c80:	8c7fffc4 	addi	r17,r17,-1
    4c84:	817ffd04 	addi	r5,r16,-12
    4c88:	b080052e 	bgeu	r22,r2,4ca0 <_fwalk_reent+0x7c>
    4c8c:	8080008f 	ldh	r2,2(r16)
    4c90:	9809883a 	mov	r4,r19
    4c94:	14800226 	beq	r2,r18,4ca0 <_fwalk_reent+0x7c>
    4c98:	a83ee83a 	callr	r21
    4c9c:	b8aeb03a 	or	r23,r23,r2
    4ca0:	84001a04 	addi	r16,r16,104
    4ca4:	8cbff51e 	bne	r17,r18,4c7c <__alt_mem_onchip_memory2_0+0xf7c00c7c>
    4ca8:	a5000017 	ldw	r20,0(r20)
    4cac:	a03fee1e 	bne	r20,zero,4c68 <__alt_mem_onchip_memory2_0+0xf7c00c68>
    4cb0:	b805883a 	mov	r2,r23
    4cb4:	dfc00817 	ldw	ra,32(sp)
    4cb8:	ddc00717 	ldw	r23,28(sp)
    4cbc:	dd800617 	ldw	r22,24(sp)
    4cc0:	dd400517 	ldw	r21,20(sp)
    4cc4:	dd000417 	ldw	r20,16(sp)
    4cc8:	dcc00317 	ldw	r19,12(sp)
    4ccc:	dc800217 	ldw	r18,8(sp)
    4cd0:	dc400117 	ldw	r17,4(sp)
    4cd4:	dc000017 	ldw	r16,0(sp)
    4cd8:	dec00904 	addi	sp,sp,36
    4cdc:	f800283a 	ret
    4ce0:	002f883a 	mov	r23,zero
    4ce4:	003ff206 	br	4cb0 <__alt_mem_onchip_memory2_0+0xf7c00cb0>

00004ce8 <__smakebuf_r>:
    4ce8:	2880030b 	ldhu	r2,12(r5)
    4cec:	10c0008c 	andi	r3,r2,2
    4cf0:	1800411e 	bne	r3,zero,4df8 <__smakebuf_r+0x110>
    4cf4:	deffec04 	addi	sp,sp,-80
    4cf8:	dc000f15 	stw	r16,60(sp)
    4cfc:	2821883a 	mov	r16,r5
    4d00:	2940038f 	ldh	r5,14(r5)
    4d04:	dc401015 	stw	r17,64(sp)
    4d08:	dfc01315 	stw	ra,76(sp)
    4d0c:	dcc01215 	stw	r19,72(sp)
    4d10:	dc801115 	stw	r18,68(sp)
    4d14:	2023883a 	mov	r17,r4
    4d18:	28001c16 	blt	r5,zero,4d8c <__smakebuf_r+0xa4>
    4d1c:	d80d883a 	mov	r6,sp
    4d20:	00052c00 	call	52c0 <_fstat_r>
    4d24:	10001816 	blt	r2,zero,4d88 <__smakebuf_r+0xa0>
    4d28:	d8800117 	ldw	r2,4(sp)
    4d2c:	00e00014 	movui	r3,32768
    4d30:	10bc000c 	andi	r2,r2,61440
    4d34:	14c80020 	cmpeqi	r19,r2,8192
    4d38:	10c03726 	beq	r2,r3,4e18 <__smakebuf_r+0x130>
    4d3c:	80c0030b 	ldhu	r3,12(r16)
    4d40:	18c20014 	ori	r3,r3,2048
    4d44:	80c0030d 	sth	r3,12(r16)
    4d48:	00c80004 	movi	r3,8192
    4d4c:	10c0521e 	bne	r2,r3,4e98 <__smakebuf_r+0x1b0>
    4d50:	8140038f 	ldh	r5,14(r16)
    4d54:	8809883a 	mov	r4,r17
    4d58:	000531c0 	call	531c <_isatty_r>
    4d5c:	10004c26 	beq	r2,zero,4e90 <__smakebuf_r+0x1a8>
    4d60:	8080030b 	ldhu	r2,12(r16)
    4d64:	80c010c4 	addi	r3,r16,67
    4d68:	80c00015 	stw	r3,0(r16)
    4d6c:	10800054 	ori	r2,r2,1
    4d70:	8080030d 	sth	r2,12(r16)
    4d74:	00800044 	movi	r2,1
    4d78:	80c00415 	stw	r3,16(r16)
    4d7c:	80800515 	stw	r2,20(r16)
    4d80:	04810004 	movi	r18,1024
    4d84:	00000706 	br	4da4 <__smakebuf_r+0xbc>
    4d88:	8080030b 	ldhu	r2,12(r16)
    4d8c:	10c0200c 	andi	r3,r2,128
    4d90:	18001f1e 	bne	r3,zero,4e10 <__smakebuf_r+0x128>
    4d94:	04810004 	movi	r18,1024
    4d98:	10820014 	ori	r2,r2,2048
    4d9c:	8080030d 	sth	r2,12(r16)
    4da0:	0027883a 	mov	r19,zero
    4da4:	900b883a 	mov	r5,r18
    4da8:	8809883a 	mov	r4,r17
    4dac:	0002bb00 	call	2bb0 <_malloc_r>
    4db0:	10002c26 	beq	r2,zero,4e64 <__smakebuf_r+0x17c>
    4db4:	80c0030b 	ldhu	r3,12(r16)
    4db8:	01000034 	movhi	r4,0
    4dbc:	2110e504 	addi	r4,r4,17300
    4dc0:	89000f15 	stw	r4,60(r17)
    4dc4:	18c02014 	ori	r3,r3,128
    4dc8:	80c0030d 	sth	r3,12(r16)
    4dcc:	80800015 	stw	r2,0(r16)
    4dd0:	80800415 	stw	r2,16(r16)
    4dd4:	84800515 	stw	r18,20(r16)
    4dd8:	98001a1e 	bne	r19,zero,4e44 <__smakebuf_r+0x15c>
    4ddc:	dfc01317 	ldw	ra,76(sp)
    4de0:	dcc01217 	ldw	r19,72(sp)
    4de4:	dc801117 	ldw	r18,68(sp)
    4de8:	dc401017 	ldw	r17,64(sp)
    4dec:	dc000f17 	ldw	r16,60(sp)
    4df0:	dec01404 	addi	sp,sp,80
    4df4:	f800283a 	ret
    4df8:	288010c4 	addi	r2,r5,67
    4dfc:	28800015 	stw	r2,0(r5)
    4e00:	28800415 	stw	r2,16(r5)
    4e04:	00800044 	movi	r2,1
    4e08:	28800515 	stw	r2,20(r5)
    4e0c:	f800283a 	ret
    4e10:	04801004 	movi	r18,64
    4e14:	003fe006 	br	4d98 <__alt_mem_onchip_memory2_0+0xf7c00d98>
    4e18:	81000a17 	ldw	r4,40(r16)
    4e1c:	00c00034 	movhi	r3,0
    4e20:	18d42904 	addi	r3,r3,20644
    4e24:	20ffc51e 	bne	r4,r3,4d3c <__alt_mem_onchip_memory2_0+0xf7c00d3c>
    4e28:	8080030b 	ldhu	r2,12(r16)
    4e2c:	04810004 	movi	r18,1024
    4e30:	84801315 	stw	r18,76(r16)
    4e34:	1484b03a 	or	r2,r2,r18
    4e38:	8080030d 	sth	r2,12(r16)
    4e3c:	0027883a 	mov	r19,zero
    4e40:	003fd806 	br	4da4 <__alt_mem_onchip_memory2_0+0xf7c00da4>
    4e44:	8140038f 	ldh	r5,14(r16)
    4e48:	8809883a 	mov	r4,r17
    4e4c:	000531c0 	call	531c <_isatty_r>
    4e50:	103fe226 	beq	r2,zero,4ddc <__alt_mem_onchip_memory2_0+0xf7c00ddc>
    4e54:	8080030b 	ldhu	r2,12(r16)
    4e58:	10800054 	ori	r2,r2,1
    4e5c:	8080030d 	sth	r2,12(r16)
    4e60:	003fde06 	br	4ddc <__alt_mem_onchip_memory2_0+0xf7c00ddc>
    4e64:	8080030b 	ldhu	r2,12(r16)
    4e68:	10c0800c 	andi	r3,r2,512
    4e6c:	183fdb1e 	bne	r3,zero,4ddc <__alt_mem_onchip_memory2_0+0xf7c00ddc>
    4e70:	10800094 	ori	r2,r2,2
    4e74:	80c010c4 	addi	r3,r16,67
    4e78:	8080030d 	sth	r2,12(r16)
    4e7c:	00800044 	movi	r2,1
    4e80:	80c00015 	stw	r3,0(r16)
    4e84:	80c00415 	stw	r3,16(r16)
    4e88:	80800515 	stw	r2,20(r16)
    4e8c:	003fd306 	br	4ddc <__alt_mem_onchip_memory2_0+0xf7c00ddc>
    4e90:	04810004 	movi	r18,1024
    4e94:	003fc306 	br	4da4 <__alt_mem_onchip_memory2_0+0xf7c00da4>
    4e98:	0027883a 	mov	r19,zero
    4e9c:	04810004 	movi	r18,1024
    4ea0:	003fc006 	br	4da4 <__alt_mem_onchip_memory2_0+0xf7c00da4>

00004ea4 <memset>:
    4ea4:	20c000cc 	andi	r3,r4,3
    4ea8:	2005883a 	mov	r2,r4
    4eac:	18004426 	beq	r3,zero,4fc0 <memset+0x11c>
    4eb0:	31ffffc4 	addi	r7,r6,-1
    4eb4:	30004026 	beq	r6,zero,4fb8 <memset+0x114>
    4eb8:	2813883a 	mov	r9,r5
    4ebc:	200d883a 	mov	r6,r4
    4ec0:	2007883a 	mov	r3,r4
    4ec4:	00000406 	br	4ed8 <memset+0x34>
    4ec8:	3a3fffc4 	addi	r8,r7,-1
    4ecc:	31800044 	addi	r6,r6,1
    4ed0:	38003926 	beq	r7,zero,4fb8 <memset+0x114>
    4ed4:	400f883a 	mov	r7,r8
    4ed8:	18c00044 	addi	r3,r3,1
    4edc:	32400005 	stb	r9,0(r6)
    4ee0:	1a0000cc 	andi	r8,r3,3
    4ee4:	403ff81e 	bne	r8,zero,4ec8 <__alt_mem_onchip_memory2_0+0xf7c00ec8>
    4ee8:	010000c4 	movi	r4,3
    4eec:	21c02d2e 	bgeu	r4,r7,4fa4 <memset+0x100>
    4ef0:	29003fcc 	andi	r4,r5,255
    4ef4:	200c923a 	slli	r6,r4,8
    4ef8:	3108b03a 	or	r4,r6,r4
    4efc:	200c943a 	slli	r6,r4,16
    4f00:	218cb03a 	or	r6,r4,r6
    4f04:	010003c4 	movi	r4,15
    4f08:	21c0182e 	bgeu	r4,r7,4f6c <memset+0xc8>
    4f0c:	3b3ffc04 	addi	r12,r7,-16
    4f10:	6018d13a 	srli	r12,r12,4
    4f14:	1a000104 	addi	r8,r3,4
    4f18:	1ac00204 	addi	r11,r3,8
    4f1c:	6008913a 	slli	r4,r12,4
    4f20:	1a800304 	addi	r10,r3,12
    4f24:	1813883a 	mov	r9,r3
    4f28:	21000504 	addi	r4,r4,20
    4f2c:	1909883a 	add	r4,r3,r4
    4f30:	49800015 	stw	r6,0(r9)
    4f34:	41800015 	stw	r6,0(r8)
    4f38:	59800015 	stw	r6,0(r11)
    4f3c:	51800015 	stw	r6,0(r10)
    4f40:	42000404 	addi	r8,r8,16
    4f44:	4a400404 	addi	r9,r9,16
    4f48:	5ac00404 	addi	r11,r11,16
    4f4c:	52800404 	addi	r10,r10,16
    4f50:	413ff71e 	bne	r8,r4,4f30 <__alt_mem_onchip_memory2_0+0xf7c00f30>
    4f54:	63000044 	addi	r12,r12,1
    4f58:	6018913a 	slli	r12,r12,4
    4f5c:	39c003cc 	andi	r7,r7,15
    4f60:	010000c4 	movi	r4,3
    4f64:	1b07883a 	add	r3,r3,r12
    4f68:	21c00e2e 	bgeu	r4,r7,4fa4 <memset+0x100>
    4f6c:	1813883a 	mov	r9,r3
    4f70:	3811883a 	mov	r8,r7
    4f74:	010000c4 	movi	r4,3
    4f78:	49800015 	stw	r6,0(r9)
    4f7c:	423fff04 	addi	r8,r8,-4
    4f80:	4a400104 	addi	r9,r9,4
    4f84:	223ffc36 	bltu	r4,r8,4f78 <__alt_mem_onchip_memory2_0+0xf7c00f78>
    4f88:	393fff04 	addi	r4,r7,-4
    4f8c:	2008d0ba 	srli	r4,r4,2
    4f90:	39c000cc 	andi	r7,r7,3
    4f94:	21000044 	addi	r4,r4,1
    4f98:	2109883a 	add	r4,r4,r4
    4f9c:	2109883a 	add	r4,r4,r4
    4fa0:	1907883a 	add	r3,r3,r4
    4fa4:	38000526 	beq	r7,zero,4fbc <memset+0x118>
    4fa8:	19cf883a 	add	r7,r3,r7
    4fac:	19400005 	stb	r5,0(r3)
    4fb0:	18c00044 	addi	r3,r3,1
    4fb4:	38fffd1e 	bne	r7,r3,4fac <__alt_mem_onchip_memory2_0+0xf7c00fac>
    4fb8:	f800283a 	ret
    4fbc:	f800283a 	ret
    4fc0:	2007883a 	mov	r3,r4
    4fc4:	300f883a 	mov	r7,r6
    4fc8:	003fc706 	br	4ee8 <__alt_mem_onchip_memory2_0+0xf7c00ee8>

00004fcc <__sread>:
    4fcc:	defffe04 	addi	sp,sp,-8
    4fd0:	dc000015 	stw	r16,0(sp)
    4fd4:	2821883a 	mov	r16,r5
    4fd8:	2940038f 	ldh	r5,14(r5)
    4fdc:	dfc00115 	stw	ra,4(sp)
    4fe0:	00053d00 	call	53d0 <_read_r>
    4fe4:	10000716 	blt	r2,zero,5004 <__sread+0x38>
    4fe8:	80c01417 	ldw	r3,80(r16)
    4fec:	1887883a 	add	r3,r3,r2
    4ff0:	80c01415 	stw	r3,80(r16)
    4ff4:	dfc00117 	ldw	ra,4(sp)
    4ff8:	dc000017 	ldw	r16,0(sp)
    4ffc:	dec00204 	addi	sp,sp,8
    5000:	f800283a 	ret
    5004:	80c0030b 	ldhu	r3,12(r16)
    5008:	18fbffcc 	andi	r3,r3,61439
    500c:	80c0030d 	sth	r3,12(r16)
    5010:	dfc00117 	ldw	ra,4(sp)
    5014:	dc000017 	ldw	r16,0(sp)
    5018:	dec00204 	addi	sp,sp,8
    501c:	f800283a 	ret

00005020 <__seofread>:
    5020:	0005883a 	mov	r2,zero
    5024:	f800283a 	ret

00005028 <__swrite>:
    5028:	2880030b 	ldhu	r2,12(r5)
    502c:	defffb04 	addi	sp,sp,-20
    5030:	dcc00315 	stw	r19,12(sp)
    5034:	dc800215 	stw	r18,8(sp)
    5038:	dc400115 	stw	r17,4(sp)
    503c:	dc000015 	stw	r16,0(sp)
    5040:	dfc00415 	stw	ra,16(sp)
    5044:	10c0400c 	andi	r3,r2,256
    5048:	2821883a 	mov	r16,r5
    504c:	2023883a 	mov	r17,r4
    5050:	3025883a 	mov	r18,r6
    5054:	3827883a 	mov	r19,r7
    5058:	18000526 	beq	r3,zero,5070 <__swrite+0x48>
    505c:	2940038f 	ldh	r5,14(r5)
    5060:	01c00084 	movi	r7,2
    5064:	000d883a 	mov	r6,zero
    5068:	00053700 	call	5370 <_lseek_r>
    506c:	8080030b 	ldhu	r2,12(r16)
    5070:	8140038f 	ldh	r5,14(r16)
    5074:	10bbffcc 	andi	r2,r2,61439
    5078:	980f883a 	mov	r7,r19
    507c:	900d883a 	mov	r6,r18
    5080:	8809883a 	mov	r4,r17
    5084:	8080030d 	sth	r2,12(r16)
    5088:	dfc00417 	ldw	ra,16(sp)
    508c:	dcc00317 	ldw	r19,12(sp)
    5090:	dc800217 	ldw	r18,8(sp)
    5094:	dc400117 	ldw	r17,4(sp)
    5098:	dc000017 	ldw	r16,0(sp)
    509c:	dec00504 	addi	sp,sp,20
    50a0:	00051081 	jmpi	5108 <_write_r>

000050a4 <__sseek>:
    50a4:	defffe04 	addi	sp,sp,-8
    50a8:	dc000015 	stw	r16,0(sp)
    50ac:	2821883a 	mov	r16,r5
    50b0:	2940038f 	ldh	r5,14(r5)
    50b4:	dfc00115 	stw	ra,4(sp)
    50b8:	00053700 	call	5370 <_lseek_r>
    50bc:	00ffffc4 	movi	r3,-1
    50c0:	10c00826 	beq	r2,r3,50e4 <__sseek+0x40>
    50c4:	80c0030b 	ldhu	r3,12(r16)
    50c8:	80801415 	stw	r2,80(r16)
    50cc:	18c40014 	ori	r3,r3,4096
    50d0:	80c0030d 	sth	r3,12(r16)
    50d4:	dfc00117 	ldw	ra,4(sp)
    50d8:	dc000017 	ldw	r16,0(sp)
    50dc:	dec00204 	addi	sp,sp,8
    50e0:	f800283a 	ret
    50e4:	80c0030b 	ldhu	r3,12(r16)
    50e8:	18fbffcc 	andi	r3,r3,61439
    50ec:	80c0030d 	sth	r3,12(r16)
    50f0:	dfc00117 	ldw	ra,4(sp)
    50f4:	dc000017 	ldw	r16,0(sp)
    50f8:	dec00204 	addi	sp,sp,8
    50fc:	f800283a 	ret

00005100 <__sclose>:
    5100:	2940038f 	ldh	r5,14(r5)
    5104:	00051681 	jmpi	5168 <_close_r>

00005108 <_write_r>:
    5108:	defffd04 	addi	sp,sp,-12
    510c:	2805883a 	mov	r2,r5
    5110:	dc000015 	stw	r16,0(sp)
    5114:	04000074 	movhi	r16,1
    5118:	dc400115 	stw	r17,4(sp)
    511c:	300b883a 	mov	r5,r6
    5120:	8424c904 	addi	r16,r16,-27868
    5124:	2023883a 	mov	r17,r4
    5128:	380d883a 	mov	r6,r7
    512c:	1009883a 	mov	r4,r2
    5130:	dfc00215 	stw	ra,8(sp)
    5134:	80000015 	stw	zero,0(r16)
    5138:	0005b600 	call	5b60 <write>
    513c:	00ffffc4 	movi	r3,-1
    5140:	10c00526 	beq	r2,r3,5158 <_write_r+0x50>
    5144:	dfc00217 	ldw	ra,8(sp)
    5148:	dc400117 	ldw	r17,4(sp)
    514c:	dc000017 	ldw	r16,0(sp)
    5150:	dec00304 	addi	sp,sp,12
    5154:	f800283a 	ret
    5158:	80c00017 	ldw	r3,0(r16)
    515c:	183ff926 	beq	r3,zero,5144 <__alt_mem_onchip_memory2_0+0xf7c01144>
    5160:	88c00015 	stw	r3,0(r17)
    5164:	003ff706 	br	5144 <__alt_mem_onchip_memory2_0+0xf7c01144>

00005168 <_close_r>:
    5168:	defffd04 	addi	sp,sp,-12
    516c:	dc000015 	stw	r16,0(sp)
    5170:	04000074 	movhi	r16,1
    5174:	dc400115 	stw	r17,4(sp)
    5178:	8424c904 	addi	r16,r16,-27868
    517c:	2023883a 	mov	r17,r4
    5180:	2809883a 	mov	r4,r5
    5184:	dfc00215 	stw	ra,8(sp)
    5188:	80000015 	stw	zero,0(r16)
    518c:	00019080 	call	1908 <close>
    5190:	00ffffc4 	movi	r3,-1
    5194:	10c00526 	beq	r2,r3,51ac <_close_r+0x44>
    5198:	dfc00217 	ldw	ra,8(sp)
    519c:	dc400117 	ldw	r17,4(sp)
    51a0:	dc000017 	ldw	r16,0(sp)
    51a4:	dec00304 	addi	sp,sp,12
    51a8:	f800283a 	ret
    51ac:	80c00017 	ldw	r3,0(r16)
    51b0:	183ff926 	beq	r3,zero,5198 <__alt_mem_onchip_memory2_0+0xf7c01198>
    51b4:	88c00015 	stw	r3,0(r17)
    51b8:	003ff706 	br	5198 <__alt_mem_onchip_memory2_0+0xf7c01198>

000051bc <_fclose_r>:
    51bc:	28003926 	beq	r5,zero,52a4 <_fclose_r+0xe8>
    51c0:	defffc04 	addi	sp,sp,-16
    51c4:	dc400115 	stw	r17,4(sp)
    51c8:	dc000015 	stw	r16,0(sp)
    51cc:	dfc00315 	stw	ra,12(sp)
    51d0:	dc800215 	stw	r18,8(sp)
    51d4:	2023883a 	mov	r17,r4
    51d8:	2821883a 	mov	r16,r5
    51dc:	20000226 	beq	r4,zero,51e8 <_fclose_r+0x2c>
    51e0:	20800e17 	ldw	r2,56(r4)
    51e4:	10002726 	beq	r2,zero,5284 <_fclose_r+0xc8>
    51e8:	8080030f 	ldh	r2,12(r16)
    51ec:	1000071e 	bne	r2,zero,520c <_fclose_r+0x50>
    51f0:	0005883a 	mov	r2,zero
    51f4:	dfc00317 	ldw	ra,12(sp)
    51f8:	dc800217 	ldw	r18,8(sp)
    51fc:	dc400117 	ldw	r17,4(sp)
    5200:	dc000017 	ldw	r16,0(sp)
    5204:	dec00404 	addi	sp,sp,16
    5208:	f800283a 	ret
    520c:	800b883a 	mov	r5,r16
    5210:	8809883a 	mov	r4,r17
    5214:	00040e40 	call	40e4 <__sflush_r>
    5218:	1025883a 	mov	r18,r2
    521c:	80800b17 	ldw	r2,44(r16)
    5220:	10000426 	beq	r2,zero,5234 <_fclose_r+0x78>
    5224:	81400717 	ldw	r5,28(r16)
    5228:	8809883a 	mov	r4,r17
    522c:	103ee83a 	callr	r2
    5230:	10001616 	blt	r2,zero,528c <_fclose_r+0xd0>
    5234:	8080030b 	ldhu	r2,12(r16)
    5238:	1080200c 	andi	r2,r2,128
    523c:	1000151e 	bne	r2,zero,5294 <_fclose_r+0xd8>
    5240:	81400c17 	ldw	r5,48(r16)
    5244:	28000526 	beq	r5,zero,525c <_fclose_r+0xa0>
    5248:	80801004 	addi	r2,r16,64
    524c:	28800226 	beq	r5,r2,5258 <_fclose_r+0x9c>
    5250:	8809883a 	mov	r4,r17
    5254:	00048500 	call	4850 <_free_r>
    5258:	80000c15 	stw	zero,48(r16)
    525c:	81401117 	ldw	r5,68(r16)
    5260:	28000326 	beq	r5,zero,5270 <_fclose_r+0xb4>
    5264:	8809883a 	mov	r4,r17
    5268:	00048500 	call	4850 <_free_r>
    526c:	80001115 	stw	zero,68(r16)
    5270:	00046ec0 	call	46ec <__sfp_lock_acquire>
    5274:	8000030d 	sth	zero,12(r16)
    5278:	00046f00 	call	46f0 <__sfp_lock_release>
    527c:	9005883a 	mov	r2,r18
    5280:	003fdc06 	br	51f4 <__alt_mem_onchip_memory2_0+0xf7c011f4>
    5284:	00046dc0 	call	46dc <__sinit>
    5288:	003fd706 	br	51e8 <__alt_mem_onchip_memory2_0+0xf7c011e8>
    528c:	04bfffc4 	movi	r18,-1
    5290:	003fe806 	br	5234 <__alt_mem_onchip_memory2_0+0xf7c01234>
    5294:	81400417 	ldw	r5,16(r16)
    5298:	8809883a 	mov	r4,r17
    529c:	00048500 	call	4850 <_free_r>
    52a0:	003fe706 	br	5240 <__alt_mem_onchip_memory2_0+0xf7c01240>
    52a4:	0005883a 	mov	r2,zero
    52a8:	f800283a 	ret

000052ac <fclose>:
    52ac:	00800034 	movhi	r2,0
    52b0:	109dfd04 	addi	r2,r2,30708
    52b4:	200b883a 	mov	r5,r4
    52b8:	11000017 	ldw	r4,0(r2)
    52bc:	00051bc1 	jmpi	51bc <_fclose_r>

000052c0 <_fstat_r>:
    52c0:	defffd04 	addi	sp,sp,-12
    52c4:	2805883a 	mov	r2,r5
    52c8:	dc000015 	stw	r16,0(sp)
    52cc:	04000074 	movhi	r16,1
    52d0:	dc400115 	stw	r17,4(sp)
    52d4:	8424c904 	addi	r16,r16,-27868
    52d8:	2023883a 	mov	r17,r4
    52dc:	300b883a 	mov	r5,r6
    52e0:	1009883a 	mov	r4,r2
    52e4:	dfc00215 	stw	ra,8(sp)
    52e8:	80000015 	stw	zero,0(r16)
    52ec:	00056540 	call	5654 <fstat>
    52f0:	00ffffc4 	movi	r3,-1
    52f4:	10c00526 	beq	r2,r3,530c <_fstat_r+0x4c>
    52f8:	dfc00217 	ldw	ra,8(sp)
    52fc:	dc400117 	ldw	r17,4(sp)
    5300:	dc000017 	ldw	r16,0(sp)
    5304:	dec00304 	addi	sp,sp,12
    5308:	f800283a 	ret
    530c:	80c00017 	ldw	r3,0(r16)
    5310:	183ff926 	beq	r3,zero,52f8 <__alt_mem_onchip_memory2_0+0xf7c012f8>
    5314:	88c00015 	stw	r3,0(r17)
    5318:	003ff706 	br	52f8 <__alt_mem_onchip_memory2_0+0xf7c012f8>

0000531c <_isatty_r>:
    531c:	defffd04 	addi	sp,sp,-12
    5320:	dc000015 	stw	r16,0(sp)
    5324:	04000074 	movhi	r16,1
    5328:	dc400115 	stw	r17,4(sp)
    532c:	8424c904 	addi	r16,r16,-27868
    5330:	2023883a 	mov	r17,r4
    5334:	2809883a 	mov	r4,r5
    5338:	dfc00215 	stw	ra,8(sp)
    533c:	80000015 	stw	zero,0(r16)
    5340:	00057400 	call	5740 <isatty>
    5344:	00ffffc4 	movi	r3,-1
    5348:	10c00526 	beq	r2,r3,5360 <_isatty_r+0x44>
    534c:	dfc00217 	ldw	ra,8(sp)
    5350:	dc400117 	ldw	r17,4(sp)
    5354:	dc000017 	ldw	r16,0(sp)
    5358:	dec00304 	addi	sp,sp,12
    535c:	f800283a 	ret
    5360:	80c00017 	ldw	r3,0(r16)
    5364:	183ff926 	beq	r3,zero,534c <__alt_mem_onchip_memory2_0+0xf7c0134c>
    5368:	88c00015 	stw	r3,0(r17)
    536c:	003ff706 	br	534c <__alt_mem_onchip_memory2_0+0xf7c0134c>

00005370 <_lseek_r>:
    5370:	defffd04 	addi	sp,sp,-12
    5374:	2805883a 	mov	r2,r5
    5378:	dc000015 	stw	r16,0(sp)
    537c:	04000074 	movhi	r16,1
    5380:	dc400115 	stw	r17,4(sp)
    5384:	300b883a 	mov	r5,r6
    5388:	8424c904 	addi	r16,r16,-27868
    538c:	2023883a 	mov	r17,r4
    5390:	380d883a 	mov	r6,r7
    5394:	1009883a 	mov	r4,r2
    5398:	dfc00215 	stw	ra,8(sp)
    539c:	80000015 	stw	zero,0(r16)
    53a0:	00058200 	call	5820 <lseek>
    53a4:	00ffffc4 	movi	r3,-1
    53a8:	10c00526 	beq	r2,r3,53c0 <_lseek_r+0x50>
    53ac:	dfc00217 	ldw	ra,8(sp)
    53b0:	dc400117 	ldw	r17,4(sp)
    53b4:	dc000017 	ldw	r16,0(sp)
    53b8:	dec00304 	addi	sp,sp,12
    53bc:	f800283a 	ret
    53c0:	80c00017 	ldw	r3,0(r16)
    53c4:	183ff926 	beq	r3,zero,53ac <__alt_mem_onchip_memory2_0+0xf7c013ac>
    53c8:	88c00015 	stw	r3,0(r17)
    53cc:	003ff706 	br	53ac <__alt_mem_onchip_memory2_0+0xf7c013ac>

000053d0 <_read_r>:
    53d0:	defffd04 	addi	sp,sp,-12
    53d4:	2805883a 	mov	r2,r5
    53d8:	dc000015 	stw	r16,0(sp)
    53dc:	04000074 	movhi	r16,1
    53e0:	dc400115 	stw	r17,4(sp)
    53e4:	300b883a 	mov	r5,r6
    53e8:	8424c904 	addi	r16,r16,-27868
    53ec:	2023883a 	mov	r17,r4
    53f0:	380d883a 	mov	r6,r7
    53f4:	1009883a 	mov	r4,r2
    53f8:	dfc00215 	stw	ra,8(sp)
    53fc:	80000015 	stw	zero,0(r16)
    5400:	00059780 	call	5978 <read>
    5404:	00ffffc4 	movi	r3,-1
    5408:	10c00526 	beq	r2,r3,5420 <_read_r+0x50>
    540c:	dfc00217 	ldw	ra,8(sp)
    5410:	dc400117 	ldw	r17,4(sp)
    5414:	dc000017 	ldw	r16,0(sp)
    5418:	dec00304 	addi	sp,sp,12
    541c:	f800283a 	ret
    5420:	80c00017 	ldw	r3,0(r16)
    5424:	183ff926 	beq	r3,zero,540c <__alt_mem_onchip_memory2_0+0xf7c0140c>
    5428:	88c00015 	stw	r3,0(r17)
    542c:	003ff706 	br	540c <__alt_mem_onchip_memory2_0+0xf7c0140c>

00005430 <__divsi3>:
    5430:	20001b16 	blt	r4,zero,54a0 <__divsi3+0x70>
    5434:	000f883a 	mov	r7,zero
    5438:	28001616 	blt	r5,zero,5494 <__divsi3+0x64>
    543c:	200d883a 	mov	r6,r4
    5440:	29001a2e 	bgeu	r5,r4,54ac <__divsi3+0x7c>
    5444:	00800804 	movi	r2,32
    5448:	00c00044 	movi	r3,1
    544c:	00000106 	br	5454 <__divsi3+0x24>
    5450:	10000d26 	beq	r2,zero,5488 <__divsi3+0x58>
    5454:	294b883a 	add	r5,r5,r5
    5458:	10bfffc4 	addi	r2,r2,-1
    545c:	18c7883a 	add	r3,r3,r3
    5460:	293ffb36 	bltu	r5,r4,5450 <__alt_mem_onchip_memory2_0+0xf7c01450>
    5464:	0005883a 	mov	r2,zero
    5468:	18000726 	beq	r3,zero,5488 <__divsi3+0x58>
    546c:	0005883a 	mov	r2,zero
    5470:	31400236 	bltu	r6,r5,547c <__divsi3+0x4c>
    5474:	314dc83a 	sub	r6,r6,r5
    5478:	10c4b03a 	or	r2,r2,r3
    547c:	1806d07a 	srli	r3,r3,1
    5480:	280ad07a 	srli	r5,r5,1
    5484:	183ffa1e 	bne	r3,zero,5470 <__alt_mem_onchip_memory2_0+0xf7c01470>
    5488:	38000126 	beq	r7,zero,5490 <__divsi3+0x60>
    548c:	0085c83a 	sub	r2,zero,r2
    5490:	f800283a 	ret
    5494:	014bc83a 	sub	r5,zero,r5
    5498:	39c0005c 	xori	r7,r7,1
    549c:	003fe706 	br	543c <__alt_mem_onchip_memory2_0+0xf7c0143c>
    54a0:	0109c83a 	sub	r4,zero,r4
    54a4:	01c00044 	movi	r7,1
    54a8:	003fe306 	br	5438 <__alt_mem_onchip_memory2_0+0xf7c01438>
    54ac:	00c00044 	movi	r3,1
    54b0:	003fee06 	br	546c <__alt_mem_onchip_memory2_0+0xf7c0146c>

000054b4 <__modsi3>:
    54b4:	20001716 	blt	r4,zero,5514 <__modsi3+0x60>
    54b8:	000f883a 	mov	r7,zero
    54bc:	2005883a 	mov	r2,r4
    54c0:	28001216 	blt	r5,zero,550c <__modsi3+0x58>
    54c4:	2900162e 	bgeu	r5,r4,5520 <__modsi3+0x6c>
    54c8:	01800804 	movi	r6,32
    54cc:	00c00044 	movi	r3,1
    54d0:	00000106 	br	54d8 <__modsi3+0x24>
    54d4:	30000a26 	beq	r6,zero,5500 <__modsi3+0x4c>
    54d8:	294b883a 	add	r5,r5,r5
    54dc:	31bfffc4 	addi	r6,r6,-1
    54e0:	18c7883a 	add	r3,r3,r3
    54e4:	293ffb36 	bltu	r5,r4,54d4 <__alt_mem_onchip_memory2_0+0xf7c014d4>
    54e8:	18000526 	beq	r3,zero,5500 <__modsi3+0x4c>
    54ec:	1806d07a 	srli	r3,r3,1
    54f0:	11400136 	bltu	r2,r5,54f8 <__modsi3+0x44>
    54f4:	1145c83a 	sub	r2,r2,r5
    54f8:	280ad07a 	srli	r5,r5,1
    54fc:	183ffb1e 	bne	r3,zero,54ec <__alt_mem_onchip_memory2_0+0xf7c014ec>
    5500:	38000126 	beq	r7,zero,5508 <__modsi3+0x54>
    5504:	0085c83a 	sub	r2,zero,r2
    5508:	f800283a 	ret
    550c:	014bc83a 	sub	r5,zero,r5
    5510:	003fec06 	br	54c4 <__alt_mem_onchip_memory2_0+0xf7c014c4>
    5514:	0109c83a 	sub	r4,zero,r4
    5518:	01c00044 	movi	r7,1
    551c:	003fe706 	br	54bc <__alt_mem_onchip_memory2_0+0xf7c014bc>
    5520:	00c00044 	movi	r3,1
    5524:	003ff106 	br	54ec <__alt_mem_onchip_memory2_0+0xf7c014ec>

00005528 <__udivsi3>:
    5528:	200d883a 	mov	r6,r4
    552c:	2900152e 	bgeu	r5,r4,5584 <__udivsi3+0x5c>
    5530:	28001416 	blt	r5,zero,5584 <__udivsi3+0x5c>
    5534:	00800804 	movi	r2,32
    5538:	00c00044 	movi	r3,1
    553c:	00000206 	br	5548 <__udivsi3+0x20>
    5540:	10000e26 	beq	r2,zero,557c <__udivsi3+0x54>
    5544:	28000516 	blt	r5,zero,555c <__udivsi3+0x34>
    5548:	294b883a 	add	r5,r5,r5
    554c:	10bfffc4 	addi	r2,r2,-1
    5550:	18c7883a 	add	r3,r3,r3
    5554:	293ffa36 	bltu	r5,r4,5540 <__alt_mem_onchip_memory2_0+0xf7c01540>
    5558:	18000826 	beq	r3,zero,557c <__udivsi3+0x54>
    555c:	0005883a 	mov	r2,zero
    5560:	31400236 	bltu	r6,r5,556c <__udivsi3+0x44>
    5564:	314dc83a 	sub	r6,r6,r5
    5568:	10c4b03a 	or	r2,r2,r3
    556c:	1806d07a 	srli	r3,r3,1
    5570:	280ad07a 	srli	r5,r5,1
    5574:	183ffa1e 	bne	r3,zero,5560 <__alt_mem_onchip_memory2_0+0xf7c01560>
    5578:	f800283a 	ret
    557c:	0005883a 	mov	r2,zero
    5580:	f800283a 	ret
    5584:	00c00044 	movi	r3,1
    5588:	003ff406 	br	555c <__alt_mem_onchip_memory2_0+0xf7c0155c>

0000558c <__umodsi3>:
    558c:	2005883a 	mov	r2,r4
    5590:	2900122e 	bgeu	r5,r4,55dc <__umodsi3+0x50>
    5594:	28001116 	blt	r5,zero,55dc <__umodsi3+0x50>
    5598:	01800804 	movi	r6,32
    559c:	00c00044 	movi	r3,1
    55a0:	00000206 	br	55ac <__umodsi3+0x20>
    55a4:	30000c26 	beq	r6,zero,55d8 <__umodsi3+0x4c>
    55a8:	28000516 	blt	r5,zero,55c0 <__umodsi3+0x34>
    55ac:	294b883a 	add	r5,r5,r5
    55b0:	31bfffc4 	addi	r6,r6,-1
    55b4:	18c7883a 	add	r3,r3,r3
    55b8:	293ffa36 	bltu	r5,r4,55a4 <__alt_mem_onchip_memory2_0+0xf7c015a4>
    55bc:	18000626 	beq	r3,zero,55d8 <__umodsi3+0x4c>
    55c0:	1806d07a 	srli	r3,r3,1
    55c4:	11400136 	bltu	r2,r5,55cc <__umodsi3+0x40>
    55c8:	1145c83a 	sub	r2,r2,r5
    55cc:	280ad07a 	srli	r5,r5,1
    55d0:	183ffb1e 	bne	r3,zero,55c0 <__alt_mem_onchip_memory2_0+0xf7c015c0>
    55d4:	f800283a 	ret
    55d8:	f800283a 	ret
    55dc:	00c00044 	movi	r3,1
    55e0:	003ff706 	br	55c0 <__alt_mem_onchip_memory2_0+0xf7c015c0>

000055e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    55e4:	defffd04 	addi	sp,sp,-12
    55e8:	df000215 	stw	fp,8(sp)
    55ec:	df000204 	addi	fp,sp,8
    55f0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    55f4:	0001883a 	nop
    55f8:	e0bfff17 	ldw	r2,-4(fp)
    55fc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    5600:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    5604:	10000226 	beq	r2,zero,5610 <_exit+0x2c>
    ALT_SIM_FAIL();
    5608:	002af070 	cmpltui	zero,zero,43969
    560c:	00000106 	br	5614 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    5610:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    5614:	003fff06 	br	5614 <__alt_mem_onchip_memory2_0+0xf7c01614>

00005618 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5618:	defffe04 	addi	sp,sp,-8
    561c:	dfc00115 	stw	ra,4(sp)
    5620:	df000015 	stw	fp,0(sp)
    5624:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5628:	d0a00517 	ldw	r2,-32748(gp)
    562c:	10000326 	beq	r2,zero,563c <alt_get_errno+0x24>
    5630:	d0a00517 	ldw	r2,-32748(gp)
    5634:	103ee83a 	callr	r2
    5638:	00000106 	br	5640 <alt_get_errno+0x28>
    563c:	d0a6d604 	addi	r2,gp,-25768
}
    5640:	e037883a 	mov	sp,fp
    5644:	dfc00117 	ldw	ra,4(sp)
    5648:	df000017 	ldw	fp,0(sp)
    564c:	dec00204 	addi	sp,sp,8
    5650:	f800283a 	ret

00005654 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    5654:	defffb04 	addi	sp,sp,-20
    5658:	dfc00415 	stw	ra,16(sp)
    565c:	df000315 	stw	fp,12(sp)
    5660:	df000304 	addi	fp,sp,12
    5664:	e13ffe15 	stw	r4,-8(fp)
    5668:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    566c:	e0bffe17 	ldw	r2,-8(fp)
    5670:	10000616 	blt	r2,zero,568c <fstat+0x38>
    5674:	e0bffe17 	ldw	r2,-8(fp)
    5678:	10c00324 	muli	r3,r2,12
    567c:	00800034 	movhi	r2,0
    5680:	109b8804 	addi	r2,r2,28192
    5684:	1885883a 	add	r2,r3,r2
    5688:	00000106 	br	5690 <fstat+0x3c>
    568c:	0005883a 	mov	r2,zero
    5690:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    5694:	e0bffd17 	ldw	r2,-12(fp)
    5698:	10001026 	beq	r2,zero,56dc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    569c:	e0bffd17 	ldw	r2,-12(fp)
    56a0:	10800017 	ldw	r2,0(r2)
    56a4:	10800817 	ldw	r2,32(r2)
    56a8:	10000726 	beq	r2,zero,56c8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    56ac:	e0bffd17 	ldw	r2,-12(fp)
    56b0:	10800017 	ldw	r2,0(r2)
    56b4:	10800817 	ldw	r2,32(r2)
    56b8:	e17fff17 	ldw	r5,-4(fp)
    56bc:	e13ffd17 	ldw	r4,-12(fp)
    56c0:	103ee83a 	callr	r2
    56c4:	00000a06 	br	56f0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    56c8:	e0bfff17 	ldw	r2,-4(fp)
    56cc:	00c80004 	movi	r3,8192
    56d0:	10c00115 	stw	r3,4(r2)
      return 0;
    56d4:	0005883a 	mov	r2,zero
    56d8:	00000506 	br	56f0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    56dc:	00056180 	call	5618 <alt_get_errno>
    56e0:	1007883a 	mov	r3,r2
    56e4:	00801444 	movi	r2,81
    56e8:	18800015 	stw	r2,0(r3)
    return -1;
    56ec:	00bfffc4 	movi	r2,-1
  }
}
    56f0:	e037883a 	mov	sp,fp
    56f4:	dfc00117 	ldw	ra,4(sp)
    56f8:	df000017 	ldw	fp,0(sp)
    56fc:	dec00204 	addi	sp,sp,8
    5700:	f800283a 	ret

00005704 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5704:	defffe04 	addi	sp,sp,-8
    5708:	dfc00115 	stw	ra,4(sp)
    570c:	df000015 	stw	fp,0(sp)
    5710:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5714:	d0a00517 	ldw	r2,-32748(gp)
    5718:	10000326 	beq	r2,zero,5728 <alt_get_errno+0x24>
    571c:	d0a00517 	ldw	r2,-32748(gp)
    5720:	103ee83a 	callr	r2
    5724:	00000106 	br	572c <alt_get_errno+0x28>
    5728:	d0a6d604 	addi	r2,gp,-25768
}
    572c:	e037883a 	mov	sp,fp
    5730:	dfc00117 	ldw	ra,4(sp)
    5734:	df000017 	ldw	fp,0(sp)
    5738:	dec00204 	addi	sp,sp,8
    573c:	f800283a 	ret

00005740 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    5740:	deffed04 	addi	sp,sp,-76
    5744:	dfc01215 	stw	ra,72(sp)
    5748:	df001115 	stw	fp,68(sp)
    574c:	df001104 	addi	fp,sp,68
    5750:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5754:	e0bfff17 	ldw	r2,-4(fp)
    5758:	10000616 	blt	r2,zero,5774 <isatty+0x34>
    575c:	e0bfff17 	ldw	r2,-4(fp)
    5760:	10c00324 	muli	r3,r2,12
    5764:	00800034 	movhi	r2,0
    5768:	109b8804 	addi	r2,r2,28192
    576c:	1885883a 	add	r2,r3,r2
    5770:	00000106 	br	5778 <isatty+0x38>
    5774:	0005883a 	mov	r2,zero
    5778:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    577c:	e0bfef17 	ldw	r2,-68(fp)
    5780:	10000e26 	beq	r2,zero,57bc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    5784:	e0bfef17 	ldw	r2,-68(fp)
    5788:	10800017 	ldw	r2,0(r2)
    578c:	10800817 	ldw	r2,32(r2)
    5790:	1000021e 	bne	r2,zero,579c <isatty+0x5c>
    {
      return 1;
    5794:	00800044 	movi	r2,1
    5798:	00000d06 	br	57d0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    579c:	e0bff004 	addi	r2,fp,-64
    57a0:	100b883a 	mov	r5,r2
    57a4:	e13fff17 	ldw	r4,-4(fp)
    57a8:	00056540 	call	5654 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    57ac:	e0bff117 	ldw	r2,-60(fp)
    57b0:	10880020 	cmpeqi	r2,r2,8192
    57b4:	10803fcc 	andi	r2,r2,255
    57b8:	00000506 	br	57d0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    57bc:	00057040 	call	5704 <alt_get_errno>
    57c0:	1007883a 	mov	r3,r2
    57c4:	00801444 	movi	r2,81
    57c8:	18800015 	stw	r2,0(r3)
    return 0;
    57cc:	0005883a 	mov	r2,zero
  }
}
    57d0:	e037883a 	mov	sp,fp
    57d4:	dfc00117 	ldw	ra,4(sp)
    57d8:	df000017 	ldw	fp,0(sp)
    57dc:	dec00204 	addi	sp,sp,8
    57e0:	f800283a 	ret

000057e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    57e4:	defffe04 	addi	sp,sp,-8
    57e8:	dfc00115 	stw	ra,4(sp)
    57ec:	df000015 	stw	fp,0(sp)
    57f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    57f4:	d0a00517 	ldw	r2,-32748(gp)
    57f8:	10000326 	beq	r2,zero,5808 <alt_get_errno+0x24>
    57fc:	d0a00517 	ldw	r2,-32748(gp)
    5800:	103ee83a 	callr	r2
    5804:	00000106 	br	580c <alt_get_errno+0x28>
    5808:	d0a6d604 	addi	r2,gp,-25768
}
    580c:	e037883a 	mov	sp,fp
    5810:	dfc00117 	ldw	ra,4(sp)
    5814:	df000017 	ldw	fp,0(sp)
    5818:	dec00204 	addi	sp,sp,8
    581c:	f800283a 	ret

00005820 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    5820:	defff904 	addi	sp,sp,-28
    5824:	dfc00615 	stw	ra,24(sp)
    5828:	df000515 	stw	fp,20(sp)
    582c:	df000504 	addi	fp,sp,20
    5830:	e13ffd15 	stw	r4,-12(fp)
    5834:	e17ffe15 	stw	r5,-8(fp)
    5838:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    583c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5840:	e0bffd17 	ldw	r2,-12(fp)
    5844:	10000616 	blt	r2,zero,5860 <lseek+0x40>
    5848:	e0bffd17 	ldw	r2,-12(fp)
    584c:	10c00324 	muli	r3,r2,12
    5850:	00800034 	movhi	r2,0
    5854:	109b8804 	addi	r2,r2,28192
    5858:	1885883a 	add	r2,r3,r2
    585c:	00000106 	br	5864 <lseek+0x44>
    5860:	0005883a 	mov	r2,zero
    5864:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    5868:	e0bffc17 	ldw	r2,-16(fp)
    586c:	10001026 	beq	r2,zero,58b0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    5870:	e0bffc17 	ldw	r2,-16(fp)
    5874:	10800017 	ldw	r2,0(r2)
    5878:	10800717 	ldw	r2,28(r2)
    587c:	10000926 	beq	r2,zero,58a4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    5880:	e0bffc17 	ldw	r2,-16(fp)
    5884:	10800017 	ldw	r2,0(r2)
    5888:	10800717 	ldw	r2,28(r2)
    588c:	e1bfff17 	ldw	r6,-4(fp)
    5890:	e17ffe17 	ldw	r5,-8(fp)
    5894:	e13ffc17 	ldw	r4,-16(fp)
    5898:	103ee83a 	callr	r2
    589c:	e0bffb15 	stw	r2,-20(fp)
    58a0:	00000506 	br	58b8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    58a4:	00bfde84 	movi	r2,-134
    58a8:	e0bffb15 	stw	r2,-20(fp)
    58ac:	00000206 	br	58b8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    58b0:	00bfebc4 	movi	r2,-81
    58b4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    58b8:	e0bffb17 	ldw	r2,-20(fp)
    58bc:	1000070e 	bge	r2,zero,58dc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    58c0:	00057e40 	call	57e4 <alt_get_errno>
    58c4:	1007883a 	mov	r3,r2
    58c8:	e0bffb17 	ldw	r2,-20(fp)
    58cc:	0085c83a 	sub	r2,zero,r2
    58d0:	18800015 	stw	r2,0(r3)
    rc = -1;
    58d4:	00bfffc4 	movi	r2,-1
    58d8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    58dc:	e0bffb17 	ldw	r2,-20(fp)
}
    58e0:	e037883a 	mov	sp,fp
    58e4:	dfc00117 	ldw	ra,4(sp)
    58e8:	df000017 	ldw	fp,0(sp)
    58ec:	dec00204 	addi	sp,sp,8
    58f0:	f800283a 	ret

000058f4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    58f4:	defffe04 	addi	sp,sp,-8
    58f8:	df000115 	stw	fp,4(sp)
    58fc:	df000104 	addi	fp,sp,4
    5900:	e13fff15 	stw	r4,-4(fp)
}
    5904:	0001883a 	nop
    5908:	e037883a 	mov	sp,fp
    590c:	df000017 	ldw	fp,0(sp)
    5910:	dec00104 	addi	sp,sp,4
    5914:	f800283a 	ret

00005918 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    5918:	defffe04 	addi	sp,sp,-8
    591c:	df000115 	stw	fp,4(sp)
    5920:	df000104 	addi	fp,sp,4
    5924:	e13fff15 	stw	r4,-4(fp)
}
    5928:	0001883a 	nop
    592c:	e037883a 	mov	sp,fp
    5930:	df000017 	ldw	fp,0(sp)
    5934:	dec00104 	addi	sp,sp,4
    5938:	f800283a 	ret

0000593c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    593c:	defffe04 	addi	sp,sp,-8
    5940:	dfc00115 	stw	ra,4(sp)
    5944:	df000015 	stw	fp,0(sp)
    5948:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    594c:	d0a00517 	ldw	r2,-32748(gp)
    5950:	10000326 	beq	r2,zero,5960 <alt_get_errno+0x24>
    5954:	d0a00517 	ldw	r2,-32748(gp)
    5958:	103ee83a 	callr	r2
    595c:	00000106 	br	5964 <alt_get_errno+0x28>
    5960:	d0a6d604 	addi	r2,gp,-25768
}
    5964:	e037883a 	mov	sp,fp
    5968:	dfc00117 	ldw	ra,4(sp)
    596c:	df000017 	ldw	fp,0(sp)
    5970:	dec00204 	addi	sp,sp,8
    5974:	f800283a 	ret

00005978 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    5978:	defff904 	addi	sp,sp,-28
    597c:	dfc00615 	stw	ra,24(sp)
    5980:	df000515 	stw	fp,20(sp)
    5984:	df000504 	addi	fp,sp,20
    5988:	e13ffd15 	stw	r4,-12(fp)
    598c:	e17ffe15 	stw	r5,-8(fp)
    5990:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5994:	e0bffd17 	ldw	r2,-12(fp)
    5998:	10000616 	blt	r2,zero,59b4 <read+0x3c>
    599c:	e0bffd17 	ldw	r2,-12(fp)
    59a0:	10c00324 	muli	r3,r2,12
    59a4:	00800034 	movhi	r2,0
    59a8:	109b8804 	addi	r2,r2,28192
    59ac:	1885883a 	add	r2,r3,r2
    59b0:	00000106 	br	59b8 <read+0x40>
    59b4:	0005883a 	mov	r2,zero
    59b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    59bc:	e0bffb17 	ldw	r2,-20(fp)
    59c0:	10002226 	beq	r2,zero,5a4c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    59c4:	e0bffb17 	ldw	r2,-20(fp)
    59c8:	10800217 	ldw	r2,8(r2)
    59cc:	108000cc 	andi	r2,r2,3
    59d0:	10800060 	cmpeqi	r2,r2,1
    59d4:	1000181e 	bne	r2,zero,5a38 <read+0xc0>
        (fd->dev->read))
    59d8:	e0bffb17 	ldw	r2,-20(fp)
    59dc:	10800017 	ldw	r2,0(r2)
    59e0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    59e4:	10001426 	beq	r2,zero,5a38 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    59e8:	e0bffb17 	ldw	r2,-20(fp)
    59ec:	10800017 	ldw	r2,0(r2)
    59f0:	10800517 	ldw	r2,20(r2)
    59f4:	e0ffff17 	ldw	r3,-4(fp)
    59f8:	180d883a 	mov	r6,r3
    59fc:	e17ffe17 	ldw	r5,-8(fp)
    5a00:	e13ffb17 	ldw	r4,-20(fp)
    5a04:	103ee83a 	callr	r2
    5a08:	e0bffc15 	stw	r2,-16(fp)
    5a0c:	e0bffc17 	ldw	r2,-16(fp)
    5a10:	1000070e 	bge	r2,zero,5a30 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    5a14:	000593c0 	call	593c <alt_get_errno>
    5a18:	1007883a 	mov	r3,r2
    5a1c:	e0bffc17 	ldw	r2,-16(fp)
    5a20:	0085c83a 	sub	r2,zero,r2
    5a24:	18800015 	stw	r2,0(r3)
          return -1;
    5a28:	00bfffc4 	movi	r2,-1
    5a2c:	00000c06 	br	5a60 <read+0xe8>
        }
        return rval;
    5a30:	e0bffc17 	ldw	r2,-16(fp)
    5a34:	00000a06 	br	5a60 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    5a38:	000593c0 	call	593c <alt_get_errno>
    5a3c:	1007883a 	mov	r3,r2
    5a40:	00800344 	movi	r2,13
    5a44:	18800015 	stw	r2,0(r3)
    5a48:	00000406 	br	5a5c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    5a4c:	000593c0 	call	593c <alt_get_errno>
    5a50:	1007883a 	mov	r3,r2
    5a54:	00801444 	movi	r2,81
    5a58:	18800015 	stw	r2,0(r3)
  }
  return -1;
    5a5c:	00bfffc4 	movi	r2,-1
}
    5a60:	e037883a 	mov	sp,fp
    5a64:	dfc00117 	ldw	ra,4(sp)
    5a68:	df000017 	ldw	fp,0(sp)
    5a6c:	dec00204 	addi	sp,sp,8
    5a70:	f800283a 	ret

00005a74 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    5a74:	defff904 	addi	sp,sp,-28
    5a78:	df000615 	stw	fp,24(sp)
    5a7c:	df000604 	addi	fp,sp,24
    5a80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5a84:	0005303a 	rdctl	r2,status
    5a88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a8c:	e0fffe17 	ldw	r3,-8(fp)
    5a90:	00bfff84 	movi	r2,-2
    5a94:	1884703a 	and	r2,r3,r2
    5a98:	1001703a 	wrctl	status,r2
  
  return context;
    5a9c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    5aa0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5aa4:	d0a00d17 	ldw	r2,-32716(gp)
    5aa8:	10c000c4 	addi	r3,r2,3
    5aac:	00bfff04 	movi	r2,-4
    5ab0:	1884703a 	and	r2,r3,r2
    5ab4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5ab8:	d0e00d17 	ldw	r3,-32716(gp)
    5abc:	e0bfff17 	ldw	r2,-4(fp)
    5ac0:	1887883a 	add	r3,r3,r2
    5ac4:	00820034 	movhi	r2,2048
    5ac8:	10800004 	addi	r2,r2,0
    5acc:	10c0062e 	bgeu	r2,r3,5ae8 <sbrk+0x74>
    5ad0:	e0bffb17 	ldw	r2,-20(fp)
    5ad4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ad8:	e0bffa17 	ldw	r2,-24(fp)
    5adc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    5ae0:	00bfffc4 	movi	r2,-1
    5ae4:	00000b06 	br	5b14 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    5ae8:	d0a00d17 	ldw	r2,-32716(gp)
    5aec:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    5af0:	d0e00d17 	ldw	r3,-32716(gp)
    5af4:	e0bfff17 	ldw	r2,-4(fp)
    5af8:	1885883a 	add	r2,r3,r2
    5afc:	d0a00d15 	stw	r2,-32716(gp)
    5b00:	e0bffb17 	ldw	r2,-20(fp)
    5b04:	e0bffc15 	stw	r2,-16(fp)
    5b08:	e0bffc17 	ldw	r2,-16(fp)
    5b0c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    5b10:	e0bffd17 	ldw	r2,-12(fp)
} 
    5b14:	e037883a 	mov	sp,fp
    5b18:	df000017 	ldw	fp,0(sp)
    5b1c:	dec00104 	addi	sp,sp,4
    5b20:	f800283a 	ret

00005b24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5b24:	defffe04 	addi	sp,sp,-8
    5b28:	dfc00115 	stw	ra,4(sp)
    5b2c:	df000015 	stw	fp,0(sp)
    5b30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5b34:	d0a00517 	ldw	r2,-32748(gp)
    5b38:	10000326 	beq	r2,zero,5b48 <alt_get_errno+0x24>
    5b3c:	d0a00517 	ldw	r2,-32748(gp)
    5b40:	103ee83a 	callr	r2
    5b44:	00000106 	br	5b4c <alt_get_errno+0x28>
    5b48:	d0a6d604 	addi	r2,gp,-25768
}
    5b4c:	e037883a 	mov	sp,fp
    5b50:	dfc00117 	ldw	ra,4(sp)
    5b54:	df000017 	ldw	fp,0(sp)
    5b58:	dec00204 	addi	sp,sp,8
    5b5c:	f800283a 	ret

00005b60 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5b60:	defff904 	addi	sp,sp,-28
    5b64:	dfc00615 	stw	ra,24(sp)
    5b68:	df000515 	stw	fp,20(sp)
    5b6c:	df000504 	addi	fp,sp,20
    5b70:	e13ffd15 	stw	r4,-12(fp)
    5b74:	e17ffe15 	stw	r5,-8(fp)
    5b78:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5b7c:	e0bffd17 	ldw	r2,-12(fp)
    5b80:	10000616 	blt	r2,zero,5b9c <write+0x3c>
    5b84:	e0bffd17 	ldw	r2,-12(fp)
    5b88:	10c00324 	muli	r3,r2,12
    5b8c:	00800034 	movhi	r2,0
    5b90:	109b8804 	addi	r2,r2,28192
    5b94:	1885883a 	add	r2,r3,r2
    5b98:	00000106 	br	5ba0 <write+0x40>
    5b9c:	0005883a 	mov	r2,zero
    5ba0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    5ba4:	e0bffb17 	ldw	r2,-20(fp)
    5ba8:	10002126 	beq	r2,zero,5c30 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5bac:	e0bffb17 	ldw	r2,-20(fp)
    5bb0:	10800217 	ldw	r2,8(r2)
    5bb4:	108000cc 	andi	r2,r2,3
    5bb8:	10001826 	beq	r2,zero,5c1c <write+0xbc>
    5bbc:	e0bffb17 	ldw	r2,-20(fp)
    5bc0:	10800017 	ldw	r2,0(r2)
    5bc4:	10800617 	ldw	r2,24(r2)
    5bc8:	10001426 	beq	r2,zero,5c1c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5bcc:	e0bffb17 	ldw	r2,-20(fp)
    5bd0:	10800017 	ldw	r2,0(r2)
    5bd4:	10800617 	ldw	r2,24(r2)
    5bd8:	e0ffff17 	ldw	r3,-4(fp)
    5bdc:	180d883a 	mov	r6,r3
    5be0:	e17ffe17 	ldw	r5,-8(fp)
    5be4:	e13ffb17 	ldw	r4,-20(fp)
    5be8:	103ee83a 	callr	r2
    5bec:	e0bffc15 	stw	r2,-16(fp)
    5bf0:	e0bffc17 	ldw	r2,-16(fp)
    5bf4:	1000070e 	bge	r2,zero,5c14 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    5bf8:	0005b240 	call	5b24 <alt_get_errno>
    5bfc:	1007883a 	mov	r3,r2
    5c00:	e0bffc17 	ldw	r2,-16(fp)
    5c04:	0085c83a 	sub	r2,zero,r2
    5c08:	18800015 	stw	r2,0(r3)
        return -1;
    5c0c:	00bfffc4 	movi	r2,-1
    5c10:	00000c06 	br	5c44 <write+0xe4>
      }
      return rval;
    5c14:	e0bffc17 	ldw	r2,-16(fp)
    5c18:	00000a06 	br	5c44 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    5c1c:	0005b240 	call	5b24 <alt_get_errno>
    5c20:	1007883a 	mov	r3,r2
    5c24:	00800344 	movi	r2,13
    5c28:	18800015 	stw	r2,0(r3)
    5c2c:	00000406 	br	5c40 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5c30:	0005b240 	call	5b24 <alt_get_errno>
    5c34:	1007883a 	mov	r3,r2
    5c38:	00801444 	movi	r2,81
    5c3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    5c40:	00bfffc4 	movi	r2,-1
}
    5c44:	e037883a 	mov	sp,fp
    5c48:	dfc00117 	ldw	ra,4(sp)
    5c4c:	df000017 	ldw	fp,0(sp)
    5c50:	dec00204 	addi	sp,sp,8
    5c54:	f800283a 	ret
