
piano.elf:     file format elf32-littlenios2
piano.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001e664 memsz 0x0001e664 flags r-x
    LOAD off    0x0001f684 vaddr 0x0001e684 paddr 0x000201bc align 2**12
         filesz 0x00001b38 memsz 0x00001b38 flags rw-
    LOAD off    0x00021cf4 vaddr 0x00021cf4 paddr 0x00021cf4 align 2**12
         filesz 0x00000000 memsz 0x0002ef58 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006c1c  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00017820  00006e64  00006e64  00007e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b38  0001e684  000201bc  0001f684  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0002ef58  00021cf4  00021cf4  00021cf4  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00050c4c  00050c4c  000211bc  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08404000  08404000  000211bc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000211bc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a80  00000000  00000000  000211e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00019448  00000000  00000000  00021c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000068ba  00000000  00000000  0003b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000074aa  00000000  00000000  00041962  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001b1c  00000000  00000000  00048e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002c69  00000000  00000000  0004a928  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004c80  00000000  00000000  0004d591  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00052214  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000006d8  00000000  00000000  00052248  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00055572  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00055575  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00055581  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00055582  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00055583  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00055587  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0005558b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0005558f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0005559a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000555a5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000555b0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003c  00000000  00000000  000555bb  2**0
                  CONTENTS, READONLY
 30 .jdi          00005c74  00000000  00000000  000555f7  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000bd4a2  00000000  00000000  0005b26b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
00006e64 l    d  .rodata	00000000 .rodata
0001e684 l    d  .rwdata	00000000 .rwdata
00021cf4 l    d  .bss	00000000 .bss
00050c4c l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
08404000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../piano_bsp//obj/HAL/src/crt0.o
00000290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 piano.c
00000000 l    df *ABS*	00000000 alt_load.c
0000083c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000c38 l     F .text	00000034 alt_dev_reg
0001e684 l     O .rwdata	00001060 jtag_uart_0
0001f6e4 l     O .rwdata	00000030 audio_and_video_config_0
0001f714 l     O .rwdata	00000030 audio_subsystem_Audio
0001f744 l     O .rwdata	00000038 ps2_0
0001f77c l     O .rwdata	00000034 usb_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000f5c l     F .text	00000210 altera_avalon_jtag_uart_irq
0000116c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000017a4 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00002818 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000296c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00002998 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002b3c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00002dfc l     F .text	0000003c alt_get_errno
00002e38 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0001f958 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005598 l     F .text	00000008 __fp_unlock
000055ac l     F .text	0000019c __sinit.part.1
00005748 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00006824 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00006910 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
000069f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00006b48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
000201b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00006d30 l     F .text	0000003c alt_get_errno
00021d10 g     O .bss	00000004 alt_instruction_exception_handler
00006528 g     F .text	00000054 _isatty_r
00000928 g     F .text	0000006c alt_main
00050b4c g     O .bss	00000100 alt_irq
00002288 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
0000657c g     F .text	00000060 _lseek_r
000201bc g       *ABS*	00000000 __flash_rwdata_start
00001b3c g     F .text	00000060 alt_up_audio_read_fifo_avail
00050c4c g       *ABS*	00000000 __alt_heap_start
00001b9c g     F .text	00000068 alt_up_audio_record_r
000062b0 g     F .text	0000005c __sseek
000058e8 g     F .text	00000010 __sinit
00004ec4 g     F .text	00000140 __swbuf_r
000020a0 g     F .text	00000034 read_CE_bit
00005750 g     F .text	00000068 __sfmoreglue
00006b24 g     F .text	00000024 __malloc_unlock
00002428 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
00001aa8 g     F .text	00000094 alt_up_audio_reset_audio_core
000045b0 g     F .text	0000015c memmove
00021cf4 g     O .bss	00000001 byte1
000058d0 g     F .text	00000018 _cleanup
00000bfc g     F .text	0000003c alt_putstr
00003258 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000064cc g     F .text	0000005c _fstat_r
00021d14 g     O .bss	00000004 errno
0000622c g     F .text	00000008 __seofread
00001a68 g     F .text	00000040 alt_up_audio_write_interrupt_pending
00021cfc g     O .bss	00000004 alt_argv
00028184 g       *ABS*	00000000 _gp
0001f7d8 g     O .rwdata	00000180 alt_fd_list
00002a78 g     F .text	00000090 alt_find_dev
00004468 g     F .text	00000148 memcpy
000055a0 g     F .text	0000000c _cleanup_r
00002c00 g     F .text	0000007c alt_io_redirect
000034b8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00001f84 g     F .text	00000050 alt_up_audio_read_fifo_head
00001364 g     F .text	0000021c altera_avalon_jtag_uart_read
08404000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00006734 g     F .text	00000064 .hidden __udivsi3
0000694c g     F .text	000000a4 isatty
00003428 g     F .text	00000090 alt_icache_flush
00021d20 g     O .bss	00000004 __malloc_top_pad
00003640 g     F .text	000004bc __sfvwrite_r
00004dd8 g     F .text	00000054 _sbrk_r
000065dc g     F .text	00000060 _read_r
00020194 g     O .rwdata	00000004 alt_max_fd
00001fd4 g     F .text	00000068 alt_up_audio_write_fifo_head
000063c8 g     F .text	000000f0 _fclose_r
000020d4 g     F .text	00000030 read_num_bytes_available
00005568 g     F .text	00000030 fflush
00021d1c g     O .bss	00000004 __malloc_max_sbrked_mem
00002c7c g     F .text	00000180 alt_irq_register
0000203c g     F .text	00000034 read_RI_bit
00006a2c g     F .text	000000d4 lseek
000201a8 g     O .rwdata	00000004 _global_impure_ptr
00004874 g     F .text	00000564 _realloc_r
00050c4c g       *ABS*	00000000 __bss_end
00003150 g     F .text	00000108 alt_tick
00001894 g     F .text	0000003c alt_up_audio_open_dev
00002138 g     F .text	0000002c read_data_byte
00005908 g     F .text	00000018 __fp_lock_all
00021d4c g     O .bss	00017700 rightBuffer
00001ccc g     F .text	00000068 alt_up_audio_play_r
000030b4 g     F .text	0000009c alt_alarm_stop
00002070 g     F .text	00000030 read_RE_bit
00021d04 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d8 alt_irq_handler
0001f7b0 g     O .rwdata	00000028 alt_dev_null
000022e8 g     F .text	00000074 alt_up_ps2_write_data_byte
00002924 g     F .text	00000048 alt_dcache_flush_all
000201bc g       *ABS*	00000000 __ram_rwdata_end
0002018c g     O .rwdata	00000008 alt_dev_list
00006d6c g     F .text	000000f8 write
0000470c g     F .text	000000a0 _putc_r
0001e684 g       *ABS*	00000000 __ram_rodata_end
00006860 g     F .text	000000b0 fstat
00006798 g     F .text	00000058 .hidden __umodsi3
00050c4c g       *ABS*	00000000 end
00002618 g     F .text	00000098 alt_up_ps2_write_fd
00000ea8 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
08000000 g       *ABS*	00000000 __alt_stack_pointer
00001820 g     F .text	00000074 alt_avalon_timer_sc_init
00001580 g     F .text	00000224 altera_avalon_jtag_uart_write
000058f8 g     F .text	00000004 __sfp_lock_acquire
00004308 g     F .text	000000e4 memchr
00005a5c g     F .text	00000310 _free_r
00000994 g     F .text	0000022c alt_printf
00005170 g     F .text	00000180 __call_exitprocs
000201b0 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000004c _start
00021d08 g     O .bss	00000004 _alt_tick_rate
00001e7c g     F .text	00000108 alt_up_audio_write_fifo
00021d0c g     O .bss	00000004 _alt_nticks
00006b84 g     F .text	000000fc read
00000ca4 g     F .text	000000a0 alt_sys_init
00001d9c g     F .text	000000e0 alt_up_audio_read_fifo
000019d0 g     F .text	00000058 alt_up_audio_disable_write_interrupt
00002534 g     F .text	00000058 alt_up_ps2_clear_fifo
0000120c g     F .text	00000068 altera_avalon_jtag_uart_close
0001e684 g       *ABS*	00000000 __ram_rwdata_start
00006e64 g       *ABS*	00000000 __ram_rodata_start
00021d24 g     O .bss	00000028 __malloc_current_mallinfo
00006e64 g     O .rodata	00017700 tone_c
00000d44 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00003384 g     F .text	000000a4 alt_get_fd
00006374 g     F .text	00000054 _close_r
0000197c g     F .text	00000054 alt_up_audio_enable_write_interrupt
000043ec g     F .text	0000007c memcmp
00000294 g     F .text	000004fc playNote
00000e04 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00050c4c g       *ABS*	00000000 __alt_stack_base
00000e54 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000501c g     F .text	00000154 __swsetup_r
00001924 g     F .text	00000058 alt_up_audio_disable_read_interrupt
000057b8 g     F .text	00000118 __sfp
0001fd7c g     O .rwdata	00000408 __malloc_av_
00005904 g     F .text	00000004 __sinit_lock_release
000061d8 g     F .text	00000054 __sread
0000327c g     F .text	00000108 alt_find_file
000029d4 g     F .text	000000a4 alt_dev_llist_insert
00006b00 g     F .text	00000024 __malloc_lock
00006c80 g     F .text	000000b0 sbrk
0000550c g     F .text	0000005c _fflush_r
00021cf4 g       *ABS*	00000000 __bss_start
000060b0 g     F .text	00000128 memset
00000790 g     F .text	000000ac main
00001c6c g     F .text	00000060 alt_up_audio_write_fifo_space
00021d00 g     O .bss	00000004 alt_envp
00021d18 g     O .bss	00000004 __malloc_max_total_mem
00000da4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00005004 g     F .text	00000018 __swbuf
0000630c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
000064b8 g     F .text	00000014 fclose
000024c4 g     F .text	00000070 alt_up_ps2_read_data_byte
00003afc g     F .text	0000080c _malloc_r
00020198 g     O .rwdata	00000004 alt_errno
00005d6c g     F .text	000000c4 _fwalk
000026b0 g     F .text	0000003c alt_up_ps2_open_dev
000047ac g     F .text	000000c8 putc
0000663c g     F .text	00000084 .hidden __divsi3
00005938 g     F .text	00000124 _malloc_trim_r
0000222c g     F .text	0000005c alt_up_ps2_enable_read_interrupt
00006e64 g       *ABS*	00000000 __flash_rodata_start
00000c6c g     F .text	00000038 alt_irq_init
00003050 g     F .text	00000064 alt_release_fd
00002104 g     F .text	00000034 read_data_valid
000023c4 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00006314 g     F .text	00000060 _write_r
000201ac g     O .rwdata	00000004 _impure_ptr
00021cf8 g     O .bss	00000004 alt_argc
000052f0 g     F .text	0000021c __sflush_r
00000020 g       .exceptions	00000000 alt_irq_entry
00005920 g     F .text	00000018 __fp_unlock_all
00020184 g     O .rwdata	00000008 alt_fs_list
00001c04 g     F .text	00000068 alt_up_audio_record_l
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
000201bc g       *ABS*	00000000 _edata
00050c4c g       *ABS*	00000000 _end
00000248 g       *ABS*	00000000 __ram_exceptions_end
00001274 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000358c g     F .text	0000009c _fputs_r
00001d34 g     F .text	00000068 alt_up_audio_play_l
00006234 g     F .text	0000007c __swrite
000201b4 g     O .rwdata	00000004 __malloc_trim_threshold
00003554 g     F .text	00000038 exit
00005e30 g     F .text	000000c4 _fwalk_reent
00002164 g     F .text	000000c8 alt_up_ps2_init
000066c0 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000058fc g     F .text	00000004 __sfp_lock_release
000067f0 g     F .text	00000034 _exit
000026ec g     F .text	0000012c alt_alarm_start
00005ef4 g     F .text	000001bc __smakebuf_r
0000235c g     F .text	00000068 alt_up_ps2_wait_for_ack
00004e2c g     F .text	00000098 strlen
0003944c g     O .bss	00017700 leftBuffer
00002efc g     F .text	00000154 open
00000bc0 g     F .text	0000003c alt_putchar
00002b08 g     F .text	00000034 alt_icache_flush_all
00003628 g     F .text	00000018 fputs
0002019c g     O .rwdata	00000004 alt_priority_mask
0000258c g     F .text	0000008c alt_up_ps2_read_fd
000201a0 g     O .rwdata	00000008 alt_alarm_list
00002854 g     F .text	000000d0 close
000008a4 g     F .text	00000084 alt_load
000018d0 g     F .text	00000054 alt_up_audio_enable_read_interrupt
00005900 g     F .text	00000004 __sinit_lock_acquire
00001a28 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_onchip_memory2_0+0xf7bfc004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800174 	movhi	r2,5
 140:	1082d304 	addi	r2,r2,2892
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800174 	movhi	r2,5
 158:	1082d304 	addi	r2,r2,2892
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_onchip_memory2_0+0xf7bfc12c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_onchip_memory2_0+0xf7bfc120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a6e317 	ldw	r2,-25716(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a6e317 	ldw	r2,-25716(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     24c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     254:	00bffd16 	blt	zero,r2,24c <__alt_mem_onchip_memory2_0+0xf7bfc24c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     258:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     25c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     260:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     264:	d6a06114 	ori	gp,gp,33156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     268:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     26c:	10873d14 	ori	r2,r2,7412

    movhi r3, %hi(__bss_end)
     270:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
     274:	18c31314 	ori	r3,r3,3148

    beq r2, r3, 1f
     278:	10c00326 	beq	r2,r3,288 <_start+0x40>

0:
    stw zero, (r2)
     27c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     284:	10fffd36 	bltu	r2,r3,27c <__alt_mem_onchip_memory2_0+0xf7bfc27c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     288:	00008a40 	call	8a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     28c:	00009280 	call	928 <alt_main>

00000290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     290:	003fff06 	br	290 <__alt_mem_onchip_memory2_0+0xf7bfc290>

00000294 <playNote>:

int leftBuffer[BUF_SIZE];
int rightBuffer[BUF_SIZE];

void playNote(alt_up_audio_dev *audio, unsigned char psChar)
{
     294:	defffb04 	addi	sp,sp,-20
     298:	dfc00415 	stw	ra,16(sp)
     29c:	df000315 	stw	fp,12(sp)
     2a0:	df000304 	addi	fp,sp,12
     2a4:	e13ffe15 	stw	r4,-8(fp)
     2a8:	2805883a 	mov	r2,r5
     2ac:	e0bfff05 	stb	r2,-4(fp)
    //unsigned int testBuff;
    alt_up_audio_reset_audio_core(audio);
     2b0:	e13ffe17 	ldw	r4,-8(fp)
     2b4:	0001aa80 	call	1aa8 <alt_up_audio_reset_audio_core>
    int i;
    if (psChar == 0x1c) // C NOTE
     2b8:	e0bfff03 	ldbu	r2,-4(fp)
     2bc:	10800718 	cmpnei	r2,r2,28
     2c0:	1000211e 	bne	r2,zero,348 <playNote+0xb4>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b100000000000000000);
     2c4:	00c000b4 	movhi	r3,2
     2c8:	00821074 	movhi	r2,2113
     2cc:	10a43c04 	addi	r2,r2,-28432
     2d0:	10c00035 	stwio	r3,0(r2)
        //IOWR_8DIRECT(audio, 0, 0x8);
        //IOWR_8DIRECT(audio, 0, 0x0);
        for (i = 0; i <= 24000; i++)
     2d4:	e03ffd15 	stw	zero,-12(fp)
     2d8:	00001706 	br	338 <playNote+0xa4>
        {
            //IOWR_32DIRECT(0x8409058, 0, 0xFFFFFFFF);
            //IOWR_32DIRECT(0x840905C, 0, tone_c[i]);
            //IOWR(audio->base,2, tone_c[i]);
            //IOWR(audio->base,3, tone_c[i]);
            alt_up_audio_play_l(audio, &(tone_c[i]), 1);
     2dc:	e0bffd17 	ldw	r2,-12(fp)
     2e0:	1085883a 	add	r2,r2,r2
     2e4:	1087883a 	add	r3,r2,r2
     2e8:	00800034 	movhi	r2,0
     2ec:	109b9904 	addi	r2,r2,28260
     2f0:	1885883a 	add	r2,r3,r2
     2f4:	01800044 	movi	r6,1
     2f8:	100b883a 	mov	r5,r2
     2fc:	e13ffe17 	ldw	r4,-8(fp)
     300:	0001d340 	call	1d34 <alt_up_audio_play_l>
            alt_up_audio_play_r(audio, &(tone_c[i]), 1);
     304:	e0bffd17 	ldw	r2,-12(fp)
     308:	1085883a 	add	r2,r2,r2
     30c:	1087883a 	add	r3,r2,r2
     310:	00800034 	movhi	r2,0
     314:	109b9904 	addi	r2,r2,28260
     318:	1885883a 	add	r2,r3,r2
     31c:	01800044 	movi	r6,1
     320:	100b883a 	mov	r5,r2
     324:	e13ffe17 	ldw	r4,-8(fp)
     328:	0001ccc0 	call	1ccc <alt_up_audio_play_r>
    if (psChar == 0x1c) // C NOTE
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b100000000000000000);
        //IOWR_8DIRECT(audio, 0, 0x8);
        //IOWR_8DIRECT(audio, 0, 0x0);
        for (i = 0; i <= 24000; i++)
     32c:	e0bffd17 	ldw	r2,-12(fp)
     330:	10800044 	addi	r2,r2,1
     334:	e0bffd15 	stw	r2,-12(fp)
     338:	e0bffd17 	ldw	r2,-12(fp)
     33c:	10977050 	cmplti	r2,r2,24001
     340:	103fe61e 	bne	r2,zero,2dc <__alt_mem_onchip_memory2_0+0xf7bfc2dc>
    }
    else
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000000000);
    }
}
     344:	00010c06 	br	778 <playNote+0x4e4>
            //alt_up_audio_write_fifo(audio, &(tone_c[i]), 1, ALT_UP_AUDIO_RIGHT);
            //alt_up_audio_write_fifo(audio, &(tone_c[i]), 1, ALT_UP_AUDIO_LEFT);
            // write audio buffer
        }
    }
    else if (psChar == 0x1d) // C# NTOE
     348:	e0bfff03 	ldbu	r2,-4(fp)
     34c:	10800758 	cmpnei	r2,r2,29
     350:	1000131e 	bne	r2,zero,3a0 <playNote+0x10c>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b010000000000000000);
     354:	00c00074 	movhi	r3,1
     358:	00821074 	movhi	r2,2113
     35c:	10a43c04 	addi	r2,r2,-28432
     360:	10c00035 	stwio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x8);
     364:	00c00204 	movi	r3,8
     368:	e0bffe17 	ldw	r2,-8(fp)
     36c:	10c00025 	stbio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x0);
     370:	0007883a 	mov	r3,zero
     374:	e0bffe17 	ldw	r2,-8(fp)
     378:	10c00025 	stbio	r3,0(r2)
        for (i = 0; i <= 24000; i++)
     37c:	e03ffd15 	stw	zero,-12(fp)
     380:	00000306 	br	390 <playNote+0xfc>
     384:	e0bffd17 	ldw	r2,-12(fp)
     388:	10800044 	addi	r2,r2,1
     38c:	e0bffd15 	stw	r2,-12(fp)
     390:	e0bffd17 	ldw	r2,-12(fp)
     394:	10977050 	cmplti	r2,r2,24001
     398:	103ffa1e 	bne	r2,zero,384 <__alt_mem_onchip_memory2_0+0xf7bfc384>
    }
    else
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000000000);
    }
}
     39c:	0000f606 	br	778 <playNote+0x4e4>
        {
            //alt_up_audio_play_l(audio, &(tone_c_sharp[i]), 1);
           // alt_up_audio_play_r(audio, &(tone_c_sharp[i]), 1);
        }
    }
    else if (psChar == 0x1b) // D NOTE
     3a0:	e0bfff03 	ldbu	r2,-4(fp)
     3a4:	108006d8 	cmpnei	r2,r2,27
     3a8:	1000131e 	bne	r2,zero,3f8 <playNote+0x164>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b001000000000000000);
     3ac:	00e00014 	movui	r3,32768
     3b0:	00821074 	movhi	r2,2113
     3b4:	10a43c04 	addi	r2,r2,-28432
     3b8:	10c00035 	stwio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x8);
     3bc:	00c00204 	movi	r3,8
     3c0:	e0bffe17 	ldw	r2,-8(fp)
     3c4:	10c00025 	stbio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x0);
     3c8:	0007883a 	mov	r3,zero
     3cc:	e0bffe17 	ldw	r2,-8(fp)
     3d0:	10c00025 	stbio	r3,0(r2)
        for (i = 0; i <= 24000; i++)
     3d4:	e03ffd15 	stw	zero,-12(fp)
     3d8:	00000306 	br	3e8 <playNote+0x154>
     3dc:	e0bffd17 	ldw	r2,-12(fp)
     3e0:	10800044 	addi	r2,r2,1
     3e4:	e0bffd15 	stw	r2,-12(fp)
     3e8:	e0bffd17 	ldw	r2,-12(fp)
     3ec:	10977050 	cmplti	r2,r2,24001
     3f0:	103ffa1e 	bne	r2,zero,3dc <__alt_mem_onchip_memory2_0+0xf7bfc3dc>
    }
    else
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000000000);
    }
}
     3f4:	0000e006 	br	778 <playNote+0x4e4>
        {
         //   alt_up_audio_play_l(audio, &(tone_d[i]), 1);
        //    alt_up_audio_play_r(audio, &(tone_d[i]), 1);
        }
    }
    else if (psChar == 0x24) //D# NOTE
     3f8:	e0bfff03 	ldbu	r2,-4(fp)
     3fc:	10800918 	cmpnei	r2,r2,36
     400:	1000131e 	bne	r2,zero,450 <playNote+0x1bc>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000100000000000000);
     404:	00d00004 	movi	r3,16384
     408:	00821074 	movhi	r2,2113
     40c:	10a43c04 	addi	r2,r2,-28432
     410:	10c00035 	stwio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x8);
     414:	00c00204 	movi	r3,8
     418:	e0bffe17 	ldw	r2,-8(fp)
     41c:	10c00025 	stbio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x0);
     420:	0007883a 	mov	r3,zero
     424:	e0bffe17 	ldw	r2,-8(fp)
     428:	10c00025 	stbio	r3,0(r2)
        for (i = 0; i <= 24000; i++)
     42c:	e03ffd15 	stw	zero,-12(fp)
     430:	00000306 	br	440 <playNote+0x1ac>
     434:	e0bffd17 	ldw	r2,-12(fp)
     438:	10800044 	addi	r2,r2,1
     43c:	e0bffd15 	stw	r2,-12(fp)
     440:	e0bffd17 	ldw	r2,-12(fp)
     444:	10977050 	cmplti	r2,r2,24001
     448:	103ffa1e 	bne	r2,zero,434 <__alt_mem_onchip_memory2_0+0xf7bfc434>
    }
    else
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000000000);
    }
}
     44c:	0000ca06 	br	778 <playNote+0x4e4>
        {
         //   alt_up_audio_play_l(audio, &(tone_d_sharp[i]), 1);
         //   alt_up_audio_play_r(audio, &(tone_d_sharp[i]), 1);
        }
    }
    else if (psChar == 0x23) //E NOTE
     450:	e0bfff03 	ldbu	r2,-4(fp)
     454:	108008d8 	cmpnei	r2,r2,35
     458:	1000131e 	bne	r2,zero,4a8 <playNote+0x214>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000010000000000000);
     45c:	00c80004 	movi	r3,8192
     460:	00821074 	movhi	r2,2113
     464:	10a43c04 	addi	r2,r2,-28432
     468:	10c00035 	stwio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x8);
     46c:	00c00204 	movi	r3,8
     470:	e0bffe17 	ldw	r2,-8(fp)
     474:	10c00025 	stbio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x0);
     478:	0007883a 	mov	r3,zero
     47c:	e0bffe17 	ldw	r2,-8(fp)
     480:	10c00025 	stbio	r3,0(r2)
        for (i = 0; i <= 24000; i++)
     484:	e03ffd15 	stw	zero,-12(fp)
     488:	00000306 	br	498 <playNote+0x204>
     48c:	e0bffd17 	ldw	r2,-12(fp)
     490:	10800044 	addi	r2,r2,1
     494:	e0bffd15 	stw	r2,-12(fp)
     498:	e0bffd17 	ldw	r2,-12(fp)
     49c:	10977050 	cmplti	r2,r2,24001
     4a0:	103ffa1e 	bne	r2,zero,48c <__alt_mem_onchip_memory2_0+0xf7bfc48c>
    }
    else
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000000000);
    }
}
     4a4:	0000b406 	br	778 <playNote+0x4e4>
        {
         //   alt_up_audio_play_l(audio, &(tone_e[i]), 1);
         //   alt_up_audio_play_r(audio, &(tone_e[i]), 1);
        }
    }
    else if (psChar == 0x2b) //F
     4a8:	e0bfff03 	ldbu	r2,-4(fp)
     4ac:	10800ad8 	cmpnei	r2,r2,43
     4b0:	1000131e 	bne	r2,zero,500 <playNote+0x26c>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000001000000000000);
     4b4:	00c40004 	movi	r3,4096
     4b8:	00821074 	movhi	r2,2113
     4bc:	10a43c04 	addi	r2,r2,-28432
     4c0:	10c00035 	stwio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x8);
     4c4:	00c00204 	movi	r3,8
     4c8:	e0bffe17 	ldw	r2,-8(fp)
     4cc:	10c00025 	stbio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x0);
     4d0:	0007883a 	mov	r3,zero
     4d4:	e0bffe17 	ldw	r2,-8(fp)
     4d8:	10c00025 	stbio	r3,0(r2)
        for (i = 0; i <= 24000; i++)
     4dc:	e03ffd15 	stw	zero,-12(fp)
     4e0:	00000306 	br	4f0 <playNote+0x25c>
     4e4:	e0bffd17 	ldw	r2,-12(fp)
     4e8:	10800044 	addi	r2,r2,1
     4ec:	e0bffd15 	stw	r2,-12(fp)
     4f0:	e0bffd17 	ldw	r2,-12(fp)
     4f4:	10977050 	cmplti	r2,r2,24001
     4f8:	103ffa1e 	bne	r2,zero,4e4 <__alt_mem_onchip_memory2_0+0xf7bfc4e4>
    }
    else
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000000000);
    }
}
     4fc:	00009e06 	br	778 <playNote+0x4e4>
        {
          //  alt_up_audio_play_l(audio, &(tone_f[i]), 1);
          //  alt_up_audio_play_r(audio, &(tone_f[i]), 1);
        }
    }
    else if (psChar == 0x2c) //F#
     500:	e0bfff03 	ldbu	r2,-4(fp)
     504:	10800b18 	cmpnei	r2,r2,44
     508:	1000131e 	bne	r2,zero,558 <playNote+0x2c4>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000100000000000);
     50c:	00c20004 	movi	r3,2048
     510:	00821074 	movhi	r2,2113
     514:	10a43c04 	addi	r2,r2,-28432
     518:	10c00035 	stwio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x8);
     51c:	00c00204 	movi	r3,8
     520:	e0bffe17 	ldw	r2,-8(fp)
     524:	10c00025 	stbio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x0);
     528:	0007883a 	mov	r3,zero
     52c:	e0bffe17 	ldw	r2,-8(fp)
     530:	10c00025 	stbio	r3,0(r2)
        for (i = 0; i <= 24000; i++)
     534:	e03ffd15 	stw	zero,-12(fp)
     538:	00000306 	br	548 <playNote+0x2b4>
     53c:	e0bffd17 	ldw	r2,-12(fp)
     540:	10800044 	addi	r2,r2,1
     544:	e0bffd15 	stw	r2,-12(fp)
     548:	e0bffd17 	ldw	r2,-12(fp)
     54c:	10977050 	cmplti	r2,r2,24001
     550:	103ffa1e 	bne	r2,zero,53c <__alt_mem_onchip_memory2_0+0xf7bfc53c>
    }
    else
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000000000);
    }
}
     554:	00008806 	br	778 <playNote+0x4e4>
        {
          //  alt_up_audio_play_l(audio, &(tone_f_sharp[i]), 1);
          //  alt_up_audio_play_r(audio, &(tone_f_sharp[i]), 1);
        }
    }
    else if (psChar == 0x34) //G
     558:	e0bfff03 	ldbu	r2,-4(fp)
     55c:	10800d18 	cmpnei	r2,r2,52
     560:	1000131e 	bne	r2,zero,5b0 <playNote+0x31c>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000010000000000);
     564:	00c10004 	movi	r3,1024
     568:	00821074 	movhi	r2,2113
     56c:	10a43c04 	addi	r2,r2,-28432
     570:	10c00035 	stwio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x8);
     574:	00c00204 	movi	r3,8
     578:	e0bffe17 	ldw	r2,-8(fp)
     57c:	10c00025 	stbio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x0);
     580:	0007883a 	mov	r3,zero
     584:	e0bffe17 	ldw	r2,-8(fp)
     588:	10c00025 	stbio	r3,0(r2)
        for (i = 0; i <= 24000; i++)
     58c:	e03ffd15 	stw	zero,-12(fp)
     590:	00000306 	br	5a0 <playNote+0x30c>
     594:	e0bffd17 	ldw	r2,-12(fp)
     598:	10800044 	addi	r2,r2,1
     59c:	e0bffd15 	stw	r2,-12(fp)
     5a0:	e0bffd17 	ldw	r2,-12(fp)
     5a4:	10977050 	cmplti	r2,r2,24001
     5a8:	103ffa1e 	bne	r2,zero,594 <__alt_mem_onchip_memory2_0+0xf7bfc594>
    }
    else
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000000000);
    }
}
     5ac:	00007206 	br	778 <playNote+0x4e4>
        {
         //   alt_up_audio_play_l(audio, &(tone_g[i]), 1);
         //   alt_up_audio_play_r(audio, &(tone_g[i]), 1);
        }
    }
    else if (psChar == 0x35) //G#
     5b0:	e0bfff03 	ldbu	r2,-4(fp)
     5b4:	10800d58 	cmpnei	r2,r2,53
     5b8:	1000131e 	bne	r2,zero,608 <playNote+0x374>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000001000000000);
     5bc:	00c08004 	movi	r3,512
     5c0:	00821074 	movhi	r2,2113
     5c4:	10a43c04 	addi	r2,r2,-28432
     5c8:	10c00035 	stwio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x8);
     5cc:	00c00204 	movi	r3,8
     5d0:	e0bffe17 	ldw	r2,-8(fp)
     5d4:	10c00025 	stbio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x0);
     5d8:	0007883a 	mov	r3,zero
     5dc:	e0bffe17 	ldw	r2,-8(fp)
     5e0:	10c00025 	stbio	r3,0(r2)
        for (i = 0; i <= 24000; i++)
     5e4:	e03ffd15 	stw	zero,-12(fp)
     5e8:	00000306 	br	5f8 <playNote+0x364>
     5ec:	e0bffd17 	ldw	r2,-12(fp)
     5f0:	10800044 	addi	r2,r2,1
     5f4:	e0bffd15 	stw	r2,-12(fp)
     5f8:	e0bffd17 	ldw	r2,-12(fp)
     5fc:	10977050 	cmplti	r2,r2,24001
     600:	103ffa1e 	bne	r2,zero,5ec <__alt_mem_onchip_memory2_0+0xf7bfc5ec>
    }
    else
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000000000);
    }
}
     604:	00005c06 	br	778 <playNote+0x4e4>
        {
        //    alt_up_audio_play_l(audio, &(tone_g_sharp[i]), 1);
         //   alt_up_audio_play_r(audio, &(tone_g_sharp[i]), 1);
        }
    }
    else if (psChar == 0x33) //A
     608:	e0bfff03 	ldbu	r2,-4(fp)
     60c:	10800cd8 	cmpnei	r2,r2,51
     610:	1000131e 	bne	r2,zero,660 <playNote+0x3cc>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000100000000);
     614:	00c04004 	movi	r3,256
     618:	00821074 	movhi	r2,2113
     61c:	10a43c04 	addi	r2,r2,-28432
     620:	10c00035 	stwio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x8);
     624:	00c00204 	movi	r3,8
     628:	e0bffe17 	ldw	r2,-8(fp)
     62c:	10c00025 	stbio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x0);
     630:	0007883a 	mov	r3,zero
     634:	e0bffe17 	ldw	r2,-8(fp)
     638:	10c00025 	stbio	r3,0(r2)
        for (i = 0; i <= 24000; i++)
     63c:	e03ffd15 	stw	zero,-12(fp)
     640:	00000306 	br	650 <playNote+0x3bc>
     644:	e0bffd17 	ldw	r2,-12(fp)
     648:	10800044 	addi	r2,r2,1
     64c:	e0bffd15 	stw	r2,-12(fp)
     650:	e0bffd17 	ldw	r2,-12(fp)
     654:	10977050 	cmplti	r2,r2,24001
     658:	103ffa1e 	bne	r2,zero,644 <__alt_mem_onchip_memory2_0+0xf7bfc644>
    }
    else
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000000000);
    }
}
     65c:	00004606 	br	778 <playNote+0x4e4>
        {
        //    alt_up_audio_play_l(audio, &(tone_a[i]), 1);
        //    alt_up_audio_play_r(audio, &(tone_a[i]), 1);
        }
    }
    else if (psChar == 0x3c) //A#
     660:	e0bfff03 	ldbu	r2,-4(fp)
     664:	10800f18 	cmpnei	r2,r2,60
     668:	1000131e 	bne	r2,zero,6b8 <playNote+0x424>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000010000000);
     66c:	00c02004 	movi	r3,128
     670:	00821074 	movhi	r2,2113
     674:	10a43c04 	addi	r2,r2,-28432
     678:	10c00035 	stwio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x8);
     67c:	00c00204 	movi	r3,8
     680:	e0bffe17 	ldw	r2,-8(fp)
     684:	10c00025 	stbio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x0);
     688:	0007883a 	mov	r3,zero
     68c:	e0bffe17 	ldw	r2,-8(fp)
     690:	10c00025 	stbio	r3,0(r2)
        for (i = 0; i <= 24000; i++)
     694:	e03ffd15 	stw	zero,-12(fp)
     698:	00000306 	br	6a8 <playNote+0x414>
     69c:	e0bffd17 	ldw	r2,-12(fp)
     6a0:	10800044 	addi	r2,r2,1
     6a4:	e0bffd15 	stw	r2,-12(fp)
     6a8:	e0bffd17 	ldw	r2,-12(fp)
     6ac:	10977050 	cmplti	r2,r2,24001
     6b0:	103ffa1e 	bne	r2,zero,69c <__alt_mem_onchip_memory2_0+0xf7bfc69c>
    }
    else
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000000000);
    }
}
     6b4:	00003006 	br	778 <playNote+0x4e4>
        {
         //   alt_up_audio_play_l(audio, &(tone_a_sharp[i]), 1);
         //   alt_up_audio_play_r(audio, &(tone_c_sharp[i]), 1);
        }
    }
    else if (psChar == 0x3b) //B
     6b8:	e0bfff03 	ldbu	r2,-4(fp)
     6bc:	10800ed8 	cmpnei	r2,r2,59
     6c0:	1000131e 	bne	r2,zero,710 <playNote+0x47c>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000001000000);
     6c4:	00c01004 	movi	r3,64
     6c8:	00821074 	movhi	r2,2113
     6cc:	10a43c04 	addi	r2,r2,-28432
     6d0:	10c00035 	stwio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x8);
     6d4:	00c00204 	movi	r3,8
     6d8:	e0bffe17 	ldw	r2,-8(fp)
     6dc:	10c00025 	stbio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x0);
     6e0:	0007883a 	mov	r3,zero
     6e4:	e0bffe17 	ldw	r2,-8(fp)
     6e8:	10c00025 	stbio	r3,0(r2)
        for (i = 0; i <= 24000; i++)
     6ec:	e03ffd15 	stw	zero,-12(fp)
     6f0:	00000306 	br	700 <playNote+0x46c>
     6f4:	e0bffd17 	ldw	r2,-12(fp)
     6f8:	10800044 	addi	r2,r2,1
     6fc:	e0bffd15 	stw	r2,-12(fp)
     700:	e0bffd17 	ldw	r2,-12(fp)
     704:	10977050 	cmplti	r2,r2,24001
     708:	103ffa1e 	bne	r2,zero,6f4 <__alt_mem_onchip_memory2_0+0xf7bfc6f4>
    }
    else
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000000000);
    }
}
     70c:	00001a06 	br	778 <playNote+0x4e4>
        {
         //   alt_up_audio_play_l(audio, &(tone_b[i]), 1);
        //    alt_up_audio_play_r(audio, &(tone_b[i]), 1);
        }
    }
    else if (psChar == 0x42) //C Octave
     710:	e0bfff03 	ldbu	r2,-4(fp)
     714:	10801098 	cmpnei	r2,r2,66
     718:	1000131e 	bne	r2,zero,768 <playNote+0x4d4>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000100000);
     71c:	00c00804 	movi	r3,32
     720:	00821074 	movhi	r2,2113
     724:	10a43c04 	addi	r2,r2,-28432
     728:	10c00035 	stwio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x8);
     72c:	00c00204 	movi	r3,8
     730:	e0bffe17 	ldw	r2,-8(fp)
     734:	10c00025 	stbio	r3,0(r2)
        IOWR_8DIRECT(audio, 0, 0x0);
     738:	0007883a 	mov	r3,zero
     73c:	e0bffe17 	ldw	r2,-8(fp)
     740:	10c00025 	stbio	r3,0(r2)
        for (i = 0; i <= 24000; i++)
     744:	e03ffd15 	stw	zero,-12(fp)
     748:	00000306 	br	758 <playNote+0x4c4>
     74c:	e0bffd17 	ldw	r2,-12(fp)
     750:	10800044 	addi	r2,r2,1
     754:	e0bffd15 	stw	r2,-12(fp)
     758:	e0bffd17 	ldw	r2,-12(fp)
     75c:	10977050 	cmplti	r2,r2,24001
     760:	103ffa1e 	bne	r2,zero,74c <__alt_mem_onchip_memory2_0+0xf7bfc74c>
    }
    else
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000000000);
    }
}
     764:	00000406 	br	778 <playNote+0x4e4>
            //alt_up_audio_play_r(audio, &(tone_c[i]), 1);
        }
    }
    else
    {
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0b000000000000000000);
     768:	0007883a 	mov	r3,zero
     76c:	00821074 	movhi	r2,2113
     770:	10a43c04 	addi	r2,r2,-28432
     774:	10c00035 	stwio	r3,0(r2)
    }
}
     778:	0001883a 	nop
     77c:	e037883a 	mov	sp,fp
     780:	dfc00117 	ldw	ra,4(sp)
     784:	df000017 	ldw	fp,0(sp)
     788:	dec00204 	addi	sp,sp,8
     78c:	f800283a 	ret

00000790 <main>:

int main(void)
{
     790:	defffb04 	addi	sp,sp,-20
     794:	dfc00415 	stw	ra,16(sp)
     798:	df000315 	stw	fp,12(sp)
     79c:	df000304 	addi	fp,sp,12
    //alt_up_ps2_dev ps2S = {.base = PS2_0_BASE,.irq_id = PS2_0_IRQ,.timeout = 0,.device_type = 1}; //manually setting ps2 variables
    alt_up_ps2_dev *ps2S;
    ps2S = alt_up_ps2_open_dev("/dev/ps2_0");
     7a0:	010000b4 	movhi	r4,2
     7a4:	21395904 	addi	r4,r4,-6812
     7a8:	00026b00 	call	26b0 <alt_up_ps2_open_dev>
     7ac:	e0bffd15 	stw	r2,-12(fp)
    //alt_up_ps2_dev ps2S; // calling with no
    //alt_up_ps2_dev *ps2SP =  &ps2S;  //using a pointer instatiaon
    unsigned char psChar;
    //alt_up_ps2_enable_read_interrupt(ps2S);
    alt_up_ps2_init(ps2S); //suppossed to set device type does not
     7b0:	e13ffd17 	ldw	r4,-12(fp)
     7b4:	00021640 	call	2164 <alt_up_ps2_init>
    alt_up_ps2_clear_fifo(ps2S);
     7b8:	e13ffd17 	ldw	r4,-12(fp)
     7bc:	00025340 	call	2534 <alt_up_ps2_clear_fifo>
    ps2S->device_type = PS2_KEYBOARD;
     7c0:	e0bffd17 	ldw	r2,-12(fp)
     7c4:	00c00044 	movi	r3,1
     7c8:	10c00d15 	stw	r3,52(r2)
    //alt_up_ps2_init(ps2SP); // sending in pointer
    alt_putstr("instantiaion not lost in an endless loop\n");
     7cc:	010000b4 	movhi	r4,2
     7d0:	21395c04 	addi	r4,r4,-6800
     7d4:	0000bfc0 	call	bfc <alt_putstr>
    // alt_up_av_config_dev * audioSC;
    //  audioSC = alt_up_av_config_open_dev("/dev/audio_and_video_config_0");
    // audioSC->type = 1;

    alt_up_audio_dev *audioS;
    audioS = alt_up_ps2_open_dev("/dev/audio_subsystem_Audio");
     7d8:	010000b4 	movhi	r4,2
     7dc:	21396704 	addi	r4,r4,-6756
     7e0:	00026b00 	call	26b0 <alt_up_ps2_open_dev>
     7e4:	e0bffe15 	stw	r2,-8(fp)
    if (audioS == NULL)
     7e8:	e0bffe17 	ldw	r2,-8(fp)
     7ec:	1000041e 	bne	r2,zero,800 <main+0x70>
        alt_printf("Error: could not open audio device \n");
     7f0:	010000b4 	movhi	r4,2
     7f4:	21396e04 	addi	r4,r4,-6728
     7f8:	00009940 	call	994 <alt_printf>
     7fc:	00000306 	br	80c <main+0x7c>
    else
        alt_printf("Opened audio device \n");
     800:	010000b4 	movhi	r4,2
     804:	21397804 	addi	r4,r4,-6688
     808:	00009940 	call	994 <alt_printf>
    }
    */
    while (1)
    {
        //alt_up_ps2_read_data_byte(ps2S, psChar); //should read from ps2 ERROR: address of data reg is completly wrong
        psChar = IORD_8DIRECT(ps2S->base, 0); //reads directly from info
     80c:	e0bffd17 	ldw	r2,-12(fp)
     810:	10800a17 	ldw	r2,40(r2)
     814:	10800023 	ldbuio	r2,0(r2)
     818:	10803fcc 	andi	r2,r2,255
     81c:	e0bfff05 	stb	r2,-4(fp)
        alt_up_ps2_clear_fifo(ps2S);
     820:	e13ffd17 	ldw	r4,-12(fp)
     824:	00025340 	call	2534 <alt_up_ps2_clear_fifo>
        playNote(audioS, psChar);
     828:	e0bfff03 	ldbu	r2,-4(fp)
     82c:	100b883a 	mov	r5,r2
     830:	e13ffe17 	ldw	r4,-8(fp)
     834:	00002940 	call	294 <playNote>
    }
     838:	003ff406 	br	80c <__alt_mem_onchip_memory2_0+0xf7bfc80c>

0000083c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     83c:	defffc04 	addi	sp,sp,-16
     840:	df000315 	stw	fp,12(sp)
     844:	df000304 	addi	fp,sp,12
     848:	e13ffd15 	stw	r4,-12(fp)
     84c:	e17ffe15 	stw	r5,-8(fp)
     850:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     854:	e0fffe17 	ldw	r3,-8(fp)
     858:	e0bffd17 	ldw	r2,-12(fp)
     85c:	18800c26 	beq	r3,r2,890 <alt_load_section+0x54>
  {
    while( to != end )
     860:	00000806 	br	884 <alt_load_section+0x48>
    {
      *to++ = *from++;
     864:	e0bffe17 	ldw	r2,-8(fp)
     868:	10c00104 	addi	r3,r2,4
     86c:	e0fffe15 	stw	r3,-8(fp)
     870:	e0fffd17 	ldw	r3,-12(fp)
     874:	19000104 	addi	r4,r3,4
     878:	e13ffd15 	stw	r4,-12(fp)
     87c:	18c00017 	ldw	r3,0(r3)
     880:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     884:	e0fffe17 	ldw	r3,-8(fp)
     888:	e0bfff17 	ldw	r2,-4(fp)
     88c:	18bff51e 	bne	r3,r2,864 <__alt_mem_onchip_memory2_0+0xf7bfc864>
    {
      *to++ = *from++;
    }
  }
}
     890:	0001883a 	nop
     894:	e037883a 	mov	sp,fp
     898:	df000017 	ldw	fp,0(sp)
     89c:	dec00104 	addi	sp,sp,4
     8a0:	f800283a 	ret

000008a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     8a4:	defffe04 	addi	sp,sp,-8
     8a8:	dfc00115 	stw	ra,4(sp)
     8ac:	df000015 	stw	fp,0(sp)
     8b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     8b4:	018000b4 	movhi	r6,2
     8b8:	31806f04 	addi	r6,r6,444
     8bc:	014000b4 	movhi	r5,2
     8c0:	2979a104 	addi	r5,r5,-6524
     8c4:	010000b4 	movhi	r4,2
     8c8:	21006f04 	addi	r4,r4,444
     8cc:	000083c0 	call	83c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     8d0:	01800034 	movhi	r6,0
     8d4:	31809204 	addi	r6,r6,584
     8d8:	01400034 	movhi	r5,0
     8dc:	29400804 	addi	r5,r5,32
     8e0:	01000034 	movhi	r4,0
     8e4:	21000804 	addi	r4,r4,32
     8e8:	000083c0 	call	83c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     8ec:	018000b4 	movhi	r6,2
     8f0:	31b9a104 	addi	r6,r6,-6524
     8f4:	01400034 	movhi	r5,0
     8f8:	295b9904 	addi	r5,r5,28260
     8fc:	01000034 	movhi	r4,0
     900:	211b9904 	addi	r4,r4,28260
     904:	000083c0 	call	83c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     908:	00029240 	call	2924 <alt_dcache_flush_all>
  alt_icache_flush_all();
     90c:	0002b080 	call	2b08 <alt_icache_flush_all>
}
     910:	0001883a 	nop
     914:	e037883a 	mov	sp,fp
     918:	dfc00117 	ldw	ra,4(sp)
     91c:	df000017 	ldw	fp,0(sp)
     920:	dec00204 	addi	sp,sp,8
     924:	f800283a 	ret

00000928 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     928:	defffd04 	addi	sp,sp,-12
     92c:	dfc00215 	stw	ra,8(sp)
     930:	df000115 	stw	fp,4(sp)
     934:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     938:	0009883a 	mov	r4,zero
     93c:	0000c6c0 	call	c6c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     940:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     944:	0000ca40 	call	ca4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     948:	018000b4 	movhi	r6,2
     94c:	31b97e04 	addi	r6,r6,-6664
     950:	014000b4 	movhi	r5,2
     954:	29797e04 	addi	r5,r5,-6664
     958:	010000b4 	movhi	r4,2
     95c:	21397e04 	addi	r4,r4,-6664
     960:	0002c000 	call	2c00 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     964:	d0a6dd17 	ldw	r2,-25740(gp)
     968:	d0e6de17 	ldw	r3,-25736(gp)
     96c:	d126df17 	ldw	r4,-25732(gp)
     970:	200d883a 	mov	r6,r4
     974:	180b883a 	mov	r5,r3
     978:	1009883a 	mov	r4,r2
     97c:	00007900 	call	790 <main>
     980:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     984:	01000044 	movi	r4,1
     988:	00028540 	call	2854 <close>
  exit (result);
     98c:	e13fff17 	ldw	r4,-4(fp)
     990:	00035540 	call	3554 <exit>

00000994 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     994:	defff204 	addi	sp,sp,-56
     998:	dfc00a15 	stw	ra,40(sp)
     99c:	df000915 	stw	fp,36(sp)
     9a0:	df000904 	addi	fp,sp,36
     9a4:	e13fff15 	stw	r4,-4(fp)
     9a8:	e1400215 	stw	r5,8(fp)
     9ac:	e1800315 	stw	r6,12(fp)
     9b0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
     9b4:	e0800204 	addi	r2,fp,8
     9b8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
     9bc:	e0bfff17 	ldw	r2,-4(fp)
     9c0:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
     9c4:	00006f06 	br	b84 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     9c8:	e0bff807 	ldb	r2,-32(fp)
     9cc:	10800960 	cmpeqi	r2,r2,37
     9d0:	1000041e 	bne	r2,zero,9e4 <alt_printf+0x50>
        {
            alt_putchar(c);
     9d4:	e0bff807 	ldb	r2,-32(fp)
     9d8:	1009883a 	mov	r4,r2
     9dc:	0000bc00 	call	bc0 <alt_putchar>
     9e0:	00006806 	br	b84 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     9e4:	e0bff717 	ldw	r2,-36(fp)
     9e8:	10c00044 	addi	r3,r2,1
     9ec:	e0fff715 	stw	r3,-36(fp)
     9f0:	10800003 	ldbu	r2,0(r2)
     9f4:	e0bff805 	stb	r2,-32(fp)
     9f8:	e0bff807 	ldb	r2,-32(fp)
     9fc:	10006926 	beq	r2,zero,ba4 <alt_printf+0x210>
            {
                if (c == '%')
     a00:	e0bff807 	ldb	r2,-32(fp)
     a04:	10800958 	cmpnei	r2,r2,37
     a08:	1000041e 	bne	r2,zero,a1c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     a0c:	e0bff807 	ldb	r2,-32(fp)
     a10:	1009883a 	mov	r4,r2
     a14:	0000bc00 	call	bc0 <alt_putchar>
     a18:	00005a06 	br	b84 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
     a1c:	e0bff807 	ldb	r2,-32(fp)
     a20:	108018d8 	cmpnei	r2,r2,99
     a24:	1000081e 	bne	r2,zero,a48 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
     a28:	e0bffe17 	ldw	r2,-8(fp)
     a2c:	10c00104 	addi	r3,r2,4
     a30:	e0fffe15 	stw	r3,-8(fp)
     a34:	10800017 	ldw	r2,0(r2)
     a38:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
     a3c:	e13ffd17 	ldw	r4,-12(fp)
     a40:	0000bc00 	call	bc0 <alt_putchar>
     a44:	00004f06 	br	b84 <alt_printf+0x1f0>
                }
                else if (c == 'x')
     a48:	e0bff807 	ldb	r2,-32(fp)
     a4c:	10801e18 	cmpnei	r2,r2,120
     a50:	1000341e 	bne	r2,zero,b24 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     a54:	e0bffe17 	ldw	r2,-8(fp)
     a58:	10c00104 	addi	r3,r2,4
     a5c:	e0fffe15 	stw	r3,-8(fp)
     a60:	10800017 	ldw	r2,0(r2)
     a64:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     a68:	e0bffb17 	ldw	r2,-20(fp)
     a6c:	1000031e 	bne	r2,zero,a7c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
     a70:	01000c04 	movi	r4,48
     a74:	0000bc00 	call	bc0 <alt_putchar>
                        continue;
     a78:	00004206 	br	b84 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
     a7c:	00800704 	movi	r2,28
     a80:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
     a84:	00000306 	br	a94 <alt_printf+0x100>
                        digit_shift -= 4;
     a88:	e0bff917 	ldw	r2,-28(fp)
     a8c:	10bfff04 	addi	r2,r2,-4
     a90:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     a94:	00c003c4 	movi	r3,15
     a98:	e0bff917 	ldw	r2,-28(fp)
     a9c:	1884983a 	sll	r2,r3,r2
     aa0:	1007883a 	mov	r3,r2
     aa4:	e0bffb17 	ldw	r2,-20(fp)
     aa8:	1884703a 	and	r2,r3,r2
     aac:	103ff626 	beq	r2,zero,a88 <__alt_mem_onchip_memory2_0+0xf7bfca88>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     ab0:	00001906 	br	b18 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     ab4:	00c003c4 	movi	r3,15
     ab8:	e0bff917 	ldw	r2,-28(fp)
     abc:	1884983a 	sll	r2,r3,r2
     ac0:	1007883a 	mov	r3,r2
     ac4:	e0bffb17 	ldw	r2,-20(fp)
     ac8:	1886703a 	and	r3,r3,r2
     acc:	e0bff917 	ldw	r2,-28(fp)
     ad0:	1884d83a 	srl	r2,r3,r2
     ad4:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
     ad8:	e0bffc17 	ldw	r2,-16(fp)
     adc:	108002a8 	cmpgeui	r2,r2,10
     ae0:	1000041e 	bne	r2,zero,af4 <alt_printf+0x160>
                            c = '0' + digit;
     ae4:	e0bffc17 	ldw	r2,-16(fp)
     ae8:	10800c04 	addi	r2,r2,48
     aec:	e0bff805 	stb	r2,-32(fp)
     af0:	00000306 	br	b00 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
     af4:	e0bffc17 	ldw	r2,-16(fp)
     af8:	108015c4 	addi	r2,r2,87
     afc:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
     b00:	e0bff807 	ldb	r2,-32(fp)
     b04:	1009883a 	mov	r4,r2
     b08:	0000bc00 	call	bc0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     b0c:	e0bff917 	ldw	r2,-28(fp)
     b10:	10bfff04 	addi	r2,r2,-4
     b14:	e0bff915 	stw	r2,-28(fp)
     b18:	e0bff917 	ldw	r2,-28(fp)
     b1c:	103fe50e 	bge	r2,zero,ab4 <__alt_mem_onchip_memory2_0+0xf7bfcab4>
     b20:	00001806 	br	b84 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     b24:	e0bff807 	ldb	r2,-32(fp)
     b28:	10801cd8 	cmpnei	r2,r2,115
     b2c:	1000151e 	bne	r2,zero,b84 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     b30:	e0bffe17 	ldw	r2,-8(fp)
     b34:	10c00104 	addi	r3,r2,4
     b38:	e0fffe15 	stw	r3,-8(fp)
     b3c:	10800017 	ldw	r2,0(r2)
     b40:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
     b44:	00000906 	br	b6c <alt_printf+0x1d8>
                      alt_putchar(*s++);
     b48:	e0bffa17 	ldw	r2,-24(fp)
     b4c:	10c00044 	addi	r3,r2,1
     b50:	e0fffa15 	stw	r3,-24(fp)
     b54:	10800003 	ldbu	r2,0(r2)
     b58:	10803fcc 	andi	r2,r2,255
     b5c:	1080201c 	xori	r2,r2,128
     b60:	10bfe004 	addi	r2,r2,-128
     b64:	1009883a 	mov	r4,r2
     b68:	0000bc00 	call	bc0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     b6c:	e0bffa17 	ldw	r2,-24(fp)
     b70:	10800003 	ldbu	r2,0(r2)
     b74:	10803fcc 	andi	r2,r2,255
     b78:	1080201c 	xori	r2,r2,128
     b7c:	10bfe004 	addi	r2,r2,-128
     b80:	103ff11e 	bne	r2,zero,b48 <__alt_mem_onchip_memory2_0+0xf7bfcb48>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     b84:	e0bff717 	ldw	r2,-36(fp)
     b88:	10c00044 	addi	r3,r2,1
     b8c:	e0fff715 	stw	r3,-36(fp)
     b90:	10800003 	ldbu	r2,0(r2)
     b94:	e0bff805 	stb	r2,-32(fp)
     b98:	e0bff807 	ldb	r2,-32(fp)
     b9c:	103f8a1e 	bne	r2,zero,9c8 <__alt_mem_onchip_memory2_0+0xf7bfc9c8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
     ba0:	00000106 	br	ba8 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
     ba4:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
     ba8:	0001883a 	nop
     bac:	e037883a 	mov	sp,fp
     bb0:	dfc00117 	ldw	ra,4(sp)
     bb4:	df000017 	ldw	fp,0(sp)
     bb8:	dec00504 	addi	sp,sp,20
     bbc:	f800283a 	ret

00000bc0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     bc0:	defffd04 	addi	sp,sp,-12
     bc4:	dfc00215 	stw	ra,8(sp)
     bc8:	df000115 	stw	fp,4(sp)
     bcc:	df000104 	addi	fp,sp,4
     bd0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     bd4:	d0a00a17 	ldw	r2,-32728(gp)
     bd8:	10800217 	ldw	r2,8(r2)
     bdc:	100b883a 	mov	r5,r2
     be0:	e13fff17 	ldw	r4,-4(fp)
     be4:	00047ac0 	call	47ac <putc>
#endif
#endif
}
     be8:	e037883a 	mov	sp,fp
     bec:	dfc00117 	ldw	ra,4(sp)
     bf0:	df000017 	ldw	fp,0(sp)
     bf4:	dec00204 	addi	sp,sp,8
     bf8:	f800283a 	ret

00000bfc <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
     bfc:	defffd04 	addi	sp,sp,-12
     c00:	dfc00215 	stw	ra,8(sp)
     c04:	df000115 	stw	fp,4(sp)
     c08:	df000104 	addi	fp,sp,4
     c0c:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
     c10:	d0a00a17 	ldw	r2,-32728(gp)
     c14:	10800217 	ldw	r2,8(r2)
     c18:	100b883a 	mov	r5,r2
     c1c:	e13fff17 	ldw	r4,-4(fp)
     c20:	00036280 	call	3628 <fputs>
#endif
#endif
}
     c24:	e037883a 	mov	sp,fp
     c28:	dfc00117 	ldw	ra,4(sp)
     c2c:	df000017 	ldw	fp,0(sp)
     c30:	dec00204 	addi	sp,sp,8
     c34:	f800283a 	ret

00000c38 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     c38:	defffd04 	addi	sp,sp,-12
     c3c:	dfc00215 	stw	ra,8(sp)
     c40:	df000115 	stw	fp,4(sp)
     c44:	df000104 	addi	fp,sp,4
     c48:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     c4c:	d1600204 	addi	r5,gp,-32760
     c50:	e13fff17 	ldw	r4,-4(fp)
     c54:	00029d40 	call	29d4 <alt_dev_llist_insert>
}
     c58:	e037883a 	mov	sp,fp
     c5c:	dfc00117 	ldw	ra,4(sp)
     c60:	df000017 	ldw	fp,0(sp)
     c64:	dec00204 	addi	sp,sp,8
     c68:	f800283a 	ret

00000c6c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     c6c:	defffd04 	addi	sp,sp,-12
     c70:	dfc00215 	stw	ra,8(sp)
     c74:	df000115 	stw	fp,4(sp)
     c78:	df000104 	addi	fp,sp,4
     c7c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
     c80:	00032580 	call	3258 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     c84:	00800044 	movi	r2,1
     c88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     c8c:	0001883a 	nop
     c90:	e037883a 	mov	sp,fp
     c94:	dfc00117 	ldw	ra,4(sp)
     c98:	df000017 	ldw	fp,0(sp)
     c9c:	dec00204 	addi	sp,sp,8
     ca0:	f800283a 	ret

00000ca4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     ca4:	defffe04 	addi	sp,sp,-8
     ca8:	dfc00115 	stw	ra,4(sp)
     cac:	df000015 	stw	fp,0(sp)
     cb0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIRES_TIMER_0, hires_timer_0);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
     cb4:	01c0fa04 	movi	r7,1000
     cb8:	01800044 	movi	r6,1
     cbc:	000b883a 	mov	r5,zero
     cc0:	01021074 	movhi	r4,2113
     cc4:	21240804 	addi	r4,r4,-28640
     cc8:	00018200 	call	1820 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
     ccc:	000d883a 	mov	r6,zero
     cd0:	000b883a 	mov	r5,zero
     cd4:	010000b4 	movhi	r4,2
     cd8:	2139ab04 	addi	r4,r4,-6484
     cdc:	0000ea80 	call	ea8 <altera_avalon_jtag_uart_init>
     ce0:	010000b4 	movhi	r4,2
     ce4:	2139a104 	addi	r4,r4,-6524
     ce8:	0000c380 	call	c38 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
     cec:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
     cf0:	010000b4 	movhi	r4,2
     cf4:	213db904 	addi	r4,r4,-2332
     cf8:	0000c380 	call	c38 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, audio_subsystem_Audio);
     cfc:	010000b4 	movhi	r4,2
     d00:	213dc504 	addi	r4,r4,-2284
     d04:	0000c380 	call	c38 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_0, ps2_0);
     d08:	010000b4 	movhi	r4,2
     d0c:	213dd104 	addi	r4,r4,-2236
     d10:	00021640 	call	2164 <alt_up_ps2_init>
     d14:	010000b4 	movhi	r4,2
     d18:	213dd104 	addi	r4,r4,-2236
     d1c:	0000c380 	call	c38 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB_0, usb_0);
     d20:	010000b4 	movhi	r4,2
     d24:	213ddf04 	addi	r4,r4,-2180
     d28:	0000c380 	call	c38 <alt_dev_reg>
}
     d2c:	0001883a 	nop
     d30:	e037883a 	mov	sp,fp
     d34:	dfc00117 	ldw	ra,4(sp)
     d38:	df000017 	ldw	fp,0(sp)
     d3c:	dec00204 	addi	sp,sp,8
     d40:	f800283a 	ret

00000d44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     d44:	defffa04 	addi	sp,sp,-24
     d48:	dfc00515 	stw	ra,20(sp)
     d4c:	df000415 	stw	fp,16(sp)
     d50:	df000404 	addi	fp,sp,16
     d54:	e13ffd15 	stw	r4,-12(fp)
     d58:	e17ffe15 	stw	r5,-8(fp)
     d5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     d60:	e0bffd17 	ldw	r2,-12(fp)
     d64:	10800017 	ldw	r2,0(r2)
     d68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     d6c:	e0bffc17 	ldw	r2,-16(fp)
     d70:	10c00a04 	addi	r3,r2,40
     d74:	e0bffd17 	ldw	r2,-12(fp)
     d78:	10800217 	ldw	r2,8(r2)
     d7c:	100f883a 	mov	r7,r2
     d80:	e1bfff17 	ldw	r6,-4(fp)
     d84:	e17ffe17 	ldw	r5,-8(fp)
     d88:	1809883a 	mov	r4,r3
     d8c:	00013640 	call	1364 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     d90:	e037883a 	mov	sp,fp
     d94:	dfc00117 	ldw	ra,4(sp)
     d98:	df000017 	ldw	fp,0(sp)
     d9c:	dec00204 	addi	sp,sp,8
     da0:	f800283a 	ret

00000da4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     da4:	defffa04 	addi	sp,sp,-24
     da8:	dfc00515 	stw	ra,20(sp)
     dac:	df000415 	stw	fp,16(sp)
     db0:	df000404 	addi	fp,sp,16
     db4:	e13ffd15 	stw	r4,-12(fp)
     db8:	e17ffe15 	stw	r5,-8(fp)
     dbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     dc0:	e0bffd17 	ldw	r2,-12(fp)
     dc4:	10800017 	ldw	r2,0(r2)
     dc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     dcc:	e0bffc17 	ldw	r2,-16(fp)
     dd0:	10c00a04 	addi	r3,r2,40
     dd4:	e0bffd17 	ldw	r2,-12(fp)
     dd8:	10800217 	ldw	r2,8(r2)
     ddc:	100f883a 	mov	r7,r2
     de0:	e1bfff17 	ldw	r6,-4(fp)
     de4:	e17ffe17 	ldw	r5,-8(fp)
     de8:	1809883a 	mov	r4,r3
     dec:	00015800 	call	1580 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     df0:	e037883a 	mov	sp,fp
     df4:	dfc00117 	ldw	ra,4(sp)
     df8:	df000017 	ldw	fp,0(sp)
     dfc:	dec00204 	addi	sp,sp,8
     e00:	f800283a 	ret

00000e04 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     e04:	defffc04 	addi	sp,sp,-16
     e08:	dfc00315 	stw	ra,12(sp)
     e0c:	df000215 	stw	fp,8(sp)
     e10:	df000204 	addi	fp,sp,8
     e14:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     e18:	e0bfff17 	ldw	r2,-4(fp)
     e1c:	10800017 	ldw	r2,0(r2)
     e20:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     e24:	e0bffe17 	ldw	r2,-8(fp)
     e28:	10c00a04 	addi	r3,r2,40
     e2c:	e0bfff17 	ldw	r2,-4(fp)
     e30:	10800217 	ldw	r2,8(r2)
     e34:	100b883a 	mov	r5,r2
     e38:	1809883a 	mov	r4,r3
     e3c:	000120c0 	call	120c <altera_avalon_jtag_uart_close>
}
     e40:	e037883a 	mov	sp,fp
     e44:	dfc00117 	ldw	ra,4(sp)
     e48:	df000017 	ldw	fp,0(sp)
     e4c:	dec00204 	addi	sp,sp,8
     e50:	f800283a 	ret

00000e54 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     e54:	defffa04 	addi	sp,sp,-24
     e58:	dfc00515 	stw	ra,20(sp)
     e5c:	df000415 	stw	fp,16(sp)
     e60:	df000404 	addi	fp,sp,16
     e64:	e13ffd15 	stw	r4,-12(fp)
     e68:	e17ffe15 	stw	r5,-8(fp)
     e6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     e70:	e0bffd17 	ldw	r2,-12(fp)
     e74:	10800017 	ldw	r2,0(r2)
     e78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     e7c:	e0bffc17 	ldw	r2,-16(fp)
     e80:	10800a04 	addi	r2,r2,40
     e84:	e1bfff17 	ldw	r6,-4(fp)
     e88:	e17ffe17 	ldw	r5,-8(fp)
     e8c:	1009883a 	mov	r4,r2
     e90:	00012740 	call	1274 <altera_avalon_jtag_uart_ioctl>
}
     e94:	e037883a 	mov	sp,fp
     e98:	dfc00117 	ldw	ra,4(sp)
     e9c:	df000017 	ldw	fp,0(sp)
     ea0:	dec00204 	addi	sp,sp,8
     ea4:	f800283a 	ret

00000ea8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     ea8:	defffb04 	addi	sp,sp,-20
     eac:	dfc00415 	stw	ra,16(sp)
     eb0:	df000315 	stw	fp,12(sp)
     eb4:	df000304 	addi	fp,sp,12
     eb8:	e13ffd15 	stw	r4,-12(fp)
     ebc:	e17ffe15 	stw	r5,-8(fp)
     ec0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     ec4:	e0bffd17 	ldw	r2,-12(fp)
     ec8:	00c00044 	movi	r3,1
     ecc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     ed0:	e0bffd17 	ldw	r2,-12(fp)
     ed4:	10800017 	ldw	r2,0(r2)
     ed8:	10800104 	addi	r2,r2,4
     edc:	1007883a 	mov	r3,r2
     ee0:	e0bffd17 	ldw	r2,-12(fp)
     ee4:	10800817 	ldw	r2,32(r2)
     ee8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     eec:	e0bfff17 	ldw	r2,-4(fp)
     ef0:	01800034 	movhi	r6,0
     ef4:	3183d704 	addi	r6,r6,3932
     ef8:	e17ffd17 	ldw	r5,-12(fp)
     efc:	1009883a 	mov	r4,r2
     f00:	0002c7c0 	call	2c7c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     f04:	e0bffd17 	ldw	r2,-12(fp)
     f08:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     f0c:	e0bffd17 	ldw	r2,-12(fp)
     f10:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     f14:	d0e6e117 	ldw	r3,-25724(gp)
     f18:	e1fffd17 	ldw	r7,-12(fp)
     f1c:	01800034 	movhi	r6,0
     f20:	31845b04 	addi	r6,r6,4460
     f24:	180b883a 	mov	r5,r3
     f28:	1009883a 	mov	r4,r2
     f2c:	00026ec0 	call	26ec <alt_alarm_start>
     f30:	1000040e 	bge	r2,zero,f44 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     f34:	e0fffd17 	ldw	r3,-12(fp)
     f38:	00a00034 	movhi	r2,32768
     f3c:	10bfffc4 	addi	r2,r2,-1
     f40:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     f44:	0001883a 	nop
     f48:	e037883a 	mov	sp,fp
     f4c:	dfc00117 	ldw	ra,4(sp)
     f50:	df000017 	ldw	fp,0(sp)
     f54:	dec00204 	addi	sp,sp,8
     f58:	f800283a 	ret

00000f5c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     f5c:	defff704 	addi	sp,sp,-36
     f60:	df000815 	stw	fp,32(sp)
     f64:	df000804 	addi	fp,sp,32
     f68:	e13ffe15 	stw	r4,-8(fp)
     f6c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     f70:	e0bffe17 	ldw	r2,-8(fp)
     f74:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
     f78:	e0bffa17 	ldw	r2,-24(fp)
     f7c:	10800017 	ldw	r2,0(r2)
     f80:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     f84:	e0bffb17 	ldw	r2,-20(fp)
     f88:	10800104 	addi	r2,r2,4
     f8c:	10800037 	ldwio	r2,0(r2)
     f90:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     f94:	e0bffc17 	ldw	r2,-16(fp)
     f98:	1080c00c 	andi	r2,r2,768
     f9c:	10006d26 	beq	r2,zero,1154 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     fa0:	e0bffc17 	ldw	r2,-16(fp)
     fa4:	1080400c 	andi	r2,r2,256
     fa8:	10003526 	beq	r2,zero,1080 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     fac:	00800074 	movhi	r2,1
     fb0:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     fb4:	e0bffa17 	ldw	r2,-24(fp)
     fb8:	10800a17 	ldw	r2,40(r2)
     fbc:	10800044 	addi	r2,r2,1
     fc0:	1081ffcc 	andi	r2,r2,2047
     fc4:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
     fc8:	e0bffa17 	ldw	r2,-24(fp)
     fcc:	10c00b17 	ldw	r3,44(r2)
     fd0:	e0bffd17 	ldw	r2,-12(fp)
     fd4:	18801526 	beq	r3,r2,102c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     fd8:	e0bffb17 	ldw	r2,-20(fp)
     fdc:	10800037 	ldwio	r2,0(r2)
     fe0:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     fe4:	e0bff817 	ldw	r2,-32(fp)
     fe8:	10a0000c 	andi	r2,r2,32768
     fec:	10001126 	beq	r2,zero,1034 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     ff0:	e0bffa17 	ldw	r2,-24(fp)
     ff4:	10800a17 	ldw	r2,40(r2)
     ff8:	e0fff817 	ldw	r3,-32(fp)
     ffc:	1809883a 	mov	r4,r3
    1000:	e0fffa17 	ldw	r3,-24(fp)
    1004:	1885883a 	add	r2,r3,r2
    1008:	10800e04 	addi	r2,r2,56
    100c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1010:	e0bffa17 	ldw	r2,-24(fp)
    1014:	10800a17 	ldw	r2,40(r2)
    1018:	10800044 	addi	r2,r2,1
    101c:	10c1ffcc 	andi	r3,r2,2047
    1020:	e0bffa17 	ldw	r2,-24(fp)
    1024:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    1028:	003fe206 	br	fb4 <__alt_mem_onchip_memory2_0+0xf7bfcfb4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    102c:	0001883a 	nop
    1030:	00000106 	br	1038 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    1034:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    1038:	e0bff817 	ldw	r2,-32(fp)
    103c:	10bfffec 	andhi	r2,r2,65535
    1040:	10000f26 	beq	r2,zero,1080 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1044:	e0bffa17 	ldw	r2,-24(fp)
    1048:	10c00817 	ldw	r3,32(r2)
    104c:	00bfff84 	movi	r2,-2
    1050:	1886703a 	and	r3,r3,r2
    1054:	e0bffa17 	ldw	r2,-24(fp)
    1058:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    105c:	e0bffb17 	ldw	r2,-20(fp)
    1060:	10800104 	addi	r2,r2,4
    1064:	1007883a 	mov	r3,r2
    1068:	e0bffa17 	ldw	r2,-24(fp)
    106c:	10800817 	ldw	r2,32(r2)
    1070:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1074:	e0bffb17 	ldw	r2,-20(fp)
    1078:	10800104 	addi	r2,r2,4
    107c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    1080:	e0bffc17 	ldw	r2,-16(fp)
    1084:	1080800c 	andi	r2,r2,512
    1088:	103fbe26 	beq	r2,zero,f84 <__alt_mem_onchip_memory2_0+0xf7bfcf84>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    108c:	e0bffc17 	ldw	r2,-16(fp)
    1090:	1004d43a 	srli	r2,r2,16
    1094:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    1098:	00001406 	br	10ec <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    109c:	e0bffb17 	ldw	r2,-20(fp)
    10a0:	e0fffa17 	ldw	r3,-24(fp)
    10a4:	18c00d17 	ldw	r3,52(r3)
    10a8:	e13ffa17 	ldw	r4,-24(fp)
    10ac:	20c7883a 	add	r3,r4,r3
    10b0:	18c20e04 	addi	r3,r3,2104
    10b4:	18c00003 	ldbu	r3,0(r3)
    10b8:	18c03fcc 	andi	r3,r3,255
    10bc:	18c0201c 	xori	r3,r3,128
    10c0:	18ffe004 	addi	r3,r3,-128
    10c4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    10c8:	e0bffa17 	ldw	r2,-24(fp)
    10cc:	10800d17 	ldw	r2,52(r2)
    10d0:	10800044 	addi	r2,r2,1
    10d4:	10c1ffcc 	andi	r3,r2,2047
    10d8:	e0bffa17 	ldw	r2,-24(fp)
    10dc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    10e0:	e0bff917 	ldw	r2,-28(fp)
    10e4:	10bfffc4 	addi	r2,r2,-1
    10e8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    10ec:	e0bff917 	ldw	r2,-28(fp)
    10f0:	10000526 	beq	r2,zero,1108 <altera_avalon_jtag_uart_irq+0x1ac>
    10f4:	e0bffa17 	ldw	r2,-24(fp)
    10f8:	10c00d17 	ldw	r3,52(r2)
    10fc:	e0bffa17 	ldw	r2,-24(fp)
    1100:	10800c17 	ldw	r2,48(r2)
    1104:	18bfe51e 	bne	r3,r2,109c <__alt_mem_onchip_memory2_0+0xf7bfd09c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    1108:	e0bff917 	ldw	r2,-28(fp)
    110c:	103f9d26 	beq	r2,zero,f84 <__alt_mem_onchip_memory2_0+0xf7bfcf84>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1110:	e0bffa17 	ldw	r2,-24(fp)
    1114:	10c00817 	ldw	r3,32(r2)
    1118:	00bfff44 	movi	r2,-3
    111c:	1886703a 	and	r3,r3,r2
    1120:	e0bffa17 	ldw	r2,-24(fp)
    1124:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1128:	e0bffa17 	ldw	r2,-24(fp)
    112c:	10800017 	ldw	r2,0(r2)
    1130:	10800104 	addi	r2,r2,4
    1134:	1007883a 	mov	r3,r2
    1138:	e0bffa17 	ldw	r2,-24(fp)
    113c:	10800817 	ldw	r2,32(r2)
    1140:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1144:	e0bffb17 	ldw	r2,-20(fp)
    1148:	10800104 	addi	r2,r2,4
    114c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    1150:	003f8c06 	br	f84 <__alt_mem_onchip_memory2_0+0xf7bfcf84>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    1154:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    1158:	0001883a 	nop
    115c:	e037883a 	mov	sp,fp
    1160:	df000017 	ldw	fp,0(sp)
    1164:	dec00104 	addi	sp,sp,4
    1168:	f800283a 	ret

0000116c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    116c:	defff804 	addi	sp,sp,-32
    1170:	df000715 	stw	fp,28(sp)
    1174:	df000704 	addi	fp,sp,28
    1178:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    117c:	e0bffb17 	ldw	r2,-20(fp)
    1180:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1184:	e0bff917 	ldw	r2,-28(fp)
    1188:	10800017 	ldw	r2,0(r2)
    118c:	10800104 	addi	r2,r2,4
    1190:	10800037 	ldwio	r2,0(r2)
    1194:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    1198:	e0bffa17 	ldw	r2,-24(fp)
    119c:	1081000c 	andi	r2,r2,1024
    11a0:	10000b26 	beq	r2,zero,11d0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    11a4:	e0bff917 	ldw	r2,-28(fp)
    11a8:	10800017 	ldw	r2,0(r2)
    11ac:	10800104 	addi	r2,r2,4
    11b0:	1007883a 	mov	r3,r2
    11b4:	e0bff917 	ldw	r2,-28(fp)
    11b8:	10800817 	ldw	r2,32(r2)
    11bc:	10810014 	ori	r2,r2,1024
    11c0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    11c4:	e0bff917 	ldw	r2,-28(fp)
    11c8:	10000915 	stw	zero,36(r2)
    11cc:	00000a06 	br	11f8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    11d0:	e0bff917 	ldw	r2,-28(fp)
    11d4:	10c00917 	ldw	r3,36(r2)
    11d8:	00a00034 	movhi	r2,32768
    11dc:	10bfff04 	addi	r2,r2,-4
    11e0:	10c00536 	bltu	r2,r3,11f8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    11e4:	e0bff917 	ldw	r2,-28(fp)
    11e8:	10800917 	ldw	r2,36(r2)
    11ec:	10c00044 	addi	r3,r2,1
    11f0:	e0bff917 	ldw	r2,-28(fp)
    11f4:	10c00915 	stw	r3,36(r2)
    11f8:	d0a6e117 	ldw	r2,-25724(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    11fc:	e037883a 	mov	sp,fp
    1200:	df000017 	ldw	fp,0(sp)
    1204:	dec00104 	addi	sp,sp,4
    1208:	f800283a 	ret

0000120c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    120c:	defffd04 	addi	sp,sp,-12
    1210:	df000215 	stw	fp,8(sp)
    1214:	df000204 	addi	fp,sp,8
    1218:	e13ffe15 	stw	r4,-8(fp)
    121c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1220:	00000506 	br	1238 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    1224:	e0bfff17 	ldw	r2,-4(fp)
    1228:	1090000c 	andi	r2,r2,16384
    122c:	10000226 	beq	r2,zero,1238 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    1230:	00bffd44 	movi	r2,-11
    1234:	00000b06 	br	1264 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1238:	e0bffe17 	ldw	r2,-8(fp)
    123c:	10c00d17 	ldw	r3,52(r2)
    1240:	e0bffe17 	ldw	r2,-8(fp)
    1244:	10800c17 	ldw	r2,48(r2)
    1248:	18800526 	beq	r3,r2,1260 <altera_avalon_jtag_uart_close+0x54>
    124c:	e0bffe17 	ldw	r2,-8(fp)
    1250:	10c00917 	ldw	r3,36(r2)
    1254:	e0bffe17 	ldw	r2,-8(fp)
    1258:	10800117 	ldw	r2,4(r2)
    125c:	18bff136 	bltu	r3,r2,1224 <__alt_mem_onchip_memory2_0+0xf7bfd224>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1260:	0005883a 	mov	r2,zero
}
    1264:	e037883a 	mov	sp,fp
    1268:	df000017 	ldw	fp,0(sp)
    126c:	dec00104 	addi	sp,sp,4
    1270:	f800283a 	ret

00001274 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1274:	defffa04 	addi	sp,sp,-24
    1278:	df000515 	stw	fp,20(sp)
    127c:	df000504 	addi	fp,sp,20
    1280:	e13ffd15 	stw	r4,-12(fp)
    1284:	e17ffe15 	stw	r5,-8(fp)
    1288:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    128c:	00bff9c4 	movi	r2,-25
    1290:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    1294:	e0bffe17 	ldw	r2,-8(fp)
    1298:	10da8060 	cmpeqi	r3,r2,27137
    129c:	1800031e 	bne	r3,zero,12ac <altera_avalon_jtag_uart_ioctl+0x38>
    12a0:	109a80a0 	cmpeqi	r2,r2,27138
    12a4:	1000181e 	bne	r2,zero,1308 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    12a8:	00002906 	br	1350 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    12ac:	e0bffd17 	ldw	r2,-12(fp)
    12b0:	10c00117 	ldw	r3,4(r2)
    12b4:	00a00034 	movhi	r2,32768
    12b8:	10bfffc4 	addi	r2,r2,-1
    12bc:	18802126 	beq	r3,r2,1344 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    12c0:	e0bfff17 	ldw	r2,-4(fp)
    12c4:	10800017 	ldw	r2,0(r2)
    12c8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    12cc:	e0bffc17 	ldw	r2,-16(fp)
    12d0:	10800090 	cmplti	r2,r2,2
    12d4:	1000061e 	bne	r2,zero,12f0 <altera_avalon_jtag_uart_ioctl+0x7c>
    12d8:	e0fffc17 	ldw	r3,-16(fp)
    12dc:	00a00034 	movhi	r2,32768
    12e0:	10bfffc4 	addi	r2,r2,-1
    12e4:	18800226 	beq	r3,r2,12f0 <altera_avalon_jtag_uart_ioctl+0x7c>
    12e8:	e0bffc17 	ldw	r2,-16(fp)
    12ec:	00000206 	br	12f8 <altera_avalon_jtag_uart_ioctl+0x84>
    12f0:	00a00034 	movhi	r2,32768
    12f4:	10bfff84 	addi	r2,r2,-2
    12f8:	e0fffd17 	ldw	r3,-12(fp)
    12fc:	18800115 	stw	r2,4(r3)
      rc = 0;
    1300:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    1304:	00000f06 	br	1344 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    1308:	e0bffd17 	ldw	r2,-12(fp)
    130c:	10c00117 	ldw	r3,4(r2)
    1310:	00a00034 	movhi	r2,32768
    1314:	10bfffc4 	addi	r2,r2,-1
    1318:	18800c26 	beq	r3,r2,134c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    131c:	e0bffd17 	ldw	r2,-12(fp)
    1320:	10c00917 	ldw	r3,36(r2)
    1324:	e0bffd17 	ldw	r2,-12(fp)
    1328:	10800117 	ldw	r2,4(r2)
    132c:	1885803a 	cmpltu	r2,r3,r2
    1330:	10c03fcc 	andi	r3,r2,255
    1334:	e0bfff17 	ldw	r2,-4(fp)
    1338:	10c00015 	stw	r3,0(r2)
      rc = 0;
    133c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    1340:	00000206 	br	134c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    1344:	0001883a 	nop
    1348:	00000106 	br	1350 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    134c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    1350:	e0bffb17 	ldw	r2,-20(fp)
}
    1354:	e037883a 	mov	sp,fp
    1358:	df000017 	ldw	fp,0(sp)
    135c:	dec00104 	addi	sp,sp,4
    1360:	f800283a 	ret

00001364 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1364:	defff304 	addi	sp,sp,-52
    1368:	dfc00c15 	stw	ra,48(sp)
    136c:	df000b15 	stw	fp,44(sp)
    1370:	df000b04 	addi	fp,sp,44
    1374:	e13ffc15 	stw	r4,-16(fp)
    1378:	e17ffd15 	stw	r5,-12(fp)
    137c:	e1bffe15 	stw	r6,-8(fp)
    1380:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    1384:	e0bffd17 	ldw	r2,-12(fp)
    1388:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    138c:	00004706 	br	14ac <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1390:	e0bffc17 	ldw	r2,-16(fp)
    1394:	10800a17 	ldw	r2,40(r2)
    1398:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    139c:	e0bffc17 	ldw	r2,-16(fp)
    13a0:	10800b17 	ldw	r2,44(r2)
    13a4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    13a8:	e0fff717 	ldw	r3,-36(fp)
    13ac:	e0bff817 	ldw	r2,-32(fp)
    13b0:	18800536 	bltu	r3,r2,13c8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    13b4:	e0fff717 	ldw	r3,-36(fp)
    13b8:	e0bff817 	ldw	r2,-32(fp)
    13bc:	1885c83a 	sub	r2,r3,r2
    13c0:	e0bff615 	stw	r2,-40(fp)
    13c4:	00000406 	br	13d8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    13c8:	00c20004 	movi	r3,2048
    13cc:	e0bff817 	ldw	r2,-32(fp)
    13d0:	1885c83a 	sub	r2,r3,r2
    13d4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    13d8:	e0bff617 	ldw	r2,-40(fp)
    13dc:	10001e26 	beq	r2,zero,1458 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    13e0:	e0fffe17 	ldw	r3,-8(fp)
    13e4:	e0bff617 	ldw	r2,-40(fp)
    13e8:	1880022e 	bgeu	r3,r2,13f4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    13ec:	e0bffe17 	ldw	r2,-8(fp)
    13f0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    13f4:	e0bffc17 	ldw	r2,-16(fp)
    13f8:	10c00e04 	addi	r3,r2,56
    13fc:	e0bff817 	ldw	r2,-32(fp)
    1400:	1885883a 	add	r2,r3,r2
    1404:	e1bff617 	ldw	r6,-40(fp)
    1408:	100b883a 	mov	r5,r2
    140c:	e13ff517 	ldw	r4,-44(fp)
    1410:	00044680 	call	4468 <memcpy>
      ptr   += n;
    1414:	e0fff517 	ldw	r3,-44(fp)
    1418:	e0bff617 	ldw	r2,-40(fp)
    141c:	1885883a 	add	r2,r3,r2
    1420:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    1424:	e0fffe17 	ldw	r3,-8(fp)
    1428:	e0bff617 	ldw	r2,-40(fp)
    142c:	1885c83a 	sub	r2,r3,r2
    1430:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1434:	e0fff817 	ldw	r3,-32(fp)
    1438:	e0bff617 	ldw	r2,-40(fp)
    143c:	1885883a 	add	r2,r3,r2
    1440:	10c1ffcc 	andi	r3,r2,2047
    1444:	e0bffc17 	ldw	r2,-16(fp)
    1448:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    144c:	e0bffe17 	ldw	r2,-8(fp)
    1450:	00bfcf16 	blt	zero,r2,1390 <__alt_mem_onchip_memory2_0+0xf7bfd390>
    1454:	00000106 	br	145c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    1458:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    145c:	e0fff517 	ldw	r3,-44(fp)
    1460:	e0bffd17 	ldw	r2,-12(fp)
    1464:	1880141e 	bne	r3,r2,14b8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1468:	e0bfff17 	ldw	r2,-4(fp)
    146c:	1090000c 	andi	r2,r2,16384
    1470:	1000131e 	bne	r2,zero,14c0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1474:	0001883a 	nop
    1478:	e0bffc17 	ldw	r2,-16(fp)
    147c:	10c00a17 	ldw	r3,40(r2)
    1480:	e0bff717 	ldw	r2,-36(fp)
    1484:	1880051e 	bne	r3,r2,149c <altera_avalon_jtag_uart_read+0x138>
    1488:	e0bffc17 	ldw	r2,-16(fp)
    148c:	10c00917 	ldw	r3,36(r2)
    1490:	e0bffc17 	ldw	r2,-16(fp)
    1494:	10800117 	ldw	r2,4(r2)
    1498:	18bff736 	bltu	r3,r2,1478 <__alt_mem_onchip_memory2_0+0xf7bfd478>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    149c:	e0bffc17 	ldw	r2,-16(fp)
    14a0:	10c00a17 	ldw	r3,40(r2)
    14a4:	e0bff717 	ldw	r2,-36(fp)
    14a8:	18800726 	beq	r3,r2,14c8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    14ac:	e0bffe17 	ldw	r2,-8(fp)
    14b0:	00bfb716 	blt	zero,r2,1390 <__alt_mem_onchip_memory2_0+0xf7bfd390>
    14b4:	00000506 	br	14cc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    14b8:	0001883a 	nop
    14bc:	00000306 	br	14cc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    14c0:	0001883a 	nop
    14c4:	00000106 	br	14cc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    14c8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    14cc:	e0fff517 	ldw	r3,-44(fp)
    14d0:	e0bffd17 	ldw	r2,-12(fp)
    14d4:	18801826 	beq	r3,r2,1538 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    14d8:	0005303a 	rdctl	r2,status
    14dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    14e0:	e0fffb17 	ldw	r3,-20(fp)
    14e4:	00bfff84 	movi	r2,-2
    14e8:	1884703a 	and	r2,r3,r2
    14ec:	1001703a 	wrctl	status,r2
  
  return context;
    14f0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    14f4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    14f8:	e0bffc17 	ldw	r2,-16(fp)
    14fc:	10800817 	ldw	r2,32(r2)
    1500:	10c00054 	ori	r3,r2,1
    1504:	e0bffc17 	ldw	r2,-16(fp)
    1508:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    150c:	e0bffc17 	ldw	r2,-16(fp)
    1510:	10800017 	ldw	r2,0(r2)
    1514:	10800104 	addi	r2,r2,4
    1518:	1007883a 	mov	r3,r2
    151c:	e0bffc17 	ldw	r2,-16(fp)
    1520:	10800817 	ldw	r2,32(r2)
    1524:	18800035 	stwio	r2,0(r3)
    1528:	e0bffa17 	ldw	r2,-24(fp)
    152c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1530:	e0bff917 	ldw	r2,-28(fp)
    1534:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    1538:	e0fff517 	ldw	r3,-44(fp)
    153c:	e0bffd17 	ldw	r2,-12(fp)
    1540:	18800426 	beq	r3,r2,1554 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    1544:	e0fff517 	ldw	r3,-44(fp)
    1548:	e0bffd17 	ldw	r2,-12(fp)
    154c:	1885c83a 	sub	r2,r3,r2
    1550:	00000606 	br	156c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    1554:	e0bfff17 	ldw	r2,-4(fp)
    1558:	1090000c 	andi	r2,r2,16384
    155c:	10000226 	beq	r2,zero,1568 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    1560:	00bffd44 	movi	r2,-11
    1564:	00000106 	br	156c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    1568:	00bffec4 	movi	r2,-5
}
    156c:	e037883a 	mov	sp,fp
    1570:	dfc00117 	ldw	ra,4(sp)
    1574:	df000017 	ldw	fp,0(sp)
    1578:	dec00204 	addi	sp,sp,8
    157c:	f800283a 	ret

00001580 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1580:	defff304 	addi	sp,sp,-52
    1584:	dfc00c15 	stw	ra,48(sp)
    1588:	df000b15 	stw	fp,44(sp)
    158c:	df000b04 	addi	fp,sp,44
    1590:	e13ffc15 	stw	r4,-16(fp)
    1594:	e17ffd15 	stw	r5,-12(fp)
    1598:	e1bffe15 	stw	r6,-8(fp)
    159c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    15a0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    15a4:	e0bffd17 	ldw	r2,-12(fp)
    15a8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    15ac:	00003706 	br	168c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    15b0:	e0bffc17 	ldw	r2,-16(fp)
    15b4:	10800c17 	ldw	r2,48(r2)
    15b8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    15bc:	e0bffc17 	ldw	r2,-16(fp)
    15c0:	10800d17 	ldw	r2,52(r2)
    15c4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    15c8:	e0fff917 	ldw	r3,-28(fp)
    15cc:	e0bff517 	ldw	r2,-44(fp)
    15d0:	1880062e 	bgeu	r3,r2,15ec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    15d4:	e0fff517 	ldw	r3,-44(fp)
    15d8:	e0bff917 	ldw	r2,-28(fp)
    15dc:	1885c83a 	sub	r2,r3,r2
    15e0:	10bfffc4 	addi	r2,r2,-1
    15e4:	e0bff615 	stw	r2,-40(fp)
    15e8:	00000b06 	br	1618 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    15ec:	e0bff517 	ldw	r2,-44(fp)
    15f0:	10000526 	beq	r2,zero,1608 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    15f4:	00c20004 	movi	r3,2048
    15f8:	e0bff917 	ldw	r2,-28(fp)
    15fc:	1885c83a 	sub	r2,r3,r2
    1600:	e0bff615 	stw	r2,-40(fp)
    1604:	00000406 	br	1618 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    1608:	00c1ffc4 	movi	r3,2047
    160c:	e0bff917 	ldw	r2,-28(fp)
    1610:	1885c83a 	sub	r2,r3,r2
    1614:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    1618:	e0bff617 	ldw	r2,-40(fp)
    161c:	10001e26 	beq	r2,zero,1698 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    1620:	e0fffe17 	ldw	r3,-8(fp)
    1624:	e0bff617 	ldw	r2,-40(fp)
    1628:	1880022e 	bgeu	r3,r2,1634 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    162c:	e0bffe17 	ldw	r2,-8(fp)
    1630:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    1634:	e0bffc17 	ldw	r2,-16(fp)
    1638:	10c20e04 	addi	r3,r2,2104
    163c:	e0bff917 	ldw	r2,-28(fp)
    1640:	1885883a 	add	r2,r3,r2
    1644:	e1bff617 	ldw	r6,-40(fp)
    1648:	e17ffd17 	ldw	r5,-12(fp)
    164c:	1009883a 	mov	r4,r2
    1650:	00044680 	call	4468 <memcpy>
      ptr   += n;
    1654:	e0fffd17 	ldw	r3,-12(fp)
    1658:	e0bff617 	ldw	r2,-40(fp)
    165c:	1885883a 	add	r2,r3,r2
    1660:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    1664:	e0fffe17 	ldw	r3,-8(fp)
    1668:	e0bff617 	ldw	r2,-40(fp)
    166c:	1885c83a 	sub	r2,r3,r2
    1670:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1674:	e0fff917 	ldw	r3,-28(fp)
    1678:	e0bff617 	ldw	r2,-40(fp)
    167c:	1885883a 	add	r2,r3,r2
    1680:	10c1ffcc 	andi	r3,r2,2047
    1684:	e0bffc17 	ldw	r2,-16(fp)
    1688:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    168c:	e0bffe17 	ldw	r2,-8(fp)
    1690:	00bfc716 	blt	zero,r2,15b0 <__alt_mem_onchip_memory2_0+0xf7bfd5b0>
    1694:	00000106 	br	169c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    1698:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    169c:	0005303a 	rdctl	r2,status
    16a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    16a4:	e0fffb17 	ldw	r3,-20(fp)
    16a8:	00bfff84 	movi	r2,-2
    16ac:	1884703a 	and	r2,r3,r2
    16b0:	1001703a 	wrctl	status,r2
  
  return context;
    16b4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    16b8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    16bc:	e0bffc17 	ldw	r2,-16(fp)
    16c0:	10800817 	ldw	r2,32(r2)
    16c4:	10c00094 	ori	r3,r2,2
    16c8:	e0bffc17 	ldw	r2,-16(fp)
    16cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    16d0:	e0bffc17 	ldw	r2,-16(fp)
    16d4:	10800017 	ldw	r2,0(r2)
    16d8:	10800104 	addi	r2,r2,4
    16dc:	1007883a 	mov	r3,r2
    16e0:	e0bffc17 	ldw	r2,-16(fp)
    16e4:	10800817 	ldw	r2,32(r2)
    16e8:	18800035 	stwio	r2,0(r3)
    16ec:	e0bffa17 	ldw	r2,-24(fp)
    16f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    16f4:	e0bff817 	ldw	r2,-32(fp)
    16f8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    16fc:	e0bffe17 	ldw	r2,-8(fp)
    1700:	0080100e 	bge	zero,r2,1744 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    1704:	e0bfff17 	ldw	r2,-4(fp)
    1708:	1090000c 	andi	r2,r2,16384
    170c:	1000101e 	bne	r2,zero,1750 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1710:	0001883a 	nop
    1714:	e0bffc17 	ldw	r2,-16(fp)
    1718:	10c00d17 	ldw	r3,52(r2)
    171c:	e0bff517 	ldw	r2,-44(fp)
    1720:	1880051e 	bne	r3,r2,1738 <altera_avalon_jtag_uart_write+0x1b8>
    1724:	e0bffc17 	ldw	r2,-16(fp)
    1728:	10c00917 	ldw	r3,36(r2)
    172c:	e0bffc17 	ldw	r2,-16(fp)
    1730:	10800117 	ldw	r2,4(r2)
    1734:	18bff736 	bltu	r3,r2,1714 <__alt_mem_onchip_memory2_0+0xf7bfd714>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    1738:	e0bffc17 	ldw	r2,-16(fp)
    173c:	10800917 	ldw	r2,36(r2)
    1740:	1000051e 	bne	r2,zero,1758 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    1744:	e0bffe17 	ldw	r2,-8(fp)
    1748:	00bfd016 	blt	zero,r2,168c <__alt_mem_onchip_memory2_0+0xf7bfd68c>
    174c:	00000306 	br	175c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    1750:	0001883a 	nop
    1754:	00000106 	br	175c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    1758:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    175c:	e0fffd17 	ldw	r3,-12(fp)
    1760:	e0bff717 	ldw	r2,-36(fp)
    1764:	18800426 	beq	r3,r2,1778 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    1768:	e0fffd17 	ldw	r3,-12(fp)
    176c:	e0bff717 	ldw	r2,-36(fp)
    1770:	1885c83a 	sub	r2,r3,r2
    1774:	00000606 	br	1790 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    1778:	e0bfff17 	ldw	r2,-4(fp)
    177c:	1090000c 	andi	r2,r2,16384
    1780:	10000226 	beq	r2,zero,178c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    1784:	00bffd44 	movi	r2,-11
    1788:	00000106 	br	1790 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    178c:	00bffec4 	movi	r2,-5
}
    1790:	e037883a 	mov	sp,fp
    1794:	dfc00117 	ldw	ra,4(sp)
    1798:	df000017 	ldw	fp,0(sp)
    179c:	dec00204 	addi	sp,sp,8
    17a0:	f800283a 	ret

000017a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    17a4:	defff904 	addi	sp,sp,-28
    17a8:	dfc00615 	stw	ra,24(sp)
    17ac:	df000515 	stw	fp,20(sp)
    17b0:	df000504 	addi	fp,sp,20
    17b4:	e13ffe15 	stw	r4,-8(fp)
    17b8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    17bc:	0007883a 	mov	r3,zero
    17c0:	e0bffe17 	ldw	r2,-8(fp)
    17c4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    17c8:	e0bffe17 	ldw	r2,-8(fp)
    17cc:	10800104 	addi	r2,r2,4
    17d0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    17d4:	0005303a 	rdctl	r2,status
    17d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    17dc:	e0fffc17 	ldw	r3,-16(fp)
    17e0:	00bfff84 	movi	r2,-2
    17e4:	1884703a 	and	r2,r3,r2
    17e8:	1001703a 	wrctl	status,r2
  
  return context;
    17ec:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    17f0:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    17f4:	00031500 	call	3150 <alt_tick>
    17f8:	e0bffb17 	ldw	r2,-20(fp)
    17fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1800:	e0bffd17 	ldw	r2,-12(fp)
    1804:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    1808:	0001883a 	nop
    180c:	e037883a 	mov	sp,fp
    1810:	dfc00117 	ldw	ra,4(sp)
    1814:	df000017 	ldw	fp,0(sp)
    1818:	dec00204 	addi	sp,sp,8
    181c:	f800283a 	ret

00001820 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    1820:	defff904 	addi	sp,sp,-28
    1824:	dfc00615 	stw	ra,24(sp)
    1828:	df000515 	stw	fp,20(sp)
    182c:	df000504 	addi	fp,sp,20
    1830:	e13ffc15 	stw	r4,-16(fp)
    1834:	e17ffd15 	stw	r5,-12(fp)
    1838:	e1bffe15 	stw	r6,-8(fp)
    183c:	e1ffff15 	stw	r7,-4(fp)
    1840:	e0bfff17 	ldw	r2,-4(fp)
    1844:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1848:	d0a6e117 	ldw	r2,-25724(gp)
    184c:	1000021e 	bne	r2,zero,1858 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    1850:	e0bffb17 	ldw	r2,-20(fp)
    1854:	d0a6e115 	stw	r2,-25724(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1858:	e0bffc17 	ldw	r2,-16(fp)
    185c:	10800104 	addi	r2,r2,4
    1860:	00c001c4 	movi	r3,7
    1864:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    1868:	01800034 	movhi	r6,0
    186c:	3185e904 	addi	r6,r6,6052
    1870:	e17ffc17 	ldw	r5,-16(fp)
    1874:	e13ffe17 	ldw	r4,-8(fp)
    1878:	0002c7c0 	call	2c7c <alt_irq_register>
#endif  
}
    187c:	0001883a 	nop
    1880:	e037883a 	mov	sp,fp
    1884:	dfc00117 	ldw	ra,4(sp)
    1888:	df000017 	ldw	fp,0(sp)
    188c:	dec00204 	addi	sp,sp,8
    1890:	f800283a 	ret

00001894 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
    1894:	defffc04 	addi	sp,sp,-16
    1898:	dfc00315 	stw	ra,12(sp)
    189c:	df000215 	stw	fp,8(sp)
    18a0:	df000204 	addi	fp,sp,8
    18a4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
    18a8:	d1600204 	addi	r5,gp,-32760
    18ac:	e13fff17 	ldw	r4,-4(fp)
    18b0:	0002a780 	call	2a78 <alt_find_dev>
    18b4:	e0bffe15 	stw	r2,-8(fp)
  return dev;
    18b8:	e0bffe17 	ldw	r2,-8(fp)
}
    18bc:	e037883a 	mov	sp,fp
    18c0:	dfc00117 	ldw	ra,4(sp)
    18c4:	df000017 	ldw	fp,0(sp)
    18c8:	dec00204 	addi	sp,sp,8
    18cc:	f800283a 	ret

000018d0 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
    18d0:	defffd04 	addi	sp,sp,-12
    18d4:	df000215 	stw	fp,8(sp)
    18d8:	df000204 	addi	fp,sp,8
    18dc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    18e0:	e0bfff17 	ldw	r2,-4(fp)
    18e4:	10800a17 	ldw	r2,40(r2)
    18e8:	10800037 	ldwio	r2,0(r2)
    18ec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
    18f0:	e0bffe17 	ldw	r2,-8(fp)
    18f4:	10800054 	ori	r2,r2,1
    18f8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    18fc:	e0bfff17 	ldw	r2,-4(fp)
    1900:	10800a17 	ldw	r2,40(r2)
    1904:	1007883a 	mov	r3,r2
    1908:	e0bffe17 	ldw	r2,-8(fp)
    190c:	18800035 	stwio	r2,0(r3)
}
    1910:	0001883a 	nop
    1914:	e037883a 	mov	sp,fp
    1918:	df000017 	ldw	fp,0(sp)
    191c:	dec00104 	addi	sp,sp,4
    1920:	f800283a 	ret

00001924 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
    1924:	defffd04 	addi	sp,sp,-12
    1928:	df000215 	stw	fp,8(sp)
    192c:	df000204 	addi	fp,sp,8
    1930:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    1934:	e0bfff17 	ldw	r2,-4(fp)
    1938:	10800a17 	ldw	r2,40(r2)
    193c:	10800037 	ldwio	r2,0(r2)
    1940:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
    1944:	e0fffe17 	ldw	r3,-8(fp)
    1948:	00bfff84 	movi	r2,-2
    194c:	1884703a 	and	r2,r3,r2
    1950:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    1954:	e0bfff17 	ldw	r2,-4(fp)
    1958:	10800a17 	ldw	r2,40(r2)
    195c:	1007883a 	mov	r3,r2
    1960:	e0bffe17 	ldw	r2,-8(fp)
    1964:	18800035 	stwio	r2,0(r3)
}
    1968:	0001883a 	nop
    196c:	e037883a 	mov	sp,fp
    1970:	df000017 	ldw	fp,0(sp)
    1974:	dec00104 	addi	sp,sp,4
    1978:	f800283a 	ret

0000197c <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
    197c:	defffd04 	addi	sp,sp,-12
    1980:	df000215 	stw	fp,8(sp)
    1984:	df000204 	addi	fp,sp,8
    1988:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    198c:	e0bfff17 	ldw	r2,-4(fp)
    1990:	10800a17 	ldw	r2,40(r2)
    1994:	10800037 	ldwio	r2,0(r2)
    1998:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
    199c:	e0bffe17 	ldw	r2,-8(fp)
    19a0:	10800094 	ori	r2,r2,2
    19a4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    19a8:	e0bfff17 	ldw	r2,-4(fp)
    19ac:	10800a17 	ldw	r2,40(r2)
    19b0:	1007883a 	mov	r3,r2
    19b4:	e0bffe17 	ldw	r2,-8(fp)
    19b8:	18800035 	stwio	r2,0(r3)
}
    19bc:	0001883a 	nop
    19c0:	e037883a 	mov	sp,fp
    19c4:	df000017 	ldw	fp,0(sp)
    19c8:	dec00104 	addi	sp,sp,4
    19cc:	f800283a 	ret

000019d0 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
    19d0:	defffd04 	addi	sp,sp,-12
    19d4:	df000215 	stw	fp,8(sp)
    19d8:	df000204 	addi	fp,sp,8
    19dc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    19e0:	e0bfff17 	ldw	r2,-4(fp)
    19e4:	10800a17 	ldw	r2,40(r2)
    19e8:	10800037 	ldwio	r2,0(r2)
    19ec:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
    19f0:	e0fffe17 	ldw	r3,-8(fp)
    19f4:	00bfff44 	movi	r2,-3
    19f8:	1884703a 	and	r2,r3,r2
    19fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    1a00:	e0bfff17 	ldw	r2,-4(fp)
    1a04:	10800a17 	ldw	r2,40(r2)
    1a08:	1007883a 	mov	r3,r2
    1a0c:	e0bffe17 	ldw	r2,-8(fp)
    1a10:	18800035 	stwio	r2,0(r3)
}
    1a14:	0001883a 	nop
    1a18:	e037883a 	mov	sp,fp
    1a1c:	df000017 	ldw	fp,0(sp)
    1a20:	dec00104 	addi	sp,sp,4
    1a24:	f800283a 	ret

00001a28 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
    1a28:	defffd04 	addi	sp,sp,-12
    1a2c:	df000215 	stw	fp,8(sp)
    1a30:	df000204 	addi	fp,sp,8
    1a34:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    1a38:	e0bfff17 	ldw	r2,-4(fp)
    1a3c:	10800a17 	ldw	r2,40(r2)
    1a40:	10800037 	ldwio	r2,0(r2)
    1a44:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
    1a48:	e0bffe17 	ldw	r2,-8(fp)
    1a4c:	1080400c 	andi	r2,r2,256
    1a50:	1004c03a 	cmpne	r2,r2,zero
    1a54:	10803fcc 	andi	r2,r2,255
}
    1a58:	e037883a 	mov	sp,fp
    1a5c:	df000017 	ldw	fp,0(sp)
    1a60:	dec00104 	addi	sp,sp,4
    1a64:	f800283a 	ret

00001a68 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
    1a68:	defffd04 	addi	sp,sp,-12
    1a6c:	df000215 	stw	fp,8(sp)
    1a70:	df000204 	addi	fp,sp,8
    1a74:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    1a78:	e0bfff17 	ldw	r2,-4(fp)
    1a7c:	10800a17 	ldw	r2,40(r2)
    1a80:	10800037 	ldwio	r2,0(r2)
    1a84:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
    1a88:	e0bffe17 	ldw	r2,-8(fp)
    1a8c:	1080800c 	andi	r2,r2,512
    1a90:	1004c03a 	cmpne	r2,r2,zero
    1a94:	10803fcc 	andi	r2,r2,255
}
    1a98:	e037883a 	mov	sp,fp
    1a9c:	df000017 	ldw	fp,0(sp)
    1aa0:	dec00104 	addi	sp,sp,4
    1aa4:	f800283a 	ret

00001aa8 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
    1aa8:	defffd04 	addi	sp,sp,-12
    1aac:	df000215 	stw	fp,8(sp)
    1ab0:	df000204 	addi	fp,sp,8
    1ab4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    1ab8:	e0bfff17 	ldw	r2,-4(fp)
    1abc:	10800a17 	ldw	r2,40(r2)
    1ac0:	10800037 	ldwio	r2,0(r2)
    1ac4:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
    1ac8:	e0bffe17 	ldw	r2,-8(fp)
    1acc:	10800114 	ori	r2,r2,4
    1ad0:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
    1ad4:	e0bffe17 	ldw	r2,-8(fp)
    1ad8:	10800214 	ori	r2,r2,8
    1adc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    1ae0:	e0bfff17 	ldw	r2,-4(fp)
    1ae4:	10800a17 	ldw	r2,40(r2)
    1ae8:	1007883a 	mov	r3,r2
    1aec:	e0bffe17 	ldw	r2,-8(fp)
    1af0:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
    1af4:	e0fffe17 	ldw	r3,-8(fp)
    1af8:	00bffec4 	movi	r2,-5
    1afc:	1884703a 	and	r2,r3,r2
    1b00:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
    1b04:	e0fffe17 	ldw	r3,-8(fp)
    1b08:	00bffdc4 	movi	r2,-9
    1b0c:	1884703a 	and	r2,r3,r2
    1b10:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    1b14:	e0bfff17 	ldw	r2,-4(fp)
    1b18:	10800a17 	ldw	r2,40(r2)
    1b1c:	1007883a 	mov	r3,r2
    1b20:	e0bffe17 	ldw	r2,-8(fp)
    1b24:	18800035 	stwio	r2,0(r3)
}
    1b28:	0001883a 	nop
    1b2c:	e037883a 	mov	sp,fp
    1b30:	df000017 	ldw	fp,0(sp)
    1b34:	dec00104 	addi	sp,sp,4
    1b38:	f800283a 	ret

00001b3c <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
    1b3c:	defffc04 	addi	sp,sp,-16
    1b40:	df000315 	stw	fp,12(sp)
    1b44:	df000304 	addi	fp,sp,12
    1b48:	e13ffe15 	stw	r4,-8(fp)
    1b4c:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    1b50:	e0bffe17 	ldw	r2,-8(fp)
    1b54:	10800a17 	ldw	r2,40(r2)
    1b58:	10800104 	addi	r2,r2,4
    1b5c:	10800037 	ldwio	r2,0(r2)
    1b60:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
    1b64:	e0bfff17 	ldw	r2,-4(fp)
    1b68:	1000041e 	bne	r2,zero,1b7c <alt_up_audio_read_fifo_avail+0x40>
    1b6c:	e0bffd17 	ldw	r2,-12(fp)
    1b70:	10bfc00c 	andi	r2,r2,65280
    1b74:	1004d23a 	srli	r2,r2,8
    1b78:	00000206 	br	1b84 <alt_up_audio_read_fifo_avail+0x48>
    1b7c:	e0bffd17 	ldw	r2,-12(fp)
    1b80:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    1b84:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
    1b88:	e0bffd17 	ldw	r2,-12(fp)
}
    1b8c:	e037883a 	mov	sp,fp
    1b90:	df000017 	ldw	fp,0(sp)
    1b94:	dec00104 	addi	sp,sp,4
    1b98:	f800283a 	ret

00001b9c <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    1b9c:	defffa04 	addi	sp,sp,-24
    1ba0:	dfc00515 	stw	ra,20(sp)
    1ba4:	df000415 	stw	fp,16(sp)
    1ba8:	df000404 	addi	fp,sp,16
    1bac:	e13ffd15 	stw	r4,-12(fp)
    1bb0:	e17ffe15 	stw	r5,-8(fp)
    1bb4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
    1bb8:	01400044 	movi	r5,1
    1bbc:	e13ffd17 	ldw	r4,-12(fp)
    1bc0:	0001b3c0 	call	1b3c <alt_up_audio_read_fifo_avail>
    1bc4:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
    1bc8:	e0bffc17 	ldw	r2,-16(fp)
    1bcc:	10801868 	cmpgeui	r2,r2,97
    1bd0:	1000021e 	bne	r2,zero,1bdc <alt_up_audio_record_r+0x40>
		return 0;
    1bd4:	0005883a 	mov	r2,zero
    1bd8:	00000506 	br	1bf0 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    1bdc:	01c00044 	movi	r7,1
    1be0:	e1bfff17 	ldw	r6,-4(fp)
    1be4:	e17ffe17 	ldw	r5,-8(fp)
    1be8:	e13ffd17 	ldw	r4,-12(fp)
    1bec:	0001d9c0 	call	1d9c <alt_up_audio_read_fifo>
}
    1bf0:	e037883a 	mov	sp,fp
    1bf4:	dfc00117 	ldw	ra,4(sp)
    1bf8:	df000017 	ldw	fp,0(sp)
    1bfc:	dec00204 	addi	sp,sp,8
    1c00:	f800283a 	ret

00001c04 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    1c04:	defffa04 	addi	sp,sp,-24
    1c08:	dfc00515 	stw	ra,20(sp)
    1c0c:	df000415 	stw	fp,16(sp)
    1c10:	df000404 	addi	fp,sp,16
    1c14:	e13ffd15 	stw	r4,-12(fp)
    1c18:	e17ffe15 	stw	r5,-8(fp)
    1c1c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    1c20:	000b883a 	mov	r5,zero
    1c24:	e13ffd17 	ldw	r4,-12(fp)
    1c28:	0001b3c0 	call	1b3c <alt_up_audio_read_fifo_avail>
    1c2c:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
    1c30:	e0bffc17 	ldw	r2,-16(fp)
    1c34:	10801868 	cmpgeui	r2,r2,97
    1c38:	1000021e 	bne	r2,zero,1c44 <alt_up_audio_record_l+0x40>
		return 0;
    1c3c:	0005883a 	mov	r2,zero
    1c40:	00000506 	br	1c58 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    1c44:	000f883a 	mov	r7,zero
    1c48:	e1bfff17 	ldw	r6,-4(fp)
    1c4c:	e17ffe17 	ldw	r5,-8(fp)
    1c50:	e13ffd17 	ldw	r4,-12(fp)
    1c54:	0001d9c0 	call	1d9c <alt_up_audio_read_fifo>
}
    1c58:	e037883a 	mov	sp,fp
    1c5c:	dfc00117 	ldw	ra,4(sp)
    1c60:	df000017 	ldw	fp,0(sp)
    1c64:	dec00204 	addi	sp,sp,8
    1c68:	f800283a 	ret

00001c6c <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
    1c6c:	defffc04 	addi	sp,sp,-16
    1c70:	df000315 	stw	fp,12(sp)
    1c74:	df000304 	addi	fp,sp,12
    1c78:	e13ffe15 	stw	r4,-8(fp)
    1c7c:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    1c80:	e0bffe17 	ldw	r2,-8(fp)
    1c84:	10800a17 	ldw	r2,40(r2)
    1c88:	10800104 	addi	r2,r2,4
    1c8c:	10800037 	ldwio	r2,0(r2)
    1c90:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
    1c94:	e0bfff17 	ldw	r2,-4(fp)
    1c98:	1000031e 	bne	r2,zero,1ca8 <alt_up_audio_write_fifo_space+0x3c>
    1c9c:	e0bffd17 	ldw	r2,-12(fp)
    1ca0:	1004d63a 	srli	r2,r2,24
    1ca4:	00000306 	br	1cb4 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
    1ca8:	e0bffd17 	ldw	r2,-12(fp)
    1cac:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
    1cb0:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    1cb4:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
    1cb8:	e0bffd17 	ldw	r2,-12(fp)
}
    1cbc:	e037883a 	mov	sp,fp
    1cc0:	df000017 	ldw	fp,0(sp)
    1cc4:	dec00104 	addi	sp,sp,4
    1cc8:	f800283a 	ret

00001ccc <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    1ccc:	defffa04 	addi	sp,sp,-24
    1cd0:	dfc00515 	stw	ra,20(sp)
    1cd4:	df000415 	stw	fp,16(sp)
    1cd8:	df000404 	addi	fp,sp,16
    1cdc:	e13ffd15 	stw	r4,-12(fp)
    1ce0:	e17ffe15 	stw	r5,-8(fp)
    1ce4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    1ce8:	01400044 	movi	r5,1
    1cec:	e13ffd17 	ldw	r4,-12(fp)
    1cf0:	0001c6c0 	call	1c6c <alt_up_audio_write_fifo_space>
    1cf4:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
    1cf8:	e0bffc17 	ldw	r2,-16(fp)
    1cfc:	10801868 	cmpgeui	r2,r2,97
    1d00:	1000021e 	bne	r2,zero,1d0c <alt_up_audio_play_r+0x40>
		return 0;
    1d04:	0005883a 	mov	r2,zero
    1d08:	00000506 	br	1d20 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    1d0c:	01c00044 	movi	r7,1
    1d10:	e1bfff17 	ldw	r6,-4(fp)
    1d14:	e17ffe17 	ldw	r5,-8(fp)
    1d18:	e13ffd17 	ldw	r4,-12(fp)
    1d1c:	0001e7c0 	call	1e7c <alt_up_audio_write_fifo>
}
    1d20:	e037883a 	mov	sp,fp
    1d24:	dfc00117 	ldw	ra,4(sp)
    1d28:	df000017 	ldw	fp,0(sp)
    1d2c:	dec00204 	addi	sp,sp,8
    1d30:	f800283a 	ret

00001d34 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    1d34:	defffa04 	addi	sp,sp,-24
    1d38:	dfc00515 	stw	ra,20(sp)
    1d3c:	df000415 	stw	fp,16(sp)
    1d40:	df000404 	addi	fp,sp,16
    1d44:	e13ffd15 	stw	r4,-12(fp)
    1d48:	e17ffe15 	stw	r5,-8(fp)
    1d4c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
    1d50:	000b883a 	mov	r5,zero
    1d54:	e13ffd17 	ldw	r4,-12(fp)
    1d58:	0001c6c0 	call	1c6c <alt_up_audio_write_fifo_space>
    1d5c:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
    1d60:	e0bffc17 	ldw	r2,-16(fp)
    1d64:	10801868 	cmpgeui	r2,r2,97
    1d68:	1000021e 	bne	r2,zero,1d74 <alt_up_audio_play_l+0x40>
		return 0;
    1d6c:	0005883a 	mov	r2,zero
    1d70:	00000506 	br	1d88 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    1d74:	000f883a 	mov	r7,zero
    1d78:	e1bfff17 	ldw	r6,-4(fp)
    1d7c:	e17ffe17 	ldw	r5,-8(fp)
    1d80:	e13ffd17 	ldw	r4,-12(fp)
    1d84:	0001e7c0 	call	1e7c <alt_up_audio_write_fifo>
}
    1d88:	e037883a 	mov	sp,fp
    1d8c:	dfc00117 	ldw	ra,4(sp)
    1d90:	df000017 	ldw	fp,0(sp)
    1d94:	dec00204 	addi	sp,sp,8
    1d98:	f800283a 	ret

00001d9c <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    1d9c:	defff904 	addi	sp,sp,-28
    1da0:	df000615 	stw	fp,24(sp)
    1da4:	df000604 	addi	fp,sp,24
    1da8:	e13ffc15 	stw	r4,-16(fp)
    1dac:	e17ffd15 	stw	r5,-12(fp)
    1db0:	e1bffe15 	stw	r6,-8(fp)
    1db4:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
    1db8:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
    1dbc:	00002506 	br	1e54 <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    1dc0:	e0bffc17 	ldw	r2,-16(fp)
    1dc4:	10800a17 	ldw	r2,40(r2)
    1dc8:	10800104 	addi	r2,r2,4
    1dcc:	10800037 	ldwio	r2,0(r2)
    1dd0:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
    1dd4:	e0bfff17 	ldw	r2,-4(fp)
    1dd8:	1000041e 	bne	r2,zero,1dec <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
    1ddc:	e0bffb17 	ldw	r2,-20(fp)
    1de0:	10bfc00c 	andi	r2,r2,65280
			:
    1de4:	1004d23a 	srli	r2,r2,8
    1de8:	00000206 	br	1df4 <alt_up_audio_read_fifo+0x58>
    1dec:	e0bffb17 	ldw	r2,-20(fp)
    1df0:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    1df4:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
    1df8:	e0bffb17 	ldw	r2,-20(fp)
    1dfc:	10001926 	beq	r2,zero,1e64 <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
    1e00:	e0bffa17 	ldw	r2,-24(fp)
    1e04:	1085883a 	add	r2,r2,r2
    1e08:	1085883a 	add	r2,r2,r2
    1e0c:	1007883a 	mov	r3,r2
    1e10:	e0bffd17 	ldw	r2,-12(fp)
    1e14:	10c5883a 	add	r2,r2,r3
    1e18:	e0ffff17 	ldw	r3,-4(fp)
    1e1c:	1800051e 	bne	r3,zero,1e34 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    1e20:	e0fffc17 	ldw	r3,-16(fp)
    1e24:	18c00a17 	ldw	r3,40(r3)
    1e28:	18c00204 	addi	r3,r3,8
    1e2c:	18c00037 	ldwio	r3,0(r3)
    1e30:	00000406 	br	1e44 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
    1e34:	e0fffc17 	ldw	r3,-16(fp)
    1e38:	18c00a17 	ldw	r3,40(r3)
    1e3c:	18c00304 	addi	r3,r3,12
    1e40:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
    1e44:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
    1e48:	e0bffa17 	ldw	r2,-24(fp)
    1e4c:	10800044 	addi	r2,r2,1
    1e50:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    1e54:	e0fffa17 	ldw	r3,-24(fp)
    1e58:	e0bffe17 	ldw	r2,-8(fp)
    1e5c:	18bfd816 	blt	r3,r2,1dc0 <__alt_mem_onchip_memory2_0+0xf7bfddc0>
    1e60:	00000106 	br	1e68 <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
    1e64:	0001883a 	nop
		}
	}
	return count;
    1e68:	e0bffa17 	ldw	r2,-24(fp)
}
    1e6c:	e037883a 	mov	sp,fp
    1e70:	df000017 	ldw	fp,0(sp)
    1e74:	dec00104 	addi	sp,sp,4
    1e78:	f800283a 	ret

00001e7c <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    1e7c:	defff904 	addi	sp,sp,-28
    1e80:	df000615 	stw	fp,24(sp)
    1e84:	df000604 	addi	fp,sp,24
    1e88:	e13ffc15 	stw	r4,-16(fp)
    1e8c:	e17ffd15 	stw	r5,-12(fp)
    1e90:	e1bffe15 	stw	r6,-8(fp)
    1e94:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
    1e98:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
    1e9c:	00002f06 	br	1f5c <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    1ea0:	e0bffc17 	ldw	r2,-16(fp)
    1ea4:	10800a17 	ldw	r2,40(r2)
    1ea8:	10800104 	addi	r2,r2,4
    1eac:	10800037 	ldwio	r2,0(r2)
    1eb0:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
    1eb4:	e0bfff17 	ldw	r2,-4(fp)
    1eb8:	1000031e 	bne	r2,zero,1ec8 <alt_up_audio_write_fifo+0x4c>
    1ebc:	e0bffb17 	ldw	r2,-20(fp)
    1ec0:	1004d63a 	srli	r2,r2,24
    1ec4:	00000306 	br	1ed4 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
    1ec8:	e0bffb17 	ldw	r2,-20(fp)
    1ecc:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
    1ed0:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    1ed4:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
    1ed8:	e0bffb17 	ldw	r2,-20(fp)
    1edc:	10002326 	beq	r2,zero,1f6c <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
    1ee0:	e0bfff17 	ldw	r2,-4(fp)
    1ee4:	10000f1e 	bne	r2,zero,1f24 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
    1ee8:	e0bffc17 	ldw	r2,-16(fp)
    1eec:	10800a17 	ldw	r2,40(r2)
    1ef0:	10800204 	addi	r2,r2,8
    1ef4:	1009883a 	mov	r4,r2
    1ef8:	e0bffa17 	ldw	r2,-24(fp)
    1efc:	10c00044 	addi	r3,r2,1
    1f00:	e0fffa15 	stw	r3,-24(fp)
    1f04:	1085883a 	add	r2,r2,r2
    1f08:	1085883a 	add	r2,r2,r2
    1f0c:	1007883a 	mov	r3,r2
    1f10:	e0bffd17 	ldw	r2,-12(fp)
    1f14:	10c5883a 	add	r2,r2,r3
    1f18:	10800017 	ldw	r2,0(r2)
    1f1c:	20800035 	stwio	r2,0(r4)
    1f20:	00000e06 	br	1f5c <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
    1f24:	e0bffc17 	ldw	r2,-16(fp)
    1f28:	10800a17 	ldw	r2,40(r2)
    1f2c:	10800304 	addi	r2,r2,12
    1f30:	1009883a 	mov	r4,r2
    1f34:	e0bffa17 	ldw	r2,-24(fp)
    1f38:	10c00044 	addi	r3,r2,1
    1f3c:	e0fffa15 	stw	r3,-24(fp)
    1f40:	1085883a 	add	r2,r2,r2
    1f44:	1085883a 	add	r2,r2,r2
    1f48:	1007883a 	mov	r3,r2
    1f4c:	e0bffd17 	ldw	r2,-12(fp)
    1f50:	10c5883a 	add	r2,r2,r3
    1f54:	10800017 	ldw	r2,0(r2)
    1f58:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    1f5c:	e0fffa17 	ldw	r3,-24(fp)
    1f60:	e0bffe17 	ldw	r2,-8(fp)
    1f64:	18bfce16 	blt	r3,r2,1ea0 <__alt_mem_onchip_memory2_0+0xf7bfdea0>
    1f68:	00000106 	br	1f70 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
    1f6c:	0001883a 	nop
		}
	}
	return count;
    1f70:	e0bffa17 	ldw	r2,-24(fp)
}
    1f74:	e037883a 	mov	sp,fp
    1f78:	df000017 	ldw	fp,0(sp)
    1f7c:	dec00104 	addi	sp,sp,4
    1f80:	f800283a 	ret

00001f84 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
    1f84:	defffd04 	addi	sp,sp,-12
    1f88:	df000215 	stw	fp,8(sp)
    1f8c:	df000204 	addi	fp,sp,8
    1f90:	e13ffe15 	stw	r4,-8(fp)
    1f94:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    1f98:	e0bfff17 	ldw	r2,-4(fp)
    1f9c:	1000051e 	bne	r2,zero,1fb4 <alt_up_audio_read_fifo_head+0x30>
    1fa0:	e0bffe17 	ldw	r2,-8(fp)
    1fa4:	10800a17 	ldw	r2,40(r2)
    1fa8:	10800204 	addi	r2,r2,8
    1fac:	10800037 	ldwio	r2,0(r2)
    1fb0:	00000406 	br	1fc4 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
    1fb4:	e0bffe17 	ldw	r2,-8(fp)
    1fb8:	10800a17 	ldw	r2,40(r2)
    1fbc:	10800304 	addi	r2,r2,12
    1fc0:	10800037 	ldwio	r2,0(r2)
}
    1fc4:	e037883a 	mov	sp,fp
    1fc8:	df000017 	ldw	fp,0(sp)
    1fcc:	dec00104 	addi	sp,sp,4
    1fd0:	f800283a 	ret

00001fd4 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
    1fd4:	defffc04 	addi	sp,sp,-16
    1fd8:	df000315 	stw	fp,12(sp)
    1fdc:	df000304 	addi	fp,sp,12
    1fe0:	e13ffd15 	stw	r4,-12(fp)
    1fe4:	e17ffe15 	stw	r5,-8(fp)
    1fe8:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
    1fec:	e0bfff17 	ldw	r2,-4(fp)
    1ff0:	1000071e 	bne	r2,zero,2010 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
    1ff4:	e0bffd17 	ldw	r2,-12(fp)
    1ff8:	10800a17 	ldw	r2,40(r2)
    1ffc:	10800204 	addi	r2,r2,8
    2000:	1007883a 	mov	r3,r2
    2004:	e0bffe17 	ldw	r2,-8(fp)
    2008:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
    200c:	00000606 	br	2028 <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
    2010:	e0bffd17 	ldw	r2,-12(fp)
    2014:	10800a17 	ldw	r2,40(r2)
    2018:	10800304 	addi	r2,r2,12
    201c:	1007883a 	mov	r3,r2
    2020:	e0bffe17 	ldw	r2,-8(fp)
    2024:	18800035 	stwio	r2,0(r3)
}
    2028:	0001883a 	nop
    202c:	e037883a 	mov	sp,fp
    2030:	df000017 	ldw	fp,0(sp)
    2034:	dec00104 	addi	sp,sp,4
    2038:	f800283a 	ret

0000203c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    203c:	defffd04 	addi	sp,sp,-12
    2040:	df000215 	stw	fp,8(sp)
    2044:	df000204 	addi	fp,sp,8
    2048:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    204c:	e0bfff17 	ldw	r2,-4(fp)
    2050:	1080400c 	andi	r2,r2,256
    2054:	1004d23a 	srli	r2,r2,8
    2058:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    205c:	e0bffe03 	ldbu	r2,-8(fp)
}
    2060:	e037883a 	mov	sp,fp
    2064:	df000017 	ldw	fp,0(sp)
    2068:	dec00104 	addi	sp,sp,4
    206c:	f800283a 	ret

00002070 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    2070:	defffd04 	addi	sp,sp,-12
    2074:	df000215 	stw	fp,8(sp)
    2078:	df000204 	addi	fp,sp,8
    207c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    2080:	e0bfff17 	ldw	r2,-4(fp)
    2084:	1080004c 	andi	r2,r2,1
    2088:	e0bffe05 	stb	r2,-8(fp)
	return re;
    208c:	e0bffe03 	ldbu	r2,-8(fp)
}
    2090:	e037883a 	mov	sp,fp
    2094:	df000017 	ldw	fp,0(sp)
    2098:	dec00104 	addi	sp,sp,4
    209c:	f800283a 	ret

000020a0 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    20a0:	defffd04 	addi	sp,sp,-12
    20a4:	df000215 	stw	fp,8(sp)
    20a8:	df000204 	addi	fp,sp,8
    20ac:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    20b0:	e0bfff17 	ldw	r2,-4(fp)
    20b4:	1081000c 	andi	r2,r2,1024
    20b8:	1004d2ba 	srli	r2,r2,10
    20bc:	e0bffe05 	stb	r2,-8(fp)
	return re;
    20c0:	e0bffe03 	ldbu	r2,-8(fp)
}
    20c4:	e037883a 	mov	sp,fp
    20c8:	df000017 	ldw	fp,0(sp)
    20cc:	dec00104 	addi	sp,sp,4
    20d0:	f800283a 	ret

000020d4 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    20d4:	defffd04 	addi	sp,sp,-12
    20d8:	df000215 	stw	fp,8(sp)
    20dc:	df000204 	addi	fp,sp,8
    20e0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    20e4:	e0bfff17 	ldw	r2,-4(fp)
    20e8:	1004d43a 	srli	r2,r2,16
    20ec:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    20f0:	e0bffe0b 	ldhu	r2,-8(fp)
}
    20f4:	e037883a 	mov	sp,fp
    20f8:	df000017 	ldw	fp,0(sp)
    20fc:	dec00104 	addi	sp,sp,4
    2100:	f800283a 	ret

00002104 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    2104:	defffd04 	addi	sp,sp,-12
    2108:	df000215 	stw	fp,8(sp)
    210c:	df000204 	addi	fp,sp,8
    2110:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    2114:	e0bfff17 	ldw	r2,-4(fp)
    2118:	10a0000c 	andi	r2,r2,32768
    211c:	1004d3fa 	srli	r2,r2,15
    2120:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    2124:	e0bffe03 	ldbu	r2,-8(fp)
}
    2128:	e037883a 	mov	sp,fp
    212c:	df000017 	ldw	fp,0(sp)
    2130:	dec00104 	addi	sp,sp,4
    2134:	f800283a 	ret

00002138 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    2138:	defffd04 	addi	sp,sp,-12
    213c:	df000215 	stw	fp,8(sp)
    2140:	df000204 	addi	fp,sp,8
    2144:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    2148:	e0bfff17 	ldw	r2,-4(fp)
    214c:	e0bffe05 	stb	r2,-8(fp)
	return data;
    2150:	e0bffe03 	ldbu	r2,-8(fp)
}
    2154:	e037883a 	mov	sp,fp
    2158:	df000017 	ldw	fp,0(sp)
    215c:	dec00104 	addi	sp,sp,4
    2160:	f800283a 	ret

00002164 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    2164:	defffb04 	addi	sp,sp,-20
    2168:	dfc00415 	stw	ra,16(sp)
    216c:	df000315 	stw	fp,12(sp)
    2170:	df000304 	addi	fp,sp,12
    2174:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    2178:	01403fc4 	movi	r5,255
    217c:	e13fff17 	ldw	r4,-4(fp)
    2180:	00023c40 	call	23c4 <alt_up_ps2_write_data_byte_with_ack>
    2184:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    2188:	e0bffd17 	ldw	r2,-12(fp)
    218c:	1000211e 	bne	r2,zero,2214 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    2190:	e0bffe04 	addi	r2,fp,-8
    2194:	100b883a 	mov	r5,r2
    2198:	e13fff17 	ldw	r4,-4(fp)
    219c:	00024280 	call	2428 <alt_up_ps2_read_data_byte_timeout>
    21a0:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    21a4:	e0bffd17 	ldw	r2,-12(fp)
    21a8:	10001a1e 	bne	r2,zero,2214 <alt_up_ps2_init+0xb0>
    21ac:	e0bffe03 	ldbu	r2,-8(fp)
    21b0:	10803fcc 	andi	r2,r2,255
    21b4:	10802a98 	cmpnei	r2,r2,170
    21b8:	1000161e 	bne	r2,zero,2214 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    21bc:	e0bffe04 	addi	r2,fp,-8
    21c0:	100b883a 	mov	r5,r2
    21c4:	e13fff17 	ldw	r4,-4(fp)
    21c8:	00024280 	call	2428 <alt_up_ps2_read_data_byte_timeout>
    21cc:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    21d0:	e0bffd17 	ldw	r2,-12(fp)
    21d4:	10bfe318 	cmpnei	r2,r2,-116
    21d8:	1000041e 	bne	r2,zero,21ec <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    21dc:	e0bfff17 	ldw	r2,-4(fp)
    21e0:	00c00044 	movi	r3,1
    21e4:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    21e8:	00000a06 	br	2214 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
    21ec:	e0bffd17 	ldw	r2,-12(fp)
    21f0:	1000081e 	bne	r2,zero,2214 <alt_up_ps2_init+0xb0>
    21f4:	e0bffe03 	ldbu	r2,-8(fp)
    21f8:	10803fcc 	andi	r2,r2,255
    21fc:	1000051e 	bne	r2,zero,2214 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    2200:	e0bfff17 	ldw	r2,-4(fp)
    2204:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    2208:	01403d04 	movi	r5,244
    220c:	e13fff17 	ldw	r4,-4(fp)
    2210:	00022e80 	call	22e8 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    2214:	0001883a 	nop
    2218:	e037883a 	mov	sp,fp
    221c:	dfc00117 	ldw	ra,4(sp)
    2220:	df000017 	ldw	fp,0(sp)
    2224:	dec00204 	addi	sp,sp,8
    2228:	f800283a 	ret

0000222c <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    222c:	defffd04 	addi	sp,sp,-12
    2230:	df000215 	stw	fp,8(sp)
    2234:	df000204 	addi	fp,sp,8
    2238:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    223c:	e0bfff17 	ldw	r2,-4(fp)
    2240:	10800a17 	ldw	r2,40(r2)
    2244:	10800104 	addi	r2,r2,4
    2248:	10800037 	ldwio	r2,0(r2)
    224c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    2250:	e0bffe17 	ldw	r2,-8(fp)
    2254:	10800054 	ori	r2,r2,1
    2258:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    225c:	e0bfff17 	ldw	r2,-4(fp)
    2260:	10800a17 	ldw	r2,40(r2)
    2264:	10800104 	addi	r2,r2,4
    2268:	1007883a 	mov	r3,r2
    226c:	e0bffe17 	ldw	r2,-8(fp)
    2270:	18800035 	stwio	r2,0(r3)
}
    2274:	0001883a 	nop
    2278:	e037883a 	mov	sp,fp
    227c:	df000017 	ldw	fp,0(sp)
    2280:	dec00104 	addi	sp,sp,4
    2284:	f800283a 	ret

00002288 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    2288:	defffd04 	addi	sp,sp,-12
    228c:	df000215 	stw	fp,8(sp)
    2290:	df000204 	addi	fp,sp,8
    2294:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    2298:	e0bfff17 	ldw	r2,-4(fp)
    229c:	10800a17 	ldw	r2,40(r2)
    22a0:	10800104 	addi	r2,r2,4
    22a4:	10800037 	ldwio	r2,0(r2)
    22a8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    22ac:	e0fffe17 	ldw	r3,-8(fp)
    22b0:	00bfff84 	movi	r2,-2
    22b4:	1884703a 	and	r2,r3,r2
    22b8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    22bc:	e0bfff17 	ldw	r2,-4(fp)
    22c0:	10800a17 	ldw	r2,40(r2)
    22c4:	10800104 	addi	r2,r2,4
    22c8:	1007883a 	mov	r3,r2
    22cc:	e0bffe17 	ldw	r2,-8(fp)
    22d0:	18800035 	stwio	r2,0(r3)
}
    22d4:	0001883a 	nop
    22d8:	e037883a 	mov	sp,fp
    22dc:	df000017 	ldw	fp,0(sp)
    22e0:	dec00104 	addi	sp,sp,4
    22e4:	f800283a 	ret

000022e8 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    22e8:	defffb04 	addi	sp,sp,-20
    22ec:	dfc00415 	stw	ra,16(sp)
    22f0:	df000315 	stw	fp,12(sp)
    22f4:	df000304 	addi	fp,sp,12
    22f8:	e13ffe15 	stw	r4,-8(fp)
    22fc:	2805883a 	mov	r2,r5
    2300:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    2304:	e0bffe17 	ldw	r2,-8(fp)
    2308:	10800a17 	ldw	r2,40(r2)
    230c:	1007883a 	mov	r3,r2
    2310:	e0bfff03 	ldbu	r2,-4(fp)
    2314:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    2318:	e0bffe17 	ldw	r2,-8(fp)
    231c:	10800a17 	ldw	r2,40(r2)
    2320:	10800104 	addi	r2,r2,4
    2324:	10800037 	ldwio	r2,0(r2)
    2328:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    232c:	e13ffd17 	ldw	r4,-12(fp)
    2330:	00020a00 	call	20a0 <read_CE_bit>
    2334:	10803fcc 	andi	r2,r2,255
    2338:	10000226 	beq	r2,zero,2344 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    233c:	00bffec4 	movi	r2,-5
    2340:	00000106 	br	2348 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    2344:	0005883a 	mov	r2,zero
}
    2348:	e037883a 	mov	sp,fp
    234c:	dfc00117 	ldw	ra,4(sp)
    2350:	df000017 	ldw	fp,0(sp)
    2354:	dec00204 	addi	sp,sp,8
    2358:	f800283a 	ret

0000235c <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    235c:	defffc04 	addi	sp,sp,-16
    2360:	dfc00315 	stw	ra,12(sp)
    2364:	df000215 	stw	fp,8(sp)
    2368:	df000204 	addi	fp,sp,8
    236c:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    2370:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    2374:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    2378:	e0bffe44 	addi	r2,fp,-7
    237c:	100b883a 	mov	r5,r2
    2380:	e13fff17 	ldw	r4,-4(fp)
    2384:	00024280 	call	2428 <alt_up_ps2_read_data_byte_timeout>
    2388:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    238c:	e0bffe03 	ldbu	r2,-8(fp)
    2390:	1000061e 	bne	r2,zero,23ac <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    2394:	e0bffe43 	ldbu	r2,-7(fp)
    2398:	10803fcc 	andi	r2,r2,255
    239c:	10803e98 	cmpnei	r2,r2,250
    23a0:	103ff51e 	bne	r2,zero,2378 <__alt_mem_onchip_memory2_0+0xf7bfe378>
				return 0;
    23a4:	0005883a 	mov	r2,zero
    23a8:	00000106 	br	23b0 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    23ac:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    23b0:	e037883a 	mov	sp,fp
    23b4:	dfc00117 	ldw	ra,4(sp)
    23b8:	df000017 	ldw	fp,0(sp)
    23bc:	dec00204 	addi	sp,sp,8
    23c0:	f800283a 	ret

000023c4 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    23c4:	defffa04 	addi	sp,sp,-24
    23c8:	dfc00515 	stw	ra,20(sp)
    23cc:	df000415 	stw	fp,16(sp)
    23d0:	df000404 	addi	fp,sp,16
    23d4:	e13ffe15 	stw	r4,-8(fp)
    23d8:	2805883a 	mov	r2,r5
    23dc:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    23e0:	e0bfff03 	ldbu	r2,-4(fp)
    23e4:	100b883a 	mov	r5,r2
    23e8:	e13ffe17 	ldw	r4,-8(fp)
    23ec:	00022e80 	call	22e8 <alt_up_ps2_write_data_byte>
    23f0:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    23f4:	e0bffc17 	ldw	r2,-16(fp)
    23f8:	10000226 	beq	r2,zero,2404 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    23fc:	e0bffc17 	ldw	r2,-16(fp)
    2400:	00000406 	br	2414 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    2404:	e13ffe17 	ldw	r4,-8(fp)
    2408:	000235c0 	call	235c <alt_up_ps2_wait_for_ack>
    240c:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    2410:	e0bffd17 	ldw	r2,-12(fp)
}
    2414:	e037883a 	mov	sp,fp
    2418:	dfc00117 	ldw	ra,4(sp)
    241c:	df000017 	ldw	fp,0(sp)
    2420:	dec00204 	addi	sp,sp,8
    2424:	f800283a 	ret

00002428 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    2428:	defffa04 	addi	sp,sp,-24
    242c:	dfc00515 	stw	ra,20(sp)
    2430:	df000415 	stw	fp,16(sp)
    2434:	df000404 	addi	fp,sp,16
    2438:	e13ffe15 	stw	r4,-8(fp)
    243c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    2440:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    2444:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    2448:	e0bffc17 	ldw	r2,-16(fp)
    244c:	10800044 	addi	r2,r2,1
    2450:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    2454:	e0bffe17 	ldw	r2,-8(fp)
    2458:	10800a17 	ldw	r2,40(r2)
    245c:	10800037 	ldwio	r2,0(r2)
    2460:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    2464:	e13ffd17 	ldw	r4,-12(fp)
    2468:	00021040 	call	2104 <read_data_valid>
    246c:	10803fcc 	andi	r2,r2,255
    2470:	10000726 	beq	r2,zero,2490 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    2474:	e13ffd17 	ldw	r4,-12(fp)
    2478:	00021380 	call	2138 <read_data_byte>
    247c:	1007883a 	mov	r3,r2
    2480:	e0bfff17 	ldw	r2,-4(fp)
    2484:	10c00005 	stb	r3,0(r2)
			return 0;
    2488:	0005883a 	mov	r2,zero
    248c:	00000806 	br	24b0 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    2490:	e0bffe17 	ldw	r2,-8(fp)
    2494:	10800c17 	ldw	r2,48(r2)
    2498:	103feb26 	beq	r2,zero,2448 <__alt_mem_onchip_memory2_0+0xf7bfe448>
    249c:	e0bffe17 	ldw	r2,-8(fp)
    24a0:	10c00c17 	ldw	r3,48(r2)
    24a4:	e0bffc17 	ldw	r2,-16(fp)
    24a8:	18bfe72e 	bgeu	r3,r2,2448 <__alt_mem_onchip_memory2_0+0xf7bfe448>
		{
			return -ETIMEDOUT;
    24ac:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    24b0:	e037883a 	mov	sp,fp
    24b4:	dfc00117 	ldw	ra,4(sp)
    24b8:	df000017 	ldw	fp,0(sp)
    24bc:	dec00204 	addi	sp,sp,8
    24c0:	f800283a 	ret

000024c4 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    24c4:	defffb04 	addi	sp,sp,-20
    24c8:	dfc00415 	stw	ra,16(sp)
    24cc:	df000315 	stw	fp,12(sp)
    24d0:	df000304 	addi	fp,sp,12
    24d4:	e13ffe15 	stw	r4,-8(fp)
    24d8:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    24dc:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    24e0:	e0bffe17 	ldw	r2,-8(fp)
    24e4:	10800a17 	ldw	r2,40(r2)
    24e8:	10800037 	ldwio	r2,0(r2)
    24ec:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    24f0:	e13ffd17 	ldw	r4,-12(fp)
    24f4:	00021040 	call	2104 <read_data_valid>
    24f8:	10803fcc 	andi	r2,r2,255
    24fc:	10000726 	beq	r2,zero,251c <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    2500:	e13ffd17 	ldw	r4,-12(fp)
    2504:	00021380 	call	2138 <read_data_byte>
    2508:	1007883a 	mov	r3,r2
    250c:	e0bfff17 	ldw	r2,-4(fp)
    2510:	10c00005 	stb	r3,0(r2)
		return 0;
    2514:	0005883a 	mov	r2,zero
    2518:	00000106 	br	2520 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    251c:	00bfffc4 	movi	r2,-1
}
    2520:	e037883a 	mov	sp,fp
    2524:	dfc00117 	ldw	ra,4(sp)
    2528:	df000017 	ldw	fp,0(sp)
    252c:	dec00204 	addi	sp,sp,8
    2530:	f800283a 	ret

00002534 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    2534:	defffb04 	addi	sp,sp,-20
    2538:	dfc00415 	stw	ra,16(sp)
    253c:	df000315 	stw	fp,12(sp)
    2540:	df000304 	addi	fp,sp,12
    2544:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    2548:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    254c:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    2550:	e0bfff17 	ldw	r2,-4(fp)
    2554:	10800a17 	ldw	r2,40(r2)
    2558:	10800037 	ldwio	r2,0(r2)
    255c:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    2560:	e13ffe17 	ldw	r4,-8(fp)
    2564:	00020d40 	call	20d4 <read_num_bytes_available>
    2568:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    256c:	e0bffd0b 	ldhu	r2,-12(fp)
    2570:	103ff71e 	bne	r2,zero,2550 <__alt_mem_onchip_memory2_0+0xf7bfe550>
}
    2574:	0001883a 	nop
    2578:	e037883a 	mov	sp,fp
    257c:	dfc00117 	ldw	ra,4(sp)
    2580:	df000017 	ldw	fp,0(sp)
    2584:	dec00204 	addi	sp,sp,8
    2588:	f800283a 	ret

0000258c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    258c:	defff804 	addi	sp,sp,-32
    2590:	dfc00715 	stw	ra,28(sp)
    2594:	df000615 	stw	fp,24(sp)
    2598:	df000604 	addi	fp,sp,24
    259c:	e13ffd15 	stw	r4,-12(fp)
    25a0:	e17ffe15 	stw	r5,-8(fp)
    25a4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    25a8:	e0bffd17 	ldw	r2,-12(fp)
    25ac:	10800017 	ldw	r2,0(r2)
    25b0:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    25b4:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    25b8:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    25bc:	e0fffc17 	ldw	r3,-16(fp)
    25c0:	e0bfff17 	ldw	r2,-4(fp)
    25c4:	18bffd16 	blt	r3,r2,25bc <__alt_mem_onchip_memory2_0+0xf7bfe5bc>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    25c8:	e0bffe17 	ldw	r2,-8(fp)
    25cc:	10c00044 	addi	r3,r2,1
    25d0:	e0fffe15 	stw	r3,-8(fp)
    25d4:	100b883a 	mov	r5,r2
    25d8:	e13ffa17 	ldw	r4,-24(fp)
    25dc:	00024280 	call	2428 <alt_up_ps2_read_data_byte_timeout>
    25e0:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    25e4:	e0bffb17 	ldw	r2,-20(fp)
    25e8:	10000226 	beq	r2,zero,25f4 <alt_up_ps2_read_fd+0x68>
			return count;
    25ec:	e0bffc17 	ldw	r2,-16(fp)
    25f0:	00000406 	br	2604 <alt_up_ps2_read_fd+0x78>
		count++;
    25f4:	e0bffc17 	ldw	r2,-16(fp)
    25f8:	10800044 	addi	r2,r2,1
    25fc:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    2600:	e0bffc17 	ldw	r2,-16(fp)
}
    2604:	e037883a 	mov	sp,fp
    2608:	dfc00117 	ldw	ra,4(sp)
    260c:	df000017 	ldw	fp,0(sp)
    2610:	dec00204 	addi	sp,sp,8
    2614:	f800283a 	ret

00002618 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    2618:	defff804 	addi	sp,sp,-32
    261c:	dfc00715 	stw	ra,28(sp)
    2620:	df000615 	stw	fp,24(sp)
    2624:	df000604 	addi	fp,sp,24
    2628:	e13ffd15 	stw	r4,-12(fp)
    262c:	e17ffe15 	stw	r5,-8(fp)
    2630:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    2634:	e0bffd17 	ldw	r2,-12(fp)
    2638:	10800017 	ldw	r2,0(r2)
    263c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    2640:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    2644:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    2648:	00001006 	br	268c <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    264c:	e0bffe17 	ldw	r2,-8(fp)
    2650:	10c00044 	addi	r3,r2,1
    2654:	e0fffe15 	stw	r3,-8(fp)
    2658:	10800003 	ldbu	r2,0(r2)
    265c:	10803fcc 	andi	r2,r2,255
    2660:	100b883a 	mov	r5,r2
    2664:	e13ffb17 	ldw	r4,-20(fp)
    2668:	00022e80 	call	22e8 <alt_up_ps2_write_data_byte>
    266c:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    2670:	e0bffc17 	ldw	r2,-16(fp)
    2674:	10000226 	beq	r2,zero,2680 <alt_up_ps2_write_fd+0x68>
			return count;
    2678:	e0bffa17 	ldw	r2,-24(fp)
    267c:	00000706 	br	269c <alt_up_ps2_write_fd+0x84>
		count++;
    2680:	e0bffa17 	ldw	r2,-24(fp)
    2684:	10800044 	addi	r2,r2,1
    2688:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    268c:	e0fffa17 	ldw	r3,-24(fp)
    2690:	e0bfff17 	ldw	r2,-4(fp)
    2694:	18bfed16 	blt	r3,r2,264c <__alt_mem_onchip_memory2_0+0xf7bfe64c>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    2698:	e0bffa17 	ldw	r2,-24(fp)
}
    269c:	e037883a 	mov	sp,fp
    26a0:	dfc00117 	ldw	ra,4(sp)
    26a4:	df000017 	ldw	fp,0(sp)
    26a8:	dec00204 	addi	sp,sp,8
    26ac:	f800283a 	ret

000026b0 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    26b0:	defffc04 	addi	sp,sp,-16
    26b4:	dfc00315 	stw	ra,12(sp)
    26b8:	df000215 	stw	fp,8(sp)
    26bc:	df000204 	addi	fp,sp,8
    26c0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    26c4:	d1600204 	addi	r5,gp,-32760
    26c8:	e13fff17 	ldw	r4,-4(fp)
    26cc:	0002a780 	call	2a78 <alt_find_dev>
    26d0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    26d4:	e0bffe17 	ldw	r2,-8(fp)
}
    26d8:	e037883a 	mov	sp,fp
    26dc:	dfc00117 	ldw	ra,4(sp)
    26e0:	df000017 	ldw	fp,0(sp)
    26e4:	dec00204 	addi	sp,sp,8
    26e8:	f800283a 	ret

000026ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    26ec:	defff504 	addi	sp,sp,-44
    26f0:	df000a15 	stw	fp,40(sp)
    26f4:	df000a04 	addi	fp,sp,40
    26f8:	e13ffc15 	stw	r4,-16(fp)
    26fc:	e17ffd15 	stw	r5,-12(fp)
    2700:	e1bffe15 	stw	r6,-8(fp)
    2704:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    2708:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    270c:	d0a6e117 	ldw	r2,-25724(gp)
  
  if (alt_ticks_per_second ())
    2710:	10003c26 	beq	r2,zero,2804 <alt_alarm_start+0x118>
  {
    if (alarm)
    2714:	e0bffc17 	ldw	r2,-16(fp)
    2718:	10003826 	beq	r2,zero,27fc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    271c:	e0bffc17 	ldw	r2,-16(fp)
    2720:	e0fffe17 	ldw	r3,-8(fp)
    2724:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    2728:	e0bffc17 	ldw	r2,-16(fp)
    272c:	e0ffff17 	ldw	r3,-4(fp)
    2730:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2734:	0005303a 	rdctl	r2,status
    2738:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    273c:	e0fff917 	ldw	r3,-28(fp)
    2740:	00bfff84 	movi	r2,-2
    2744:	1884703a 	and	r2,r3,r2
    2748:	1001703a 	wrctl	status,r2
  
  return context;
    274c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    2750:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2754:	d0a6e217 	ldw	r2,-25720(gp)
      
      current_nticks = alt_nticks();
    2758:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    275c:	e0fffd17 	ldw	r3,-12(fp)
    2760:	e0bff617 	ldw	r2,-40(fp)
    2764:	1885883a 	add	r2,r3,r2
    2768:	10c00044 	addi	r3,r2,1
    276c:	e0bffc17 	ldw	r2,-16(fp)
    2770:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2774:	e0bffc17 	ldw	r2,-16(fp)
    2778:	10c00217 	ldw	r3,8(r2)
    277c:	e0bff617 	ldw	r2,-40(fp)
    2780:	1880042e 	bgeu	r3,r2,2794 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    2784:	e0bffc17 	ldw	r2,-16(fp)
    2788:	00c00044 	movi	r3,1
    278c:	10c00405 	stb	r3,16(r2)
    2790:	00000206 	br	279c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    2794:	e0bffc17 	ldw	r2,-16(fp)
    2798:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    279c:	e0bffc17 	ldw	r2,-16(fp)
    27a0:	d0e00704 	addi	r3,gp,-32740
    27a4:	e0fffa15 	stw	r3,-24(fp)
    27a8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    27ac:	e0bffb17 	ldw	r2,-20(fp)
    27b0:	e0fffa17 	ldw	r3,-24(fp)
    27b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    27b8:	e0bffa17 	ldw	r2,-24(fp)
    27bc:	10c00017 	ldw	r3,0(r2)
    27c0:	e0bffb17 	ldw	r2,-20(fp)
    27c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    27c8:	e0bffa17 	ldw	r2,-24(fp)
    27cc:	10800017 	ldw	r2,0(r2)
    27d0:	e0fffb17 	ldw	r3,-20(fp)
    27d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    27d8:	e0bffa17 	ldw	r2,-24(fp)
    27dc:	e0fffb17 	ldw	r3,-20(fp)
    27e0:	10c00015 	stw	r3,0(r2)
    27e4:	e0bff817 	ldw	r2,-32(fp)
    27e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    27ec:	e0bff717 	ldw	r2,-36(fp)
    27f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    27f4:	0005883a 	mov	r2,zero
    27f8:	00000306 	br	2808 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    27fc:	00bffa84 	movi	r2,-22
    2800:	00000106 	br	2808 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    2804:	00bfde84 	movi	r2,-134
  }
}
    2808:	e037883a 	mov	sp,fp
    280c:	df000017 	ldw	fp,0(sp)
    2810:	dec00104 	addi	sp,sp,4
    2814:	f800283a 	ret

00002818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2818:	defffe04 	addi	sp,sp,-8
    281c:	dfc00115 	stw	ra,4(sp)
    2820:	df000015 	stw	fp,0(sp)
    2824:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2828:	d0a00517 	ldw	r2,-32748(gp)
    282c:	10000326 	beq	r2,zero,283c <alt_get_errno+0x24>
    2830:	d0a00517 	ldw	r2,-32748(gp)
    2834:	103ee83a 	callr	r2
    2838:	00000106 	br	2840 <alt_get_errno+0x28>
    283c:	d0a6e404 	addi	r2,gp,-25712
}
    2840:	e037883a 	mov	sp,fp
    2844:	dfc00117 	ldw	ra,4(sp)
    2848:	df000017 	ldw	fp,0(sp)
    284c:	dec00204 	addi	sp,sp,8
    2850:	f800283a 	ret

00002854 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2854:	defffb04 	addi	sp,sp,-20
    2858:	dfc00415 	stw	ra,16(sp)
    285c:	df000315 	stw	fp,12(sp)
    2860:	df000304 	addi	fp,sp,12
    2864:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2868:	e0bfff17 	ldw	r2,-4(fp)
    286c:	10000616 	blt	r2,zero,2888 <close+0x34>
    2870:	e0bfff17 	ldw	r2,-4(fp)
    2874:	10c00324 	muli	r3,r2,12
    2878:	008000b4 	movhi	r2,2
    287c:	10bdf604 	addi	r2,r2,-2088
    2880:	1885883a 	add	r2,r3,r2
    2884:	00000106 	br	288c <close+0x38>
    2888:	0005883a 	mov	r2,zero
    288c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    2890:	e0bffd17 	ldw	r2,-12(fp)
    2894:	10001926 	beq	r2,zero,28fc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2898:	e0bffd17 	ldw	r2,-12(fp)
    289c:	10800017 	ldw	r2,0(r2)
    28a0:	10800417 	ldw	r2,16(r2)
    28a4:	10000626 	beq	r2,zero,28c0 <close+0x6c>
    28a8:	e0bffd17 	ldw	r2,-12(fp)
    28ac:	10800017 	ldw	r2,0(r2)
    28b0:	10800417 	ldw	r2,16(r2)
    28b4:	e13ffd17 	ldw	r4,-12(fp)
    28b8:	103ee83a 	callr	r2
    28bc:	00000106 	br	28c4 <close+0x70>
    28c0:	0005883a 	mov	r2,zero
    28c4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    28c8:	e13fff17 	ldw	r4,-4(fp)
    28cc:	00030500 	call	3050 <alt_release_fd>
    if (rval < 0)
    28d0:	e0bffe17 	ldw	r2,-8(fp)
    28d4:	1000070e 	bge	r2,zero,28f4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    28d8:	00028180 	call	2818 <alt_get_errno>
    28dc:	1007883a 	mov	r3,r2
    28e0:	e0bffe17 	ldw	r2,-8(fp)
    28e4:	0085c83a 	sub	r2,zero,r2
    28e8:	18800015 	stw	r2,0(r3)
      return -1;
    28ec:	00bfffc4 	movi	r2,-1
    28f0:	00000706 	br	2910 <close+0xbc>
    }
    return 0;
    28f4:	0005883a 	mov	r2,zero
    28f8:	00000506 	br	2910 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    28fc:	00028180 	call	2818 <alt_get_errno>
    2900:	1007883a 	mov	r3,r2
    2904:	00801444 	movi	r2,81
    2908:	18800015 	stw	r2,0(r3)
    return -1;
    290c:	00bfffc4 	movi	r2,-1
  }
}
    2910:	e037883a 	mov	sp,fp
    2914:	dfc00117 	ldw	ra,4(sp)
    2918:	df000017 	ldw	fp,0(sp)
    291c:	dec00204 	addi	sp,sp,8
    2920:	f800283a 	ret

00002924 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2924:	defffe04 	addi	sp,sp,-8
    2928:	df000115 	stw	fp,4(sp)
    292c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    2930:	e03fff15 	stw	zero,-4(fp)
    2934:	00000506 	br	294c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    2938:	e0bfff17 	ldw	r2,-4(fp)
    293c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    2940:	e0bfff17 	ldw	r2,-4(fp)
    2944:	10800804 	addi	r2,r2,32
    2948:	e0bfff15 	stw	r2,-4(fp)
    294c:	e0bfff17 	ldw	r2,-4(fp)
    2950:	10820030 	cmpltui	r2,r2,2048
    2954:	103ff81e 	bne	r2,zero,2938 <__alt_mem_onchip_memory2_0+0xf7bfe938>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2958:	0001883a 	nop
    295c:	e037883a 	mov	sp,fp
    2960:	df000017 	ldw	fp,0(sp)
    2964:	dec00104 	addi	sp,sp,4
    2968:	f800283a 	ret

0000296c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    296c:	defffc04 	addi	sp,sp,-16
    2970:	df000315 	stw	fp,12(sp)
    2974:	df000304 	addi	fp,sp,12
    2978:	e13ffd15 	stw	r4,-12(fp)
    297c:	e17ffe15 	stw	r5,-8(fp)
    2980:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2984:	e0bfff17 	ldw	r2,-4(fp)
}
    2988:	e037883a 	mov	sp,fp
    298c:	df000017 	ldw	fp,0(sp)
    2990:	dec00104 	addi	sp,sp,4
    2994:	f800283a 	ret

00002998 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2998:	defffe04 	addi	sp,sp,-8
    299c:	dfc00115 	stw	ra,4(sp)
    29a0:	df000015 	stw	fp,0(sp)
    29a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    29a8:	d0a00517 	ldw	r2,-32748(gp)
    29ac:	10000326 	beq	r2,zero,29bc <alt_get_errno+0x24>
    29b0:	d0a00517 	ldw	r2,-32748(gp)
    29b4:	103ee83a 	callr	r2
    29b8:	00000106 	br	29c0 <alt_get_errno+0x28>
    29bc:	d0a6e404 	addi	r2,gp,-25712
}
    29c0:	e037883a 	mov	sp,fp
    29c4:	dfc00117 	ldw	ra,4(sp)
    29c8:	df000017 	ldw	fp,0(sp)
    29cc:	dec00204 	addi	sp,sp,8
    29d0:	f800283a 	ret

000029d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    29d4:	defffa04 	addi	sp,sp,-24
    29d8:	dfc00515 	stw	ra,20(sp)
    29dc:	df000415 	stw	fp,16(sp)
    29e0:	df000404 	addi	fp,sp,16
    29e4:	e13ffe15 	stw	r4,-8(fp)
    29e8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    29ec:	e0bffe17 	ldw	r2,-8(fp)
    29f0:	10000326 	beq	r2,zero,2a00 <alt_dev_llist_insert+0x2c>
    29f4:	e0bffe17 	ldw	r2,-8(fp)
    29f8:	10800217 	ldw	r2,8(r2)
    29fc:	1000061e 	bne	r2,zero,2a18 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    2a00:	00029980 	call	2998 <alt_get_errno>
    2a04:	1007883a 	mov	r3,r2
    2a08:	00800584 	movi	r2,22
    2a0c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    2a10:	00bffa84 	movi	r2,-22
    2a14:	00001306 	br	2a64 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    2a18:	e0bffe17 	ldw	r2,-8(fp)
    2a1c:	e0ffff17 	ldw	r3,-4(fp)
    2a20:	e0fffc15 	stw	r3,-16(fp)
    2a24:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2a28:	e0bffd17 	ldw	r2,-12(fp)
    2a2c:	e0fffc17 	ldw	r3,-16(fp)
    2a30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    2a34:	e0bffc17 	ldw	r2,-16(fp)
    2a38:	10c00017 	ldw	r3,0(r2)
    2a3c:	e0bffd17 	ldw	r2,-12(fp)
    2a40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2a44:	e0bffc17 	ldw	r2,-16(fp)
    2a48:	10800017 	ldw	r2,0(r2)
    2a4c:	e0fffd17 	ldw	r3,-12(fp)
    2a50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    2a54:	e0bffc17 	ldw	r2,-16(fp)
    2a58:	e0fffd17 	ldw	r3,-12(fp)
    2a5c:	10c00015 	stw	r3,0(r2)

  return 0;  
    2a60:	0005883a 	mov	r2,zero
}
    2a64:	e037883a 	mov	sp,fp
    2a68:	dfc00117 	ldw	ra,4(sp)
    2a6c:	df000017 	ldw	fp,0(sp)
    2a70:	dec00204 	addi	sp,sp,8
    2a74:	f800283a 	ret

00002a78 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2a78:	defffa04 	addi	sp,sp,-24
    2a7c:	dfc00515 	stw	ra,20(sp)
    2a80:	df000415 	stw	fp,16(sp)
    2a84:	df000404 	addi	fp,sp,16
    2a88:	e13ffe15 	stw	r4,-8(fp)
    2a8c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    2a90:	e0bfff17 	ldw	r2,-4(fp)
    2a94:	10800017 	ldw	r2,0(r2)
    2a98:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    2a9c:	e13ffe17 	ldw	r4,-8(fp)
    2aa0:	0004e2c0 	call	4e2c <strlen>
    2aa4:	10800044 	addi	r2,r2,1
    2aa8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2aac:	00000d06 	br	2ae4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2ab0:	e0bffc17 	ldw	r2,-16(fp)
    2ab4:	10800217 	ldw	r2,8(r2)
    2ab8:	e0fffd17 	ldw	r3,-12(fp)
    2abc:	180d883a 	mov	r6,r3
    2ac0:	e17ffe17 	ldw	r5,-8(fp)
    2ac4:	1009883a 	mov	r4,r2
    2ac8:	00043ec0 	call	43ec <memcmp>
    2acc:	1000021e 	bne	r2,zero,2ad8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    2ad0:	e0bffc17 	ldw	r2,-16(fp)
    2ad4:	00000706 	br	2af4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    2ad8:	e0bffc17 	ldw	r2,-16(fp)
    2adc:	10800017 	ldw	r2,0(r2)
    2ae0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2ae4:	e0fffc17 	ldw	r3,-16(fp)
    2ae8:	e0bfff17 	ldw	r2,-4(fp)
    2aec:	18bff01e 	bne	r3,r2,2ab0 <__alt_mem_onchip_memory2_0+0xf7bfeab0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    2af0:	0005883a 	mov	r2,zero
}
    2af4:	e037883a 	mov	sp,fp
    2af8:	dfc00117 	ldw	ra,4(sp)
    2afc:	df000017 	ldw	fp,0(sp)
    2b00:	dec00204 	addi	sp,sp,8
    2b04:	f800283a 	ret

00002b08 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2b08:	defffe04 	addi	sp,sp,-8
    2b0c:	dfc00115 	stw	ra,4(sp)
    2b10:	df000015 	stw	fp,0(sp)
    2b14:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    2b18:	01440004 	movi	r5,4096
    2b1c:	0009883a 	mov	r4,zero
    2b20:	00034280 	call	3428 <alt_icache_flush>
#endif
}
    2b24:	0001883a 	nop
    2b28:	e037883a 	mov	sp,fp
    2b2c:	dfc00117 	ldw	ra,4(sp)
    2b30:	df000017 	ldw	fp,0(sp)
    2b34:	dec00204 	addi	sp,sp,8
    2b38:	f800283a 	ret

00002b3c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2b3c:	defff904 	addi	sp,sp,-28
    2b40:	dfc00615 	stw	ra,24(sp)
    2b44:	df000515 	stw	fp,20(sp)
    2b48:	df000504 	addi	fp,sp,20
    2b4c:	e13ffc15 	stw	r4,-16(fp)
    2b50:	e17ffd15 	stw	r5,-12(fp)
    2b54:	e1bffe15 	stw	r6,-8(fp)
    2b58:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    2b5c:	e1bfff17 	ldw	r6,-4(fp)
    2b60:	e17ffe17 	ldw	r5,-8(fp)
    2b64:	e13ffd17 	ldw	r4,-12(fp)
    2b68:	0002efc0 	call	2efc <open>
    2b6c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    2b70:	e0bffb17 	ldw	r2,-20(fp)
    2b74:	10001c16 	blt	r2,zero,2be8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    2b78:	008000b4 	movhi	r2,2
    2b7c:	10bdf604 	addi	r2,r2,-2088
    2b80:	e0fffb17 	ldw	r3,-20(fp)
    2b84:	18c00324 	muli	r3,r3,12
    2b88:	10c5883a 	add	r2,r2,r3
    2b8c:	10c00017 	ldw	r3,0(r2)
    2b90:	e0bffc17 	ldw	r2,-16(fp)
    2b94:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    2b98:	008000b4 	movhi	r2,2
    2b9c:	10bdf604 	addi	r2,r2,-2088
    2ba0:	e0fffb17 	ldw	r3,-20(fp)
    2ba4:	18c00324 	muli	r3,r3,12
    2ba8:	10c5883a 	add	r2,r2,r3
    2bac:	10800104 	addi	r2,r2,4
    2bb0:	10c00017 	ldw	r3,0(r2)
    2bb4:	e0bffc17 	ldw	r2,-16(fp)
    2bb8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2bbc:	008000b4 	movhi	r2,2
    2bc0:	10bdf604 	addi	r2,r2,-2088
    2bc4:	e0fffb17 	ldw	r3,-20(fp)
    2bc8:	18c00324 	muli	r3,r3,12
    2bcc:	10c5883a 	add	r2,r2,r3
    2bd0:	10800204 	addi	r2,r2,8
    2bd4:	10c00017 	ldw	r3,0(r2)
    2bd8:	e0bffc17 	ldw	r2,-16(fp)
    2bdc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    2be0:	e13ffb17 	ldw	r4,-20(fp)
    2be4:	00030500 	call	3050 <alt_release_fd>
  }
} 
    2be8:	0001883a 	nop
    2bec:	e037883a 	mov	sp,fp
    2bf0:	dfc00117 	ldw	ra,4(sp)
    2bf4:	df000017 	ldw	fp,0(sp)
    2bf8:	dec00204 	addi	sp,sp,8
    2bfc:	f800283a 	ret

00002c00 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2c00:	defffb04 	addi	sp,sp,-20
    2c04:	dfc00415 	stw	ra,16(sp)
    2c08:	df000315 	stw	fp,12(sp)
    2c0c:	df000304 	addi	fp,sp,12
    2c10:	e13ffd15 	stw	r4,-12(fp)
    2c14:	e17ffe15 	stw	r5,-8(fp)
    2c18:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2c1c:	01c07fc4 	movi	r7,511
    2c20:	01800044 	movi	r6,1
    2c24:	e17ffd17 	ldw	r5,-12(fp)
    2c28:	010000b4 	movhi	r4,2
    2c2c:	213df904 	addi	r4,r4,-2076
    2c30:	0002b3c0 	call	2b3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2c34:	01c07fc4 	movi	r7,511
    2c38:	000d883a 	mov	r6,zero
    2c3c:	e17ffe17 	ldw	r5,-8(fp)
    2c40:	010000b4 	movhi	r4,2
    2c44:	213df604 	addi	r4,r4,-2088
    2c48:	0002b3c0 	call	2b3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2c4c:	01c07fc4 	movi	r7,511
    2c50:	01800044 	movi	r6,1
    2c54:	e17fff17 	ldw	r5,-4(fp)
    2c58:	010000b4 	movhi	r4,2
    2c5c:	213dfc04 	addi	r4,r4,-2064
    2c60:	0002b3c0 	call	2b3c <alt_open_fd>
}  
    2c64:	0001883a 	nop
    2c68:	e037883a 	mov	sp,fp
    2c6c:	dfc00117 	ldw	ra,4(sp)
    2c70:	df000017 	ldw	fp,0(sp)
    2c74:	dec00204 	addi	sp,sp,8
    2c78:	f800283a 	ret

00002c7c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    2c7c:	defff004 	addi	sp,sp,-64
    2c80:	df000f15 	stw	fp,60(sp)
    2c84:	df000f04 	addi	fp,sp,60
    2c88:	e13ffd15 	stw	r4,-12(fp)
    2c8c:	e17ffe15 	stw	r5,-8(fp)
    2c90:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    2c94:	00bffa84 	movi	r2,-22
    2c98:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2c9c:	e0bffd17 	ldw	r2,-12(fp)
    2ca0:	10800828 	cmpgeui	r2,r2,32
    2ca4:	1000501e 	bne	r2,zero,2de8 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2ca8:	0005303a 	rdctl	r2,status
    2cac:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2cb0:	e0fff617 	ldw	r3,-40(fp)
    2cb4:	00bfff84 	movi	r2,-2
    2cb8:	1884703a 	and	r2,r3,r2
    2cbc:	1001703a 	wrctl	status,r2
  
  return context;
    2cc0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    2cc4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    2cc8:	00800174 	movhi	r2,5
    2ccc:	1082d304 	addi	r2,r2,2892
    2cd0:	e0fffd17 	ldw	r3,-12(fp)
    2cd4:	180690fa 	slli	r3,r3,3
    2cd8:	10c5883a 	add	r2,r2,r3
    2cdc:	e0ffff17 	ldw	r3,-4(fp)
    2ce0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    2ce4:	00800174 	movhi	r2,5
    2ce8:	1082d304 	addi	r2,r2,2892
    2cec:	e0fffd17 	ldw	r3,-12(fp)
    2cf0:	180690fa 	slli	r3,r3,3
    2cf4:	10c5883a 	add	r2,r2,r3
    2cf8:	10800104 	addi	r2,r2,4
    2cfc:	e0fffe17 	ldw	r3,-8(fp)
    2d00:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    2d04:	e0bfff17 	ldw	r2,-4(fp)
    2d08:	10001926 	beq	r2,zero,2d70 <alt_irq_register+0xf4>
    2d0c:	e0bffd17 	ldw	r2,-12(fp)
    2d10:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2d14:	0005303a 	rdctl	r2,status
    2d18:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2d1c:	e0fff717 	ldw	r3,-36(fp)
    2d20:	00bfff84 	movi	r2,-2
    2d24:	1884703a 	and	r2,r3,r2
    2d28:	1001703a 	wrctl	status,r2
  
  return context;
    2d2c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2d30:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    2d34:	00c00044 	movi	r3,1
    2d38:	e0bff217 	ldw	r2,-56(fp)
    2d3c:	1884983a 	sll	r2,r3,r2
    2d40:	1007883a 	mov	r3,r2
    2d44:	d0a6e017 	ldw	r2,-25728(gp)
    2d48:	1884b03a 	or	r2,r3,r2
    2d4c:	d0a6e015 	stw	r2,-25728(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2d50:	d0a6e017 	ldw	r2,-25728(gp)
    2d54:	100170fa 	wrctl	ienable,r2
    2d58:	e0bff817 	ldw	r2,-32(fp)
    2d5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2d60:	e0bff917 	ldw	r2,-28(fp)
    2d64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2d68:	0005883a 	mov	r2,zero
    2d6c:	00001906 	br	2dd4 <alt_irq_register+0x158>
    2d70:	e0bffd17 	ldw	r2,-12(fp)
    2d74:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2d78:	0005303a 	rdctl	r2,status
    2d7c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2d80:	e0fffa17 	ldw	r3,-24(fp)
    2d84:	00bfff84 	movi	r2,-2
    2d88:	1884703a 	and	r2,r3,r2
    2d8c:	1001703a 	wrctl	status,r2
  
  return context;
    2d90:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2d94:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    2d98:	00c00044 	movi	r3,1
    2d9c:	e0bff417 	ldw	r2,-48(fp)
    2da0:	1884983a 	sll	r2,r3,r2
    2da4:	0084303a 	nor	r2,zero,r2
    2da8:	1007883a 	mov	r3,r2
    2dac:	d0a6e017 	ldw	r2,-25728(gp)
    2db0:	1884703a 	and	r2,r3,r2
    2db4:	d0a6e015 	stw	r2,-25728(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2db8:	d0a6e017 	ldw	r2,-25728(gp)
    2dbc:	100170fa 	wrctl	ienable,r2
    2dc0:	e0bffb17 	ldw	r2,-20(fp)
    2dc4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2dc8:	e0bffc17 	ldw	r2,-16(fp)
    2dcc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2dd0:	0005883a 	mov	r2,zero
    2dd4:	e0bff115 	stw	r2,-60(fp)
    2dd8:	e0bff317 	ldw	r2,-52(fp)
    2ddc:	e0bff515 	stw	r2,-44(fp)
    2de0:	e0bff517 	ldw	r2,-44(fp)
    2de4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    2de8:	e0bff117 	ldw	r2,-60(fp)
}
    2dec:	e037883a 	mov	sp,fp
    2df0:	df000017 	ldw	fp,0(sp)
    2df4:	dec00104 	addi	sp,sp,4
    2df8:	f800283a 	ret

00002dfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2dfc:	defffe04 	addi	sp,sp,-8
    2e00:	dfc00115 	stw	ra,4(sp)
    2e04:	df000015 	stw	fp,0(sp)
    2e08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2e0c:	d0a00517 	ldw	r2,-32748(gp)
    2e10:	10000326 	beq	r2,zero,2e20 <alt_get_errno+0x24>
    2e14:	d0a00517 	ldw	r2,-32748(gp)
    2e18:	103ee83a 	callr	r2
    2e1c:	00000106 	br	2e24 <alt_get_errno+0x28>
    2e20:	d0a6e404 	addi	r2,gp,-25712
}
    2e24:	e037883a 	mov	sp,fp
    2e28:	dfc00117 	ldw	ra,4(sp)
    2e2c:	df000017 	ldw	fp,0(sp)
    2e30:	dec00204 	addi	sp,sp,8
    2e34:	f800283a 	ret

00002e38 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    2e38:	defffd04 	addi	sp,sp,-12
    2e3c:	df000215 	stw	fp,8(sp)
    2e40:	df000204 	addi	fp,sp,8
    2e44:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2e48:	e0bfff17 	ldw	r2,-4(fp)
    2e4c:	10800217 	ldw	r2,8(r2)
    2e50:	10d00034 	orhi	r3,r2,16384
    2e54:	e0bfff17 	ldw	r2,-4(fp)
    2e58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2e5c:	e03ffe15 	stw	zero,-8(fp)
    2e60:	00001d06 	br	2ed8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2e64:	008000b4 	movhi	r2,2
    2e68:	10bdf604 	addi	r2,r2,-2088
    2e6c:	e0fffe17 	ldw	r3,-8(fp)
    2e70:	18c00324 	muli	r3,r3,12
    2e74:	10c5883a 	add	r2,r2,r3
    2e78:	10c00017 	ldw	r3,0(r2)
    2e7c:	e0bfff17 	ldw	r2,-4(fp)
    2e80:	10800017 	ldw	r2,0(r2)
    2e84:	1880111e 	bne	r3,r2,2ecc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2e88:	008000b4 	movhi	r2,2
    2e8c:	10bdf604 	addi	r2,r2,-2088
    2e90:	e0fffe17 	ldw	r3,-8(fp)
    2e94:	18c00324 	muli	r3,r3,12
    2e98:	10c5883a 	add	r2,r2,r3
    2e9c:	10800204 	addi	r2,r2,8
    2ea0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2ea4:	1000090e 	bge	r2,zero,2ecc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    2ea8:	e0bffe17 	ldw	r2,-8(fp)
    2eac:	10c00324 	muli	r3,r2,12
    2eb0:	008000b4 	movhi	r2,2
    2eb4:	10bdf604 	addi	r2,r2,-2088
    2eb8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2ebc:	e0bfff17 	ldw	r2,-4(fp)
    2ec0:	18800226 	beq	r3,r2,2ecc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    2ec4:	00bffcc4 	movi	r2,-13
    2ec8:	00000806 	br	2eec <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2ecc:	e0bffe17 	ldw	r2,-8(fp)
    2ed0:	10800044 	addi	r2,r2,1
    2ed4:	e0bffe15 	stw	r2,-8(fp)
    2ed8:	d0a00417 	ldw	r2,-32752(gp)
    2edc:	1007883a 	mov	r3,r2
    2ee0:	e0bffe17 	ldw	r2,-8(fp)
    2ee4:	18bfdf2e 	bgeu	r3,r2,2e64 <__alt_mem_onchip_memory2_0+0xf7bfee64>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    2ee8:	0005883a 	mov	r2,zero
}
    2eec:	e037883a 	mov	sp,fp
    2ef0:	df000017 	ldw	fp,0(sp)
    2ef4:	dec00104 	addi	sp,sp,4
    2ef8:	f800283a 	ret

00002efc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2efc:	defff604 	addi	sp,sp,-40
    2f00:	dfc00915 	stw	ra,36(sp)
    2f04:	df000815 	stw	fp,32(sp)
    2f08:	df000804 	addi	fp,sp,32
    2f0c:	e13ffd15 	stw	r4,-12(fp)
    2f10:	e17ffe15 	stw	r5,-8(fp)
    2f14:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    2f18:	00bfffc4 	movi	r2,-1
    2f1c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    2f20:	00bffb44 	movi	r2,-19
    2f24:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    2f28:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2f2c:	d1600204 	addi	r5,gp,-32760
    2f30:	e13ffd17 	ldw	r4,-12(fp)
    2f34:	0002a780 	call	2a78 <alt_find_dev>
    2f38:	e0bff815 	stw	r2,-32(fp)
    2f3c:	e0bff817 	ldw	r2,-32(fp)
    2f40:	1000051e 	bne	r2,zero,2f58 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2f44:	e13ffd17 	ldw	r4,-12(fp)
    2f48:	000327c0 	call	327c <alt_find_file>
    2f4c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    2f50:	00800044 	movi	r2,1
    2f54:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2f58:	e0bff817 	ldw	r2,-32(fp)
    2f5c:	10002926 	beq	r2,zero,3004 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    2f60:	e13ff817 	ldw	r4,-32(fp)
    2f64:	00033840 	call	3384 <alt_get_fd>
    2f68:	e0bff915 	stw	r2,-28(fp)
    2f6c:	e0bff917 	ldw	r2,-28(fp)
    2f70:	1000030e 	bge	r2,zero,2f80 <open+0x84>
    {
      status = index;
    2f74:	e0bff917 	ldw	r2,-28(fp)
    2f78:	e0bffa15 	stw	r2,-24(fp)
    2f7c:	00002306 	br	300c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    2f80:	e0bff917 	ldw	r2,-28(fp)
    2f84:	10c00324 	muli	r3,r2,12
    2f88:	008000b4 	movhi	r2,2
    2f8c:	10bdf604 	addi	r2,r2,-2088
    2f90:	1885883a 	add	r2,r3,r2
    2f94:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2f98:	e0fffe17 	ldw	r3,-8(fp)
    2f9c:	00900034 	movhi	r2,16384
    2fa0:	10bfffc4 	addi	r2,r2,-1
    2fa4:	1886703a 	and	r3,r3,r2
    2fa8:	e0bffc17 	ldw	r2,-16(fp)
    2fac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2fb0:	e0bffb17 	ldw	r2,-20(fp)
    2fb4:	1000051e 	bne	r2,zero,2fcc <open+0xd0>
    2fb8:	e13ffc17 	ldw	r4,-16(fp)
    2fbc:	0002e380 	call	2e38 <alt_file_locked>
    2fc0:	e0bffa15 	stw	r2,-24(fp)
    2fc4:	e0bffa17 	ldw	r2,-24(fp)
    2fc8:	10001016 	blt	r2,zero,300c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2fcc:	e0bff817 	ldw	r2,-32(fp)
    2fd0:	10800317 	ldw	r2,12(r2)
    2fd4:	10000826 	beq	r2,zero,2ff8 <open+0xfc>
    2fd8:	e0bff817 	ldw	r2,-32(fp)
    2fdc:	10800317 	ldw	r2,12(r2)
    2fe0:	e1ffff17 	ldw	r7,-4(fp)
    2fe4:	e1bffe17 	ldw	r6,-8(fp)
    2fe8:	e17ffd17 	ldw	r5,-12(fp)
    2fec:	e13ffc17 	ldw	r4,-16(fp)
    2ff0:	103ee83a 	callr	r2
    2ff4:	00000106 	br	2ffc <open+0x100>
    2ff8:	0005883a 	mov	r2,zero
    2ffc:	e0bffa15 	stw	r2,-24(fp)
    3000:	00000206 	br	300c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    3004:	00bffb44 	movi	r2,-19
    3008:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    300c:	e0bffa17 	ldw	r2,-24(fp)
    3010:	1000090e 	bge	r2,zero,3038 <open+0x13c>
  {
    alt_release_fd (index);  
    3014:	e13ff917 	ldw	r4,-28(fp)
    3018:	00030500 	call	3050 <alt_release_fd>
    ALT_ERRNO = -status;
    301c:	0002dfc0 	call	2dfc <alt_get_errno>
    3020:	1007883a 	mov	r3,r2
    3024:	e0bffa17 	ldw	r2,-24(fp)
    3028:	0085c83a 	sub	r2,zero,r2
    302c:	18800015 	stw	r2,0(r3)
    return -1;
    3030:	00bfffc4 	movi	r2,-1
    3034:	00000106 	br	303c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    3038:	e0bff917 	ldw	r2,-28(fp)
}
    303c:	e037883a 	mov	sp,fp
    3040:	dfc00117 	ldw	ra,4(sp)
    3044:	df000017 	ldw	fp,0(sp)
    3048:	dec00204 	addi	sp,sp,8
    304c:	f800283a 	ret

00003050 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3050:	defffe04 	addi	sp,sp,-8
    3054:	df000115 	stw	fp,4(sp)
    3058:	df000104 	addi	fp,sp,4
    305c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3060:	e0bfff17 	ldw	r2,-4(fp)
    3064:	108000d0 	cmplti	r2,r2,3
    3068:	10000d1e 	bne	r2,zero,30a0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    306c:	008000b4 	movhi	r2,2
    3070:	10bdf604 	addi	r2,r2,-2088
    3074:	e0ffff17 	ldw	r3,-4(fp)
    3078:	18c00324 	muli	r3,r3,12
    307c:	10c5883a 	add	r2,r2,r3
    3080:	10800204 	addi	r2,r2,8
    3084:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3088:	008000b4 	movhi	r2,2
    308c:	10bdf604 	addi	r2,r2,-2088
    3090:	e0ffff17 	ldw	r3,-4(fp)
    3094:	18c00324 	muli	r3,r3,12
    3098:	10c5883a 	add	r2,r2,r3
    309c:	10000015 	stw	zero,0(r2)
  }
}
    30a0:	0001883a 	nop
    30a4:	e037883a 	mov	sp,fp
    30a8:	df000017 	ldw	fp,0(sp)
    30ac:	dec00104 	addi	sp,sp,4
    30b0:	f800283a 	ret

000030b4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    30b4:	defffa04 	addi	sp,sp,-24
    30b8:	df000515 	stw	fp,20(sp)
    30bc:	df000504 	addi	fp,sp,20
    30c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    30c4:	0005303a 	rdctl	r2,status
    30c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    30cc:	e0fffc17 	ldw	r3,-16(fp)
    30d0:	00bfff84 	movi	r2,-2
    30d4:	1884703a 	and	r2,r3,r2
    30d8:	1001703a 	wrctl	status,r2
  
  return context;
    30dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    30e0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    30e4:	e0bfff17 	ldw	r2,-4(fp)
    30e8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    30ec:	e0bffd17 	ldw	r2,-12(fp)
    30f0:	10800017 	ldw	r2,0(r2)
    30f4:	e0fffd17 	ldw	r3,-12(fp)
    30f8:	18c00117 	ldw	r3,4(r3)
    30fc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    3100:	e0bffd17 	ldw	r2,-12(fp)
    3104:	10800117 	ldw	r2,4(r2)
    3108:	e0fffd17 	ldw	r3,-12(fp)
    310c:	18c00017 	ldw	r3,0(r3)
    3110:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    3114:	e0bffd17 	ldw	r2,-12(fp)
    3118:	e0fffd17 	ldw	r3,-12(fp)
    311c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    3120:	e0bffd17 	ldw	r2,-12(fp)
    3124:	e0fffd17 	ldw	r3,-12(fp)
    3128:	10c00015 	stw	r3,0(r2)
    312c:	e0bffb17 	ldw	r2,-20(fp)
    3130:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3134:	e0bffe17 	ldw	r2,-8(fp)
    3138:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    313c:	0001883a 	nop
    3140:	e037883a 	mov	sp,fp
    3144:	df000017 	ldw	fp,0(sp)
    3148:	dec00104 	addi	sp,sp,4
    314c:	f800283a 	ret

00003150 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    3150:	defffb04 	addi	sp,sp,-20
    3154:	dfc00415 	stw	ra,16(sp)
    3158:	df000315 	stw	fp,12(sp)
    315c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    3160:	d0a00717 	ldw	r2,-32740(gp)
    3164:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    3168:	d0a6e217 	ldw	r2,-25720(gp)
    316c:	10800044 	addi	r2,r2,1
    3170:	d0a6e215 	stw	r2,-25720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3174:	00002e06 	br	3230 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    3178:	e0bffd17 	ldw	r2,-12(fp)
    317c:	10800017 	ldw	r2,0(r2)
    3180:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    3184:	e0bffd17 	ldw	r2,-12(fp)
    3188:	10800403 	ldbu	r2,16(r2)
    318c:	10803fcc 	andi	r2,r2,255
    3190:	10000426 	beq	r2,zero,31a4 <alt_tick+0x54>
    3194:	d0a6e217 	ldw	r2,-25720(gp)
    3198:	1000021e 	bne	r2,zero,31a4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    319c:	e0bffd17 	ldw	r2,-12(fp)
    31a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    31a4:	e0bffd17 	ldw	r2,-12(fp)
    31a8:	10800217 	ldw	r2,8(r2)
    31ac:	d0e6e217 	ldw	r3,-25720(gp)
    31b0:	18801d36 	bltu	r3,r2,3228 <alt_tick+0xd8>
    31b4:	e0bffd17 	ldw	r2,-12(fp)
    31b8:	10800403 	ldbu	r2,16(r2)
    31bc:	10803fcc 	andi	r2,r2,255
    31c0:	1000191e 	bne	r2,zero,3228 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    31c4:	e0bffd17 	ldw	r2,-12(fp)
    31c8:	10800317 	ldw	r2,12(r2)
    31cc:	e0fffd17 	ldw	r3,-12(fp)
    31d0:	18c00517 	ldw	r3,20(r3)
    31d4:	1809883a 	mov	r4,r3
    31d8:	103ee83a 	callr	r2
    31dc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    31e0:	e0bfff17 	ldw	r2,-4(fp)
    31e4:	1000031e 	bne	r2,zero,31f4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    31e8:	e13ffd17 	ldw	r4,-12(fp)
    31ec:	00030b40 	call	30b4 <alt_alarm_stop>
    31f0:	00000d06 	br	3228 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    31f4:	e0bffd17 	ldw	r2,-12(fp)
    31f8:	10c00217 	ldw	r3,8(r2)
    31fc:	e0bfff17 	ldw	r2,-4(fp)
    3200:	1887883a 	add	r3,r3,r2
    3204:	e0bffd17 	ldw	r2,-12(fp)
    3208:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    320c:	e0bffd17 	ldw	r2,-12(fp)
    3210:	10c00217 	ldw	r3,8(r2)
    3214:	d0a6e217 	ldw	r2,-25720(gp)
    3218:	1880032e 	bgeu	r3,r2,3228 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    321c:	e0bffd17 	ldw	r2,-12(fp)
    3220:	00c00044 	movi	r3,1
    3224:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    3228:	e0bffe17 	ldw	r2,-8(fp)
    322c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3230:	e0fffd17 	ldw	r3,-12(fp)
    3234:	d0a00704 	addi	r2,gp,-32740
    3238:	18bfcf1e 	bne	r3,r2,3178 <__alt_mem_onchip_memory2_0+0xf7bff178>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    323c:	0001883a 	nop
}
    3240:	0001883a 	nop
    3244:	e037883a 	mov	sp,fp
    3248:	dfc00117 	ldw	ra,4(sp)
    324c:	df000017 	ldw	fp,0(sp)
    3250:	dec00204 	addi	sp,sp,8
    3254:	f800283a 	ret

00003258 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    3258:	deffff04 	addi	sp,sp,-4
    325c:	df000015 	stw	fp,0(sp)
    3260:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    3264:	000170fa 	wrctl	ienable,zero
}
    3268:	0001883a 	nop
    326c:	e037883a 	mov	sp,fp
    3270:	df000017 	ldw	fp,0(sp)
    3274:	dec00104 	addi	sp,sp,4
    3278:	f800283a 	ret

0000327c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    327c:	defffb04 	addi	sp,sp,-20
    3280:	dfc00415 	stw	ra,16(sp)
    3284:	df000315 	stw	fp,12(sp)
    3288:	df000304 	addi	fp,sp,12
    328c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    3290:	d0a00017 	ldw	r2,-32768(gp)
    3294:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3298:	00003106 	br	3360 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    329c:	e0bffd17 	ldw	r2,-12(fp)
    32a0:	10800217 	ldw	r2,8(r2)
    32a4:	1009883a 	mov	r4,r2
    32a8:	0004e2c0 	call	4e2c <strlen>
    32ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    32b0:	e0bffd17 	ldw	r2,-12(fp)
    32b4:	10c00217 	ldw	r3,8(r2)
    32b8:	e0bffe17 	ldw	r2,-8(fp)
    32bc:	10bfffc4 	addi	r2,r2,-1
    32c0:	1885883a 	add	r2,r3,r2
    32c4:	10800003 	ldbu	r2,0(r2)
    32c8:	10803fcc 	andi	r2,r2,255
    32cc:	1080201c 	xori	r2,r2,128
    32d0:	10bfe004 	addi	r2,r2,-128
    32d4:	10800bd8 	cmpnei	r2,r2,47
    32d8:	1000031e 	bne	r2,zero,32e8 <alt_find_file+0x6c>
    {
      len -= 1;
    32dc:	e0bffe17 	ldw	r2,-8(fp)
    32e0:	10bfffc4 	addi	r2,r2,-1
    32e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    32e8:	e0bffe17 	ldw	r2,-8(fp)
    32ec:	e0ffff17 	ldw	r3,-4(fp)
    32f0:	1885883a 	add	r2,r3,r2
    32f4:	10800003 	ldbu	r2,0(r2)
    32f8:	10803fcc 	andi	r2,r2,255
    32fc:	1080201c 	xori	r2,r2,128
    3300:	10bfe004 	addi	r2,r2,-128
    3304:	10800be0 	cmpeqi	r2,r2,47
    3308:	1000081e 	bne	r2,zero,332c <alt_find_file+0xb0>
    330c:	e0bffe17 	ldw	r2,-8(fp)
    3310:	e0ffff17 	ldw	r3,-4(fp)
    3314:	1885883a 	add	r2,r3,r2
    3318:	10800003 	ldbu	r2,0(r2)
    331c:	10803fcc 	andi	r2,r2,255
    3320:	1080201c 	xori	r2,r2,128
    3324:	10bfe004 	addi	r2,r2,-128
    3328:	10000a1e 	bne	r2,zero,3354 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    332c:	e0bffd17 	ldw	r2,-12(fp)
    3330:	10800217 	ldw	r2,8(r2)
    3334:	e0fffe17 	ldw	r3,-8(fp)
    3338:	180d883a 	mov	r6,r3
    333c:	e17fff17 	ldw	r5,-4(fp)
    3340:	1009883a 	mov	r4,r2
    3344:	00043ec0 	call	43ec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3348:	1000021e 	bne	r2,zero,3354 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    334c:	e0bffd17 	ldw	r2,-12(fp)
    3350:	00000706 	br	3370 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    3354:	e0bffd17 	ldw	r2,-12(fp)
    3358:	10800017 	ldw	r2,0(r2)
    335c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3360:	e0fffd17 	ldw	r3,-12(fp)
    3364:	d0a00004 	addi	r2,gp,-32768
    3368:	18bfcc1e 	bne	r3,r2,329c <__alt_mem_onchip_memory2_0+0xf7bff29c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    336c:	0005883a 	mov	r2,zero
}
    3370:	e037883a 	mov	sp,fp
    3374:	dfc00117 	ldw	ra,4(sp)
    3378:	df000017 	ldw	fp,0(sp)
    337c:	dec00204 	addi	sp,sp,8
    3380:	f800283a 	ret

00003384 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    3384:	defffc04 	addi	sp,sp,-16
    3388:	df000315 	stw	fp,12(sp)
    338c:	df000304 	addi	fp,sp,12
    3390:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    3394:	00bffa04 	movi	r2,-24
    3398:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    339c:	e03ffd15 	stw	zero,-12(fp)
    33a0:	00001906 	br	3408 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    33a4:	008000b4 	movhi	r2,2
    33a8:	10bdf604 	addi	r2,r2,-2088
    33ac:	e0fffd17 	ldw	r3,-12(fp)
    33b0:	18c00324 	muli	r3,r3,12
    33b4:	10c5883a 	add	r2,r2,r3
    33b8:	10800017 	ldw	r2,0(r2)
    33bc:	10000f1e 	bne	r2,zero,33fc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    33c0:	008000b4 	movhi	r2,2
    33c4:	10bdf604 	addi	r2,r2,-2088
    33c8:	e0fffd17 	ldw	r3,-12(fp)
    33cc:	18c00324 	muli	r3,r3,12
    33d0:	10c5883a 	add	r2,r2,r3
    33d4:	e0ffff17 	ldw	r3,-4(fp)
    33d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    33dc:	d0e00417 	ldw	r3,-32752(gp)
    33e0:	e0bffd17 	ldw	r2,-12(fp)
    33e4:	1880020e 	bge	r3,r2,33f0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    33e8:	e0bffd17 	ldw	r2,-12(fp)
    33ec:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
    33f0:	e0bffd17 	ldw	r2,-12(fp)
    33f4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    33f8:	00000606 	br	3414 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    33fc:	e0bffd17 	ldw	r2,-12(fp)
    3400:	10800044 	addi	r2,r2,1
    3404:	e0bffd15 	stw	r2,-12(fp)
    3408:	e0bffd17 	ldw	r2,-12(fp)
    340c:	10800810 	cmplti	r2,r2,32
    3410:	103fe41e 	bne	r2,zero,33a4 <__alt_mem_onchip_memory2_0+0xf7bff3a4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    3414:	e0bffe17 	ldw	r2,-8(fp)
}
    3418:	e037883a 	mov	sp,fp
    341c:	df000017 	ldw	fp,0(sp)
    3420:	dec00104 	addi	sp,sp,4
    3424:	f800283a 	ret

00003428 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    3428:	defffb04 	addi	sp,sp,-20
    342c:	df000415 	stw	fp,16(sp)
    3430:	df000404 	addi	fp,sp,16
    3434:	e13ffe15 	stw	r4,-8(fp)
    3438:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    343c:	e0bfff17 	ldw	r2,-4(fp)
    3440:	10840070 	cmpltui	r2,r2,4097
    3444:	1000021e 	bne	r2,zero,3450 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    3448:	00840004 	movi	r2,4096
    344c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    3450:	e0fffe17 	ldw	r3,-8(fp)
    3454:	e0bfff17 	ldw	r2,-4(fp)
    3458:	1885883a 	add	r2,r3,r2
    345c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3460:	e0bffe17 	ldw	r2,-8(fp)
    3464:	e0bffc15 	stw	r2,-16(fp)
    3468:	00000506 	br	3480 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    346c:	e0bffc17 	ldw	r2,-16(fp)
    3470:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3474:	e0bffc17 	ldw	r2,-16(fp)
    3478:	10800804 	addi	r2,r2,32
    347c:	e0bffc15 	stw	r2,-16(fp)
    3480:	e0fffc17 	ldw	r3,-16(fp)
    3484:	e0bffd17 	ldw	r2,-12(fp)
    3488:	18bff836 	bltu	r3,r2,346c <__alt_mem_onchip_memory2_0+0xf7bff46c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    348c:	e0bffe17 	ldw	r2,-8(fp)
    3490:	108007cc 	andi	r2,r2,31
    3494:	10000226 	beq	r2,zero,34a0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    3498:	e0bffc17 	ldw	r2,-16(fp)
    349c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    34a0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    34a4:	0001883a 	nop
    34a8:	e037883a 	mov	sp,fp
    34ac:	df000017 	ldw	fp,0(sp)
    34b0:	dec00104 	addi	sp,sp,4
    34b4:	f800283a 	ret

000034b8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    34b8:	defffe04 	addi	sp,sp,-8
    34bc:	df000115 	stw	fp,4(sp)
    34c0:	df000104 	addi	fp,sp,4
    34c4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    34c8:	e0bfff17 	ldw	r2,-4(fp)
    34cc:	10bffe84 	addi	r2,r2,-6
    34d0:	10c00428 	cmpgeui	r3,r2,16
    34d4:	18001a1e 	bne	r3,zero,3540 <alt_exception_cause_generated_bad_addr+0x88>
    34d8:	100690ba 	slli	r3,r2,2
    34dc:	00800034 	movhi	r2,0
    34e0:	108d3c04 	addi	r2,r2,13552
    34e4:	1885883a 	add	r2,r3,r2
    34e8:	10800017 	ldw	r2,0(r2)
    34ec:	1000683a 	jmp	r2
    34f0:	00003530 	cmpltui	zero,zero,212
    34f4:	00003530 	cmpltui	zero,zero,212
    34f8:	00003540 	call	354 <playNote+0xc0>
    34fc:	00003540 	call	354 <playNote+0xc0>
    3500:	00003540 	call	354 <playNote+0xc0>
    3504:	00003530 	cmpltui	zero,zero,212
    3508:	00003538 	rdprs	zero,zero,212
    350c:	00003540 	call	354 <playNote+0xc0>
    3510:	00003530 	cmpltui	zero,zero,212
    3514:	00003530 	cmpltui	zero,zero,212
    3518:	00003540 	call	354 <playNote+0xc0>
    351c:	00003530 	cmpltui	zero,zero,212
    3520:	00003538 	rdprs	zero,zero,212
    3524:	00003540 	call	354 <playNote+0xc0>
    3528:	00003540 	call	354 <playNote+0xc0>
    352c:	00003530 	cmpltui	zero,zero,212
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    3530:	00800044 	movi	r2,1
    3534:	00000306 	br	3544 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    3538:	0005883a 	mov	r2,zero
    353c:	00000106 	br	3544 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    3540:	0005883a 	mov	r2,zero
  }
}
    3544:	e037883a 	mov	sp,fp
    3548:	df000017 	ldw	fp,0(sp)
    354c:	dec00104 	addi	sp,sp,4
    3550:	f800283a 	ret

00003554 <exit>:
    3554:	defffe04 	addi	sp,sp,-8
    3558:	000b883a 	mov	r5,zero
    355c:	dc000015 	stw	r16,0(sp)
    3560:	dfc00115 	stw	ra,4(sp)
    3564:	2021883a 	mov	r16,r4
    3568:	00051700 	call	5170 <__call_exitprocs>
    356c:	008000b4 	movhi	r2,2
    3570:	10806a04 	addi	r2,r2,424
    3574:	11000017 	ldw	r4,0(r2)
    3578:	20800f17 	ldw	r2,60(r4)
    357c:	10000126 	beq	r2,zero,3584 <exit+0x30>
    3580:	103ee83a 	callr	r2
    3584:	8009883a 	mov	r4,r16
    3588:	00067f00 	call	67f0 <_exit>

0000358c <_fputs_r>:
    358c:	defff804 	addi	sp,sp,-32
    3590:	dc400615 	stw	r17,24(sp)
    3594:	2023883a 	mov	r17,r4
    3598:	2809883a 	mov	r4,r5
    359c:	dc000515 	stw	r16,20(sp)
    35a0:	dfc00715 	stw	ra,28(sp)
    35a4:	3021883a 	mov	r16,r6
    35a8:	d9400315 	stw	r5,12(sp)
    35ac:	0004e2c0 	call	4e2c <strlen>
    35b0:	d8800215 	stw	r2,8(sp)
    35b4:	d8800415 	stw	r2,16(sp)
    35b8:	d8800304 	addi	r2,sp,12
    35bc:	d8800015 	stw	r2,0(sp)
    35c0:	00800044 	movi	r2,1
    35c4:	d8800115 	stw	r2,4(sp)
    35c8:	88000226 	beq	r17,zero,35d4 <_fputs_r+0x48>
    35cc:	88800e17 	ldw	r2,56(r17)
    35d0:	10001226 	beq	r2,zero,361c <_fputs_r+0x90>
    35d4:	8080030b 	ldhu	r2,12(r16)
    35d8:	10c8000c 	andi	r3,r2,8192
    35dc:	1800061e 	bne	r3,zero,35f8 <_fputs_r+0x6c>
    35e0:	81001917 	ldw	r4,100(r16)
    35e4:	00f7ffc4 	movi	r3,-8193
    35e8:	10880014 	ori	r2,r2,8192
    35ec:	20c6703a 	and	r3,r4,r3
    35f0:	8080030d 	sth	r2,12(r16)
    35f4:	80c01915 	stw	r3,100(r16)
    35f8:	d80d883a 	mov	r6,sp
    35fc:	800b883a 	mov	r5,r16
    3600:	8809883a 	mov	r4,r17
    3604:	00036400 	call	3640 <__sfvwrite_r>
    3608:	dfc00717 	ldw	ra,28(sp)
    360c:	dc400617 	ldw	r17,24(sp)
    3610:	dc000517 	ldw	r16,20(sp)
    3614:	dec00804 	addi	sp,sp,32
    3618:	f800283a 	ret
    361c:	8809883a 	mov	r4,r17
    3620:	00058e80 	call	58e8 <__sinit>
    3624:	003feb06 	br	35d4 <__alt_mem_onchip_memory2_0+0xf7bff5d4>

00003628 <fputs>:
    3628:	008000b4 	movhi	r2,2
    362c:	10806b04 	addi	r2,r2,428
    3630:	280d883a 	mov	r6,r5
    3634:	200b883a 	mov	r5,r4
    3638:	11000017 	ldw	r4,0(r2)
    363c:	000358c1 	jmpi	358c <_fputs_r>

00003640 <__sfvwrite_r>:
    3640:	30800217 	ldw	r2,8(r6)
    3644:	10006726 	beq	r2,zero,37e4 <__sfvwrite_r+0x1a4>
    3648:	28c0030b 	ldhu	r3,12(r5)
    364c:	defff404 	addi	sp,sp,-48
    3650:	dd400715 	stw	r21,28(sp)
    3654:	dd000615 	stw	r20,24(sp)
    3658:	dc000215 	stw	r16,8(sp)
    365c:	dfc00b15 	stw	ra,44(sp)
    3660:	df000a15 	stw	fp,40(sp)
    3664:	ddc00915 	stw	r23,36(sp)
    3668:	dd800815 	stw	r22,32(sp)
    366c:	dcc00515 	stw	r19,20(sp)
    3670:	dc800415 	stw	r18,16(sp)
    3674:	dc400315 	stw	r17,12(sp)
    3678:	1880020c 	andi	r2,r3,8
    367c:	2821883a 	mov	r16,r5
    3680:	202b883a 	mov	r21,r4
    3684:	3029883a 	mov	r20,r6
    3688:	10002726 	beq	r2,zero,3728 <__sfvwrite_r+0xe8>
    368c:	28800417 	ldw	r2,16(r5)
    3690:	10002526 	beq	r2,zero,3728 <__sfvwrite_r+0xe8>
    3694:	1880008c 	andi	r2,r3,2
    3698:	a4400017 	ldw	r17,0(r20)
    369c:	10002a26 	beq	r2,zero,3748 <__sfvwrite_r+0x108>
    36a0:	05a00034 	movhi	r22,32768
    36a4:	0027883a 	mov	r19,zero
    36a8:	0025883a 	mov	r18,zero
    36ac:	b5bf0004 	addi	r22,r22,-1024
    36b0:	980d883a 	mov	r6,r19
    36b4:	a809883a 	mov	r4,r21
    36b8:	90004626 	beq	r18,zero,37d4 <__sfvwrite_r+0x194>
    36bc:	900f883a 	mov	r7,r18
    36c0:	b480022e 	bgeu	r22,r18,36cc <__sfvwrite_r+0x8c>
    36c4:	01e00034 	movhi	r7,32768
    36c8:	39ff0004 	addi	r7,r7,-1024
    36cc:	80800917 	ldw	r2,36(r16)
    36d0:	81400717 	ldw	r5,28(r16)
    36d4:	103ee83a 	callr	r2
    36d8:	0080570e 	bge	zero,r2,3838 <__sfvwrite_r+0x1f8>
    36dc:	a0c00217 	ldw	r3,8(r20)
    36e0:	98a7883a 	add	r19,r19,r2
    36e4:	90a5c83a 	sub	r18,r18,r2
    36e8:	1885c83a 	sub	r2,r3,r2
    36ec:	a0800215 	stw	r2,8(r20)
    36f0:	103fef1e 	bne	r2,zero,36b0 <__alt_mem_onchip_memory2_0+0xf7bff6b0>
    36f4:	0005883a 	mov	r2,zero
    36f8:	dfc00b17 	ldw	ra,44(sp)
    36fc:	df000a17 	ldw	fp,40(sp)
    3700:	ddc00917 	ldw	r23,36(sp)
    3704:	dd800817 	ldw	r22,32(sp)
    3708:	dd400717 	ldw	r21,28(sp)
    370c:	dd000617 	ldw	r20,24(sp)
    3710:	dcc00517 	ldw	r19,20(sp)
    3714:	dc800417 	ldw	r18,16(sp)
    3718:	dc400317 	ldw	r17,12(sp)
    371c:	dc000217 	ldw	r16,8(sp)
    3720:	dec00c04 	addi	sp,sp,48
    3724:	f800283a 	ret
    3728:	800b883a 	mov	r5,r16
    372c:	a809883a 	mov	r4,r21
    3730:	000501c0 	call	501c <__swsetup_r>
    3734:	1000eb1e 	bne	r2,zero,3ae4 <__sfvwrite_r+0x4a4>
    3738:	80c0030b 	ldhu	r3,12(r16)
    373c:	a4400017 	ldw	r17,0(r20)
    3740:	1880008c 	andi	r2,r3,2
    3744:	103fd61e 	bne	r2,zero,36a0 <__alt_mem_onchip_memory2_0+0xf7bff6a0>
    3748:	1880004c 	andi	r2,r3,1
    374c:	10003f1e 	bne	r2,zero,384c <__sfvwrite_r+0x20c>
    3750:	0039883a 	mov	fp,zero
    3754:	0025883a 	mov	r18,zero
    3758:	90001a26 	beq	r18,zero,37c4 <__sfvwrite_r+0x184>
    375c:	1880800c 	andi	r2,r3,512
    3760:	84c00217 	ldw	r19,8(r16)
    3764:	10002126 	beq	r2,zero,37ec <__sfvwrite_r+0x1ac>
    3768:	982f883a 	mov	r23,r19
    376c:	94c09336 	bltu	r18,r19,39bc <__sfvwrite_r+0x37c>
    3770:	1881200c 	andi	r2,r3,1152
    3774:	10009e1e 	bne	r2,zero,39f0 <__sfvwrite_r+0x3b0>
    3778:	81000017 	ldw	r4,0(r16)
    377c:	b80d883a 	mov	r6,r23
    3780:	e00b883a 	mov	r5,fp
    3784:	00045b00 	call	45b0 <memmove>
    3788:	80c00217 	ldw	r3,8(r16)
    378c:	81000017 	ldw	r4,0(r16)
    3790:	9005883a 	mov	r2,r18
    3794:	1ce7c83a 	sub	r19,r3,r19
    3798:	25cf883a 	add	r7,r4,r23
    379c:	84c00215 	stw	r19,8(r16)
    37a0:	81c00015 	stw	r7,0(r16)
    37a4:	a0c00217 	ldw	r3,8(r20)
    37a8:	e0b9883a 	add	fp,fp,r2
    37ac:	90a5c83a 	sub	r18,r18,r2
    37b0:	18a7c83a 	sub	r19,r3,r2
    37b4:	a4c00215 	stw	r19,8(r20)
    37b8:	983fce26 	beq	r19,zero,36f4 <__alt_mem_onchip_memory2_0+0xf7bff6f4>
    37bc:	80c0030b 	ldhu	r3,12(r16)
    37c0:	903fe61e 	bne	r18,zero,375c <__alt_mem_onchip_memory2_0+0xf7bff75c>
    37c4:	8f000017 	ldw	fp,0(r17)
    37c8:	8c800117 	ldw	r18,4(r17)
    37cc:	8c400204 	addi	r17,r17,8
    37d0:	003fe106 	br	3758 <__alt_mem_onchip_memory2_0+0xf7bff758>
    37d4:	8cc00017 	ldw	r19,0(r17)
    37d8:	8c800117 	ldw	r18,4(r17)
    37dc:	8c400204 	addi	r17,r17,8
    37e0:	003fb306 	br	36b0 <__alt_mem_onchip_memory2_0+0xf7bff6b0>
    37e4:	0005883a 	mov	r2,zero
    37e8:	f800283a 	ret
    37ec:	81000017 	ldw	r4,0(r16)
    37f0:	80800417 	ldw	r2,16(r16)
    37f4:	11005736 	bltu	r2,r4,3954 <__sfvwrite_r+0x314>
    37f8:	85c00517 	ldw	r23,20(r16)
    37fc:	95c05536 	bltu	r18,r23,3954 <__sfvwrite_r+0x314>
    3800:	00a00034 	movhi	r2,32768
    3804:	10bfffc4 	addi	r2,r2,-1
    3808:	9009883a 	mov	r4,r18
    380c:	1480012e 	bgeu	r2,r18,3814 <__sfvwrite_r+0x1d4>
    3810:	1009883a 	mov	r4,r2
    3814:	b80b883a 	mov	r5,r23
    3818:	000663c0 	call	663c <__divsi3>
    381c:	15cf383a 	mul	r7,r2,r23
    3820:	81400717 	ldw	r5,28(r16)
    3824:	80800917 	ldw	r2,36(r16)
    3828:	e00d883a 	mov	r6,fp
    382c:	a809883a 	mov	r4,r21
    3830:	103ee83a 	callr	r2
    3834:	00bfdb16 	blt	zero,r2,37a4 <__alt_mem_onchip_memory2_0+0xf7bff7a4>
    3838:	8080030b 	ldhu	r2,12(r16)
    383c:	10801014 	ori	r2,r2,64
    3840:	8080030d 	sth	r2,12(r16)
    3844:	00bfffc4 	movi	r2,-1
    3848:	003fab06 	br	36f8 <__alt_mem_onchip_memory2_0+0xf7bff6f8>
    384c:	0027883a 	mov	r19,zero
    3850:	0011883a 	mov	r8,zero
    3854:	0039883a 	mov	fp,zero
    3858:	0025883a 	mov	r18,zero
    385c:	90001f26 	beq	r18,zero,38dc <__sfvwrite_r+0x29c>
    3860:	40005a26 	beq	r8,zero,39cc <__sfvwrite_r+0x38c>
    3864:	982d883a 	mov	r22,r19
    3868:	94c0012e 	bgeu	r18,r19,3870 <__sfvwrite_r+0x230>
    386c:	902d883a 	mov	r22,r18
    3870:	81000017 	ldw	r4,0(r16)
    3874:	80800417 	ldw	r2,16(r16)
    3878:	b02f883a 	mov	r23,r22
    387c:	81c00517 	ldw	r7,20(r16)
    3880:	1100032e 	bgeu	r2,r4,3890 <__sfvwrite_r+0x250>
    3884:	80c00217 	ldw	r3,8(r16)
    3888:	38c7883a 	add	r3,r7,r3
    388c:	1d801816 	blt	r3,r22,38f0 <__sfvwrite_r+0x2b0>
    3890:	b1c03e16 	blt	r22,r7,398c <__sfvwrite_r+0x34c>
    3894:	80800917 	ldw	r2,36(r16)
    3898:	81400717 	ldw	r5,28(r16)
    389c:	e00d883a 	mov	r6,fp
    38a0:	da000115 	stw	r8,4(sp)
    38a4:	a809883a 	mov	r4,r21
    38a8:	103ee83a 	callr	r2
    38ac:	102f883a 	mov	r23,r2
    38b0:	da000117 	ldw	r8,4(sp)
    38b4:	00bfe00e 	bge	zero,r2,3838 <__alt_mem_onchip_memory2_0+0xf7bff838>
    38b8:	9de7c83a 	sub	r19,r19,r23
    38bc:	98001f26 	beq	r19,zero,393c <__sfvwrite_r+0x2fc>
    38c0:	a0800217 	ldw	r2,8(r20)
    38c4:	e5f9883a 	add	fp,fp,r23
    38c8:	95e5c83a 	sub	r18,r18,r23
    38cc:	15efc83a 	sub	r23,r2,r23
    38d0:	a5c00215 	stw	r23,8(r20)
    38d4:	b83f8726 	beq	r23,zero,36f4 <__alt_mem_onchip_memory2_0+0xf7bff6f4>
    38d8:	903fe11e 	bne	r18,zero,3860 <__alt_mem_onchip_memory2_0+0xf7bff860>
    38dc:	8f000017 	ldw	fp,0(r17)
    38e0:	8c800117 	ldw	r18,4(r17)
    38e4:	0011883a 	mov	r8,zero
    38e8:	8c400204 	addi	r17,r17,8
    38ec:	003fdb06 	br	385c <__alt_mem_onchip_memory2_0+0xf7bff85c>
    38f0:	180d883a 	mov	r6,r3
    38f4:	e00b883a 	mov	r5,fp
    38f8:	da000115 	stw	r8,4(sp)
    38fc:	d8c00015 	stw	r3,0(sp)
    3900:	00045b00 	call	45b0 <memmove>
    3904:	d8c00017 	ldw	r3,0(sp)
    3908:	80800017 	ldw	r2,0(r16)
    390c:	800b883a 	mov	r5,r16
    3910:	a809883a 	mov	r4,r21
    3914:	10c5883a 	add	r2,r2,r3
    3918:	80800015 	stw	r2,0(r16)
    391c:	d8c00015 	stw	r3,0(sp)
    3920:	000550c0 	call	550c <_fflush_r>
    3924:	d8c00017 	ldw	r3,0(sp)
    3928:	da000117 	ldw	r8,4(sp)
    392c:	103fc21e 	bne	r2,zero,3838 <__alt_mem_onchip_memory2_0+0xf7bff838>
    3930:	182f883a 	mov	r23,r3
    3934:	9de7c83a 	sub	r19,r19,r23
    3938:	983fe11e 	bne	r19,zero,38c0 <__alt_mem_onchip_memory2_0+0xf7bff8c0>
    393c:	800b883a 	mov	r5,r16
    3940:	a809883a 	mov	r4,r21
    3944:	000550c0 	call	550c <_fflush_r>
    3948:	103fbb1e 	bne	r2,zero,3838 <__alt_mem_onchip_memory2_0+0xf7bff838>
    394c:	0011883a 	mov	r8,zero
    3950:	003fdb06 	br	38c0 <__alt_mem_onchip_memory2_0+0xf7bff8c0>
    3954:	94c0012e 	bgeu	r18,r19,395c <__sfvwrite_r+0x31c>
    3958:	9027883a 	mov	r19,r18
    395c:	980d883a 	mov	r6,r19
    3960:	e00b883a 	mov	r5,fp
    3964:	00045b00 	call	45b0 <memmove>
    3968:	80800217 	ldw	r2,8(r16)
    396c:	80c00017 	ldw	r3,0(r16)
    3970:	14c5c83a 	sub	r2,r2,r19
    3974:	1cc7883a 	add	r3,r3,r19
    3978:	80800215 	stw	r2,8(r16)
    397c:	80c00015 	stw	r3,0(r16)
    3980:	10004326 	beq	r2,zero,3a90 <__sfvwrite_r+0x450>
    3984:	9805883a 	mov	r2,r19
    3988:	003f8606 	br	37a4 <__alt_mem_onchip_memory2_0+0xf7bff7a4>
    398c:	b00d883a 	mov	r6,r22
    3990:	e00b883a 	mov	r5,fp
    3994:	da000115 	stw	r8,4(sp)
    3998:	00045b00 	call	45b0 <memmove>
    399c:	80800217 	ldw	r2,8(r16)
    39a0:	80c00017 	ldw	r3,0(r16)
    39a4:	da000117 	ldw	r8,4(sp)
    39a8:	1585c83a 	sub	r2,r2,r22
    39ac:	1dad883a 	add	r22,r3,r22
    39b0:	80800215 	stw	r2,8(r16)
    39b4:	85800015 	stw	r22,0(r16)
    39b8:	003fbf06 	br	38b8 <__alt_mem_onchip_memory2_0+0xf7bff8b8>
    39bc:	81000017 	ldw	r4,0(r16)
    39c0:	9027883a 	mov	r19,r18
    39c4:	902f883a 	mov	r23,r18
    39c8:	003f6c06 	br	377c <__alt_mem_onchip_memory2_0+0xf7bff77c>
    39cc:	900d883a 	mov	r6,r18
    39d0:	01400284 	movi	r5,10
    39d4:	e009883a 	mov	r4,fp
    39d8:	00043080 	call	4308 <memchr>
    39dc:	10003e26 	beq	r2,zero,3ad8 <__sfvwrite_r+0x498>
    39e0:	10800044 	addi	r2,r2,1
    39e4:	1727c83a 	sub	r19,r2,fp
    39e8:	02000044 	movi	r8,1
    39ec:	003f9d06 	br	3864 <__alt_mem_onchip_memory2_0+0xf7bff864>
    39f0:	80800517 	ldw	r2,20(r16)
    39f4:	81400417 	ldw	r5,16(r16)
    39f8:	81c00017 	ldw	r7,0(r16)
    39fc:	10a7883a 	add	r19,r2,r2
    3a00:	9885883a 	add	r2,r19,r2
    3a04:	1026d7fa 	srli	r19,r2,31
    3a08:	396dc83a 	sub	r22,r7,r5
    3a0c:	b1000044 	addi	r4,r22,1
    3a10:	9885883a 	add	r2,r19,r2
    3a14:	1027d07a 	srai	r19,r2,1
    3a18:	2485883a 	add	r2,r4,r18
    3a1c:	980d883a 	mov	r6,r19
    3a20:	9880022e 	bgeu	r19,r2,3a2c <__sfvwrite_r+0x3ec>
    3a24:	1027883a 	mov	r19,r2
    3a28:	100d883a 	mov	r6,r2
    3a2c:	18c1000c 	andi	r3,r3,1024
    3a30:	18001c26 	beq	r3,zero,3aa4 <__sfvwrite_r+0x464>
    3a34:	300b883a 	mov	r5,r6
    3a38:	a809883a 	mov	r4,r21
    3a3c:	0003afc0 	call	3afc <_malloc_r>
    3a40:	102f883a 	mov	r23,r2
    3a44:	10002926 	beq	r2,zero,3aec <__sfvwrite_r+0x4ac>
    3a48:	81400417 	ldw	r5,16(r16)
    3a4c:	b00d883a 	mov	r6,r22
    3a50:	1009883a 	mov	r4,r2
    3a54:	00044680 	call	4468 <memcpy>
    3a58:	8080030b 	ldhu	r2,12(r16)
    3a5c:	00fedfc4 	movi	r3,-1153
    3a60:	10c4703a 	and	r2,r2,r3
    3a64:	10802014 	ori	r2,r2,128
    3a68:	8080030d 	sth	r2,12(r16)
    3a6c:	bd89883a 	add	r4,r23,r22
    3a70:	9d8fc83a 	sub	r7,r19,r22
    3a74:	85c00415 	stw	r23,16(r16)
    3a78:	84c00515 	stw	r19,20(r16)
    3a7c:	81000015 	stw	r4,0(r16)
    3a80:	9027883a 	mov	r19,r18
    3a84:	81c00215 	stw	r7,8(r16)
    3a88:	902f883a 	mov	r23,r18
    3a8c:	003f3b06 	br	377c <__alt_mem_onchip_memory2_0+0xf7bff77c>
    3a90:	800b883a 	mov	r5,r16
    3a94:	a809883a 	mov	r4,r21
    3a98:	000550c0 	call	550c <_fflush_r>
    3a9c:	103fb926 	beq	r2,zero,3984 <__alt_mem_onchip_memory2_0+0xf7bff984>
    3aa0:	003f6506 	br	3838 <__alt_mem_onchip_memory2_0+0xf7bff838>
    3aa4:	a809883a 	mov	r4,r21
    3aa8:	00048740 	call	4874 <_realloc_r>
    3aac:	102f883a 	mov	r23,r2
    3ab0:	103fee1e 	bne	r2,zero,3a6c <__alt_mem_onchip_memory2_0+0xf7bffa6c>
    3ab4:	81400417 	ldw	r5,16(r16)
    3ab8:	a809883a 	mov	r4,r21
    3abc:	0005a5c0 	call	5a5c <_free_r>
    3ac0:	8080030b 	ldhu	r2,12(r16)
    3ac4:	00ffdfc4 	movi	r3,-129
    3ac8:	1884703a 	and	r2,r3,r2
    3acc:	00c00304 	movi	r3,12
    3ad0:	a8c00015 	stw	r3,0(r21)
    3ad4:	003f5906 	br	383c <__alt_mem_onchip_memory2_0+0xf7bff83c>
    3ad8:	94c00044 	addi	r19,r18,1
    3adc:	02000044 	movi	r8,1
    3ae0:	003f6006 	br	3864 <__alt_mem_onchip_memory2_0+0xf7bff864>
    3ae4:	00bfffc4 	movi	r2,-1
    3ae8:	003f0306 	br	36f8 <__alt_mem_onchip_memory2_0+0xf7bff6f8>
    3aec:	00800304 	movi	r2,12
    3af0:	a8800015 	stw	r2,0(r21)
    3af4:	8080030b 	ldhu	r2,12(r16)
    3af8:	003f5006 	br	383c <__alt_mem_onchip_memory2_0+0xf7bff83c>

00003afc <_malloc_r>:
    3afc:	defff504 	addi	sp,sp,-44
    3b00:	dc800315 	stw	r18,12(sp)
    3b04:	dfc00a15 	stw	ra,40(sp)
    3b08:	df000915 	stw	fp,36(sp)
    3b0c:	ddc00815 	stw	r23,32(sp)
    3b10:	dd800715 	stw	r22,28(sp)
    3b14:	dd400615 	stw	r21,24(sp)
    3b18:	dd000515 	stw	r20,20(sp)
    3b1c:	dcc00415 	stw	r19,16(sp)
    3b20:	dc400215 	stw	r17,8(sp)
    3b24:	dc000115 	stw	r16,4(sp)
    3b28:	288002c4 	addi	r2,r5,11
    3b2c:	00c00584 	movi	r3,22
    3b30:	2025883a 	mov	r18,r4
    3b34:	18807f2e 	bgeu	r3,r2,3d34 <_malloc_r+0x238>
    3b38:	047ffe04 	movi	r17,-8
    3b3c:	1462703a 	and	r17,r2,r17
    3b40:	8800a316 	blt	r17,zero,3dd0 <_malloc_r+0x2d4>
    3b44:	8940a236 	bltu	r17,r5,3dd0 <_malloc_r+0x2d4>
    3b48:	0006b000 	call	6b00 <__malloc_lock>
    3b4c:	00807dc4 	movi	r2,503
    3b50:	1441e92e 	bgeu	r2,r17,42f8 <_malloc_r+0x7fc>
    3b54:	8804d27a 	srli	r2,r17,9
    3b58:	1000a126 	beq	r2,zero,3de0 <_malloc_r+0x2e4>
    3b5c:	00c00104 	movi	r3,4
    3b60:	18811e36 	bltu	r3,r2,3fdc <_malloc_r+0x4e0>
    3b64:	8804d1ba 	srli	r2,r17,6
    3b68:	12000e44 	addi	r8,r2,57
    3b6c:	11c00e04 	addi	r7,r2,56
    3b70:	4209883a 	add	r4,r8,r8
    3b74:	04c000b4 	movhi	r19,2
    3b78:	2109883a 	add	r4,r4,r4
    3b7c:	9cff5f04 	addi	r19,r19,-644
    3b80:	2109883a 	add	r4,r4,r4
    3b84:	9909883a 	add	r4,r19,r4
    3b88:	24000117 	ldw	r16,4(r4)
    3b8c:	213ffe04 	addi	r4,r4,-8
    3b90:	24009726 	beq	r4,r16,3df0 <_malloc_r+0x2f4>
    3b94:	80800117 	ldw	r2,4(r16)
    3b98:	01bfff04 	movi	r6,-4
    3b9c:	014003c4 	movi	r5,15
    3ba0:	1184703a 	and	r2,r2,r6
    3ba4:	1447c83a 	sub	r3,r2,r17
    3ba8:	28c00716 	blt	r5,r3,3bc8 <_malloc_r+0xcc>
    3bac:	1800920e 	bge	r3,zero,3df8 <_malloc_r+0x2fc>
    3bb0:	84000317 	ldw	r16,12(r16)
    3bb4:	24008e26 	beq	r4,r16,3df0 <_malloc_r+0x2f4>
    3bb8:	80800117 	ldw	r2,4(r16)
    3bbc:	1184703a 	and	r2,r2,r6
    3bc0:	1447c83a 	sub	r3,r2,r17
    3bc4:	28fff90e 	bge	r5,r3,3bac <__alt_mem_onchip_memory2_0+0xf7bffbac>
    3bc8:	3809883a 	mov	r4,r7
    3bcc:	018000b4 	movhi	r6,2
    3bd0:	9c000417 	ldw	r16,16(r19)
    3bd4:	31bf5f04 	addi	r6,r6,-644
    3bd8:	32000204 	addi	r8,r6,8
    3bdc:	82013426 	beq	r16,r8,40b0 <_malloc_r+0x5b4>
    3be0:	80c00117 	ldw	r3,4(r16)
    3be4:	00bfff04 	movi	r2,-4
    3be8:	188e703a 	and	r7,r3,r2
    3bec:	3c45c83a 	sub	r2,r7,r17
    3bf0:	00c003c4 	movi	r3,15
    3bf4:	18811f16 	blt	r3,r2,4074 <_malloc_r+0x578>
    3bf8:	32000515 	stw	r8,20(r6)
    3bfc:	32000415 	stw	r8,16(r6)
    3c00:	10007f0e 	bge	r2,zero,3e00 <_malloc_r+0x304>
    3c04:	00807fc4 	movi	r2,511
    3c08:	11c0fd36 	bltu	r2,r7,4000 <_malloc_r+0x504>
    3c0c:	3806d0fa 	srli	r3,r7,3
    3c10:	01c00044 	movi	r7,1
    3c14:	30800117 	ldw	r2,4(r6)
    3c18:	19400044 	addi	r5,r3,1
    3c1c:	294b883a 	add	r5,r5,r5
    3c20:	1807d0ba 	srai	r3,r3,2
    3c24:	294b883a 	add	r5,r5,r5
    3c28:	294b883a 	add	r5,r5,r5
    3c2c:	298b883a 	add	r5,r5,r6
    3c30:	38c6983a 	sll	r3,r7,r3
    3c34:	29c00017 	ldw	r7,0(r5)
    3c38:	2a7ffe04 	addi	r9,r5,-8
    3c3c:	1886b03a 	or	r3,r3,r2
    3c40:	82400315 	stw	r9,12(r16)
    3c44:	81c00215 	stw	r7,8(r16)
    3c48:	30c00115 	stw	r3,4(r6)
    3c4c:	2c000015 	stw	r16,0(r5)
    3c50:	3c000315 	stw	r16,12(r7)
    3c54:	2005d0ba 	srai	r2,r4,2
    3c58:	01400044 	movi	r5,1
    3c5c:	288a983a 	sll	r5,r5,r2
    3c60:	19406f36 	bltu	r3,r5,3e20 <_malloc_r+0x324>
    3c64:	28c4703a 	and	r2,r5,r3
    3c68:	10000a1e 	bne	r2,zero,3c94 <_malloc_r+0x198>
    3c6c:	00bfff04 	movi	r2,-4
    3c70:	294b883a 	add	r5,r5,r5
    3c74:	2088703a 	and	r4,r4,r2
    3c78:	28c4703a 	and	r2,r5,r3
    3c7c:	21000104 	addi	r4,r4,4
    3c80:	1000041e 	bne	r2,zero,3c94 <_malloc_r+0x198>
    3c84:	294b883a 	add	r5,r5,r5
    3c88:	28c4703a 	and	r2,r5,r3
    3c8c:	21000104 	addi	r4,r4,4
    3c90:	103ffc26 	beq	r2,zero,3c84 <__alt_mem_onchip_memory2_0+0xf7bffc84>
    3c94:	02bfff04 	movi	r10,-4
    3c98:	024003c4 	movi	r9,15
    3c9c:	21800044 	addi	r6,r4,1
    3ca0:	318d883a 	add	r6,r6,r6
    3ca4:	318d883a 	add	r6,r6,r6
    3ca8:	318d883a 	add	r6,r6,r6
    3cac:	998d883a 	add	r6,r19,r6
    3cb0:	333ffe04 	addi	r12,r6,-8
    3cb4:	2017883a 	mov	r11,r4
    3cb8:	31800104 	addi	r6,r6,4
    3cbc:	34000017 	ldw	r16,0(r6)
    3cc0:	31fffd04 	addi	r7,r6,-12
    3cc4:	81c0041e 	bne	r16,r7,3cd8 <_malloc_r+0x1dc>
    3cc8:	0000fb06 	br	40b8 <_malloc_r+0x5bc>
    3ccc:	1801030e 	bge	r3,zero,40dc <_malloc_r+0x5e0>
    3cd0:	84000317 	ldw	r16,12(r16)
    3cd4:	81c0f826 	beq	r16,r7,40b8 <_malloc_r+0x5bc>
    3cd8:	80800117 	ldw	r2,4(r16)
    3cdc:	1284703a 	and	r2,r2,r10
    3ce0:	1447c83a 	sub	r3,r2,r17
    3ce4:	48fff90e 	bge	r9,r3,3ccc <__alt_mem_onchip_memory2_0+0xf7bffccc>
    3ce8:	80800317 	ldw	r2,12(r16)
    3cec:	81000217 	ldw	r4,8(r16)
    3cf0:	89400054 	ori	r5,r17,1
    3cf4:	81400115 	stw	r5,4(r16)
    3cf8:	20800315 	stw	r2,12(r4)
    3cfc:	11000215 	stw	r4,8(r2)
    3d00:	8463883a 	add	r17,r16,r17
    3d04:	9c400515 	stw	r17,20(r19)
    3d08:	9c400415 	stw	r17,16(r19)
    3d0c:	18800054 	ori	r2,r3,1
    3d10:	88800115 	stw	r2,4(r17)
    3d14:	8a000315 	stw	r8,12(r17)
    3d18:	8a000215 	stw	r8,8(r17)
    3d1c:	88e3883a 	add	r17,r17,r3
    3d20:	88c00015 	stw	r3,0(r17)
    3d24:	9009883a 	mov	r4,r18
    3d28:	0006b240 	call	6b24 <__malloc_unlock>
    3d2c:	80800204 	addi	r2,r16,8
    3d30:	00001b06 	br	3da0 <_malloc_r+0x2a4>
    3d34:	04400404 	movi	r17,16
    3d38:	89402536 	bltu	r17,r5,3dd0 <_malloc_r+0x2d4>
    3d3c:	0006b000 	call	6b00 <__malloc_lock>
    3d40:	00800184 	movi	r2,6
    3d44:	01000084 	movi	r4,2
    3d48:	04c000b4 	movhi	r19,2
    3d4c:	1085883a 	add	r2,r2,r2
    3d50:	9cff5f04 	addi	r19,r19,-644
    3d54:	1085883a 	add	r2,r2,r2
    3d58:	9885883a 	add	r2,r19,r2
    3d5c:	14000117 	ldw	r16,4(r2)
    3d60:	10fffe04 	addi	r3,r2,-8
    3d64:	80c0d926 	beq	r16,r3,40cc <_malloc_r+0x5d0>
    3d68:	80c00117 	ldw	r3,4(r16)
    3d6c:	81000317 	ldw	r4,12(r16)
    3d70:	00bfff04 	movi	r2,-4
    3d74:	1884703a 	and	r2,r3,r2
    3d78:	81400217 	ldw	r5,8(r16)
    3d7c:	8085883a 	add	r2,r16,r2
    3d80:	10c00117 	ldw	r3,4(r2)
    3d84:	29000315 	stw	r4,12(r5)
    3d88:	21400215 	stw	r5,8(r4)
    3d8c:	18c00054 	ori	r3,r3,1
    3d90:	10c00115 	stw	r3,4(r2)
    3d94:	9009883a 	mov	r4,r18
    3d98:	0006b240 	call	6b24 <__malloc_unlock>
    3d9c:	80800204 	addi	r2,r16,8
    3da0:	dfc00a17 	ldw	ra,40(sp)
    3da4:	df000917 	ldw	fp,36(sp)
    3da8:	ddc00817 	ldw	r23,32(sp)
    3dac:	dd800717 	ldw	r22,28(sp)
    3db0:	dd400617 	ldw	r21,24(sp)
    3db4:	dd000517 	ldw	r20,20(sp)
    3db8:	dcc00417 	ldw	r19,16(sp)
    3dbc:	dc800317 	ldw	r18,12(sp)
    3dc0:	dc400217 	ldw	r17,8(sp)
    3dc4:	dc000117 	ldw	r16,4(sp)
    3dc8:	dec00b04 	addi	sp,sp,44
    3dcc:	f800283a 	ret
    3dd0:	00800304 	movi	r2,12
    3dd4:	90800015 	stw	r2,0(r18)
    3dd8:	0005883a 	mov	r2,zero
    3ddc:	003ff006 	br	3da0 <__alt_mem_onchip_memory2_0+0xf7bffda0>
    3de0:	01002004 	movi	r4,128
    3de4:	02001004 	movi	r8,64
    3de8:	01c00fc4 	movi	r7,63
    3dec:	003f6106 	br	3b74 <__alt_mem_onchip_memory2_0+0xf7bffb74>
    3df0:	4009883a 	mov	r4,r8
    3df4:	003f7506 	br	3bcc <__alt_mem_onchip_memory2_0+0xf7bffbcc>
    3df8:	81000317 	ldw	r4,12(r16)
    3dfc:	003fde06 	br	3d78 <__alt_mem_onchip_memory2_0+0xf7bffd78>
    3e00:	81c5883a 	add	r2,r16,r7
    3e04:	11400117 	ldw	r5,4(r2)
    3e08:	9009883a 	mov	r4,r18
    3e0c:	29400054 	ori	r5,r5,1
    3e10:	11400115 	stw	r5,4(r2)
    3e14:	0006b240 	call	6b24 <__malloc_unlock>
    3e18:	80800204 	addi	r2,r16,8
    3e1c:	003fe006 	br	3da0 <__alt_mem_onchip_memory2_0+0xf7bffda0>
    3e20:	9c000217 	ldw	r16,8(r19)
    3e24:	00bfff04 	movi	r2,-4
    3e28:	85800117 	ldw	r22,4(r16)
    3e2c:	b0ac703a 	and	r22,r22,r2
    3e30:	b4400336 	bltu	r22,r17,3e40 <_malloc_r+0x344>
    3e34:	b445c83a 	sub	r2,r22,r17
    3e38:	00c003c4 	movi	r3,15
    3e3c:	18805d16 	blt	r3,r2,3fb4 <_malloc_r+0x4b8>
    3e40:	05c000b4 	movhi	r23,2
    3e44:	008000b4 	movhi	r2,2
    3e48:	10874804 	addi	r2,r2,7456
    3e4c:	bdc06c04 	addi	r23,r23,432
    3e50:	15400017 	ldw	r21,0(r2)
    3e54:	b8c00017 	ldw	r3,0(r23)
    3e58:	00bfffc4 	movi	r2,-1
    3e5c:	858d883a 	add	r6,r16,r22
    3e60:	8d6b883a 	add	r21,r17,r21
    3e64:	1880ea26 	beq	r3,r2,4210 <_malloc_r+0x714>
    3e68:	ad4403c4 	addi	r21,r21,4111
    3e6c:	00bc0004 	movi	r2,-4096
    3e70:	a8aa703a 	and	r21,r21,r2
    3e74:	a80b883a 	mov	r5,r21
    3e78:	9009883a 	mov	r4,r18
    3e7c:	d9800015 	stw	r6,0(sp)
    3e80:	0004dd80 	call	4dd8 <_sbrk_r>
    3e84:	1029883a 	mov	r20,r2
    3e88:	00bfffc4 	movi	r2,-1
    3e8c:	d9800017 	ldw	r6,0(sp)
    3e90:	a080e826 	beq	r20,r2,4234 <_malloc_r+0x738>
    3e94:	a180a636 	bltu	r20,r6,4130 <_malloc_r+0x634>
    3e98:	070000b4 	movhi	fp,2
    3e9c:	e7074904 	addi	fp,fp,7460
    3ea0:	e0800017 	ldw	r2,0(fp)
    3ea4:	a887883a 	add	r3,r21,r2
    3ea8:	e0c00015 	stw	r3,0(fp)
    3eac:	3500e626 	beq	r6,r20,4248 <_malloc_r+0x74c>
    3eb0:	b9000017 	ldw	r4,0(r23)
    3eb4:	00bfffc4 	movi	r2,-1
    3eb8:	2080ee26 	beq	r4,r2,4274 <_malloc_r+0x778>
    3ebc:	a185c83a 	sub	r2,r20,r6
    3ec0:	10c5883a 	add	r2,r2,r3
    3ec4:	e0800015 	stw	r2,0(fp)
    3ec8:	a0c001cc 	andi	r3,r20,7
    3ecc:	1800bc26 	beq	r3,zero,41c0 <_malloc_r+0x6c4>
    3ed0:	a0e9c83a 	sub	r20,r20,r3
    3ed4:	00840204 	movi	r2,4104
    3ed8:	a5000204 	addi	r20,r20,8
    3edc:	10c7c83a 	sub	r3,r2,r3
    3ee0:	a545883a 	add	r2,r20,r21
    3ee4:	1083ffcc 	andi	r2,r2,4095
    3ee8:	18abc83a 	sub	r21,r3,r2
    3eec:	a80b883a 	mov	r5,r21
    3ef0:	9009883a 	mov	r4,r18
    3ef4:	0004dd80 	call	4dd8 <_sbrk_r>
    3ef8:	00ffffc4 	movi	r3,-1
    3efc:	10c0e126 	beq	r2,r3,4284 <_malloc_r+0x788>
    3f00:	1505c83a 	sub	r2,r2,r20
    3f04:	1545883a 	add	r2,r2,r21
    3f08:	10800054 	ori	r2,r2,1
    3f0c:	e0c00017 	ldw	r3,0(fp)
    3f10:	9d000215 	stw	r20,8(r19)
    3f14:	a0800115 	stw	r2,4(r20)
    3f18:	a8c7883a 	add	r3,r21,r3
    3f1c:	e0c00015 	stw	r3,0(fp)
    3f20:	84c00e26 	beq	r16,r19,3f5c <_malloc_r+0x460>
    3f24:	018003c4 	movi	r6,15
    3f28:	3580a72e 	bgeu	r6,r22,41c8 <_malloc_r+0x6cc>
    3f2c:	81400117 	ldw	r5,4(r16)
    3f30:	013ffe04 	movi	r4,-8
    3f34:	b0bffd04 	addi	r2,r22,-12
    3f38:	1104703a 	and	r2,r2,r4
    3f3c:	2900004c 	andi	r4,r5,1
    3f40:	2088b03a 	or	r4,r4,r2
    3f44:	81000115 	stw	r4,4(r16)
    3f48:	01400144 	movi	r5,5
    3f4c:	8089883a 	add	r4,r16,r2
    3f50:	21400115 	stw	r5,4(r4)
    3f54:	21400215 	stw	r5,8(r4)
    3f58:	3080cd36 	bltu	r6,r2,4290 <_malloc_r+0x794>
    3f5c:	008000b4 	movhi	r2,2
    3f60:	10874704 	addi	r2,r2,7452
    3f64:	11000017 	ldw	r4,0(r2)
    3f68:	20c0012e 	bgeu	r4,r3,3f70 <_malloc_r+0x474>
    3f6c:	10c00015 	stw	r3,0(r2)
    3f70:	008000b4 	movhi	r2,2
    3f74:	10874604 	addi	r2,r2,7448
    3f78:	11000017 	ldw	r4,0(r2)
    3f7c:	9c000217 	ldw	r16,8(r19)
    3f80:	20c0012e 	bgeu	r4,r3,3f88 <_malloc_r+0x48c>
    3f84:	10c00015 	stw	r3,0(r2)
    3f88:	80c00117 	ldw	r3,4(r16)
    3f8c:	00bfff04 	movi	r2,-4
    3f90:	1886703a 	and	r3,r3,r2
    3f94:	1c45c83a 	sub	r2,r3,r17
    3f98:	1c400236 	bltu	r3,r17,3fa4 <_malloc_r+0x4a8>
    3f9c:	00c003c4 	movi	r3,15
    3fa0:	18800416 	blt	r3,r2,3fb4 <_malloc_r+0x4b8>
    3fa4:	9009883a 	mov	r4,r18
    3fa8:	0006b240 	call	6b24 <__malloc_unlock>
    3fac:	0005883a 	mov	r2,zero
    3fb0:	003f7b06 	br	3da0 <__alt_mem_onchip_memory2_0+0xf7bffda0>
    3fb4:	88c00054 	ori	r3,r17,1
    3fb8:	80c00115 	stw	r3,4(r16)
    3fbc:	8463883a 	add	r17,r16,r17
    3fc0:	10800054 	ori	r2,r2,1
    3fc4:	9c400215 	stw	r17,8(r19)
    3fc8:	88800115 	stw	r2,4(r17)
    3fcc:	9009883a 	mov	r4,r18
    3fd0:	0006b240 	call	6b24 <__malloc_unlock>
    3fd4:	80800204 	addi	r2,r16,8
    3fd8:	003f7106 	br	3da0 <__alt_mem_onchip_memory2_0+0xf7bffda0>
    3fdc:	00c00504 	movi	r3,20
    3fe0:	18804a2e 	bgeu	r3,r2,410c <_malloc_r+0x610>
    3fe4:	00c01504 	movi	r3,84
    3fe8:	18806e36 	bltu	r3,r2,41a4 <_malloc_r+0x6a8>
    3fec:	8804d33a 	srli	r2,r17,12
    3ff0:	12001bc4 	addi	r8,r2,111
    3ff4:	11c01b84 	addi	r7,r2,110
    3ff8:	4209883a 	add	r4,r8,r8
    3ffc:	003edd06 	br	3b74 <__alt_mem_onchip_memory2_0+0xf7bffb74>
    4000:	3804d27a 	srli	r2,r7,9
    4004:	00c00104 	movi	r3,4
    4008:	1880442e 	bgeu	r3,r2,411c <_malloc_r+0x620>
    400c:	00c00504 	movi	r3,20
    4010:	18808136 	bltu	r3,r2,4218 <_malloc_r+0x71c>
    4014:	11401704 	addi	r5,r2,92
    4018:	10c016c4 	addi	r3,r2,91
    401c:	294b883a 	add	r5,r5,r5
    4020:	294b883a 	add	r5,r5,r5
    4024:	294b883a 	add	r5,r5,r5
    4028:	994b883a 	add	r5,r19,r5
    402c:	28800017 	ldw	r2,0(r5)
    4030:	018000b4 	movhi	r6,2
    4034:	297ffe04 	addi	r5,r5,-8
    4038:	31bf5f04 	addi	r6,r6,-644
    403c:	28806526 	beq	r5,r2,41d4 <_malloc_r+0x6d8>
    4040:	01bfff04 	movi	r6,-4
    4044:	10c00117 	ldw	r3,4(r2)
    4048:	1986703a 	and	r3,r3,r6
    404c:	38c0022e 	bgeu	r7,r3,4058 <_malloc_r+0x55c>
    4050:	10800217 	ldw	r2,8(r2)
    4054:	28bffb1e 	bne	r5,r2,4044 <__alt_mem_onchip_memory2_0+0xf7c00044>
    4058:	11400317 	ldw	r5,12(r2)
    405c:	98c00117 	ldw	r3,4(r19)
    4060:	81400315 	stw	r5,12(r16)
    4064:	80800215 	stw	r2,8(r16)
    4068:	2c000215 	stw	r16,8(r5)
    406c:	14000315 	stw	r16,12(r2)
    4070:	003ef806 	br	3c54 <__alt_mem_onchip_memory2_0+0xf7bffc54>
    4074:	88c00054 	ori	r3,r17,1
    4078:	80c00115 	stw	r3,4(r16)
    407c:	8463883a 	add	r17,r16,r17
    4080:	34400515 	stw	r17,20(r6)
    4084:	34400415 	stw	r17,16(r6)
    4088:	10c00054 	ori	r3,r2,1
    408c:	8a000315 	stw	r8,12(r17)
    4090:	8a000215 	stw	r8,8(r17)
    4094:	88c00115 	stw	r3,4(r17)
    4098:	88a3883a 	add	r17,r17,r2
    409c:	88800015 	stw	r2,0(r17)
    40a0:	9009883a 	mov	r4,r18
    40a4:	0006b240 	call	6b24 <__malloc_unlock>
    40a8:	80800204 	addi	r2,r16,8
    40ac:	003f3c06 	br	3da0 <__alt_mem_onchip_memory2_0+0xf7bffda0>
    40b0:	30c00117 	ldw	r3,4(r6)
    40b4:	003ee706 	br	3c54 <__alt_mem_onchip_memory2_0+0xf7bffc54>
    40b8:	5ac00044 	addi	r11,r11,1
    40bc:	588000cc 	andi	r2,r11,3
    40c0:	31800204 	addi	r6,r6,8
    40c4:	103efd1e 	bne	r2,zero,3cbc <__alt_mem_onchip_memory2_0+0xf7bffcbc>
    40c8:	00002406 	br	415c <_malloc_r+0x660>
    40cc:	14000317 	ldw	r16,12(r2)
    40d0:	143f251e 	bne	r2,r16,3d68 <__alt_mem_onchip_memory2_0+0xf7bffd68>
    40d4:	21000084 	addi	r4,r4,2
    40d8:	003ebc06 	br	3bcc <__alt_mem_onchip_memory2_0+0xf7bffbcc>
    40dc:	8085883a 	add	r2,r16,r2
    40e0:	10c00117 	ldw	r3,4(r2)
    40e4:	81000317 	ldw	r4,12(r16)
    40e8:	81400217 	ldw	r5,8(r16)
    40ec:	18c00054 	ori	r3,r3,1
    40f0:	10c00115 	stw	r3,4(r2)
    40f4:	29000315 	stw	r4,12(r5)
    40f8:	21400215 	stw	r5,8(r4)
    40fc:	9009883a 	mov	r4,r18
    4100:	0006b240 	call	6b24 <__malloc_unlock>
    4104:	80800204 	addi	r2,r16,8
    4108:	003f2506 	br	3da0 <__alt_mem_onchip_memory2_0+0xf7bffda0>
    410c:	12001704 	addi	r8,r2,92
    4110:	11c016c4 	addi	r7,r2,91
    4114:	4209883a 	add	r4,r8,r8
    4118:	003e9606 	br	3b74 <__alt_mem_onchip_memory2_0+0xf7bffb74>
    411c:	3804d1ba 	srli	r2,r7,6
    4120:	11400e44 	addi	r5,r2,57
    4124:	10c00e04 	addi	r3,r2,56
    4128:	294b883a 	add	r5,r5,r5
    412c:	003fbc06 	br	4020 <__alt_mem_onchip_memory2_0+0xf7c00020>
    4130:	84ff5926 	beq	r16,r19,3e98 <__alt_mem_onchip_memory2_0+0xf7bffe98>
    4134:	008000b4 	movhi	r2,2
    4138:	10bf5f04 	addi	r2,r2,-644
    413c:	14000217 	ldw	r16,8(r2)
    4140:	00bfff04 	movi	r2,-4
    4144:	80c00117 	ldw	r3,4(r16)
    4148:	1886703a 	and	r3,r3,r2
    414c:	003f9106 	br	3f94 <__alt_mem_onchip_memory2_0+0xf7bfff94>
    4150:	60800217 	ldw	r2,8(r12)
    4154:	213fffc4 	addi	r4,r4,-1
    4158:	1300651e 	bne	r2,r12,42f0 <_malloc_r+0x7f4>
    415c:	208000cc 	andi	r2,r4,3
    4160:	633ffe04 	addi	r12,r12,-8
    4164:	103ffa1e 	bne	r2,zero,4150 <__alt_mem_onchip_memory2_0+0xf7c00150>
    4168:	98800117 	ldw	r2,4(r19)
    416c:	0146303a 	nor	r3,zero,r5
    4170:	1884703a 	and	r2,r3,r2
    4174:	98800115 	stw	r2,4(r19)
    4178:	294b883a 	add	r5,r5,r5
    417c:	117f2836 	bltu	r2,r5,3e20 <__alt_mem_onchip_memory2_0+0xf7bffe20>
    4180:	283f2726 	beq	r5,zero,3e20 <__alt_mem_onchip_memory2_0+0xf7bffe20>
    4184:	2886703a 	and	r3,r5,r2
    4188:	5809883a 	mov	r4,r11
    418c:	183ec31e 	bne	r3,zero,3c9c <__alt_mem_onchip_memory2_0+0xf7bffc9c>
    4190:	294b883a 	add	r5,r5,r5
    4194:	2886703a 	and	r3,r5,r2
    4198:	21000104 	addi	r4,r4,4
    419c:	183ffc26 	beq	r3,zero,4190 <__alt_mem_onchip_memory2_0+0xf7c00190>
    41a0:	003ebe06 	br	3c9c <__alt_mem_onchip_memory2_0+0xf7bffc9c>
    41a4:	00c05504 	movi	r3,340
    41a8:	18801236 	bltu	r3,r2,41f4 <_malloc_r+0x6f8>
    41ac:	8804d3fa 	srli	r2,r17,15
    41b0:	12001e04 	addi	r8,r2,120
    41b4:	11c01dc4 	addi	r7,r2,119
    41b8:	4209883a 	add	r4,r8,r8
    41bc:	003e6d06 	br	3b74 <__alt_mem_onchip_memory2_0+0xf7bffb74>
    41c0:	00c40004 	movi	r3,4096
    41c4:	003f4606 	br	3ee0 <__alt_mem_onchip_memory2_0+0xf7bffee0>
    41c8:	00800044 	movi	r2,1
    41cc:	a0800115 	stw	r2,4(r20)
    41d0:	003f7406 	br	3fa4 <__alt_mem_onchip_memory2_0+0xf7bfffa4>
    41d4:	1805d0ba 	srai	r2,r3,2
    41d8:	01c00044 	movi	r7,1
    41dc:	30c00117 	ldw	r3,4(r6)
    41e0:	388e983a 	sll	r7,r7,r2
    41e4:	2805883a 	mov	r2,r5
    41e8:	38c6b03a 	or	r3,r7,r3
    41ec:	30c00115 	stw	r3,4(r6)
    41f0:	003f9b06 	br	4060 <__alt_mem_onchip_memory2_0+0xf7c00060>
    41f4:	00c15504 	movi	r3,1364
    41f8:	18801a36 	bltu	r3,r2,4264 <_malloc_r+0x768>
    41fc:	8804d4ba 	srli	r2,r17,18
    4200:	12001f44 	addi	r8,r2,125
    4204:	11c01f04 	addi	r7,r2,124
    4208:	4209883a 	add	r4,r8,r8
    420c:	003e5906 	br	3b74 <__alt_mem_onchip_memory2_0+0xf7bffb74>
    4210:	ad400404 	addi	r21,r21,16
    4214:	003f1706 	br	3e74 <__alt_mem_onchip_memory2_0+0xf7bffe74>
    4218:	00c01504 	movi	r3,84
    421c:	18802336 	bltu	r3,r2,42ac <_malloc_r+0x7b0>
    4220:	3804d33a 	srli	r2,r7,12
    4224:	11401bc4 	addi	r5,r2,111
    4228:	10c01b84 	addi	r3,r2,110
    422c:	294b883a 	add	r5,r5,r5
    4230:	003f7b06 	br	4020 <__alt_mem_onchip_memory2_0+0xf7c00020>
    4234:	9c000217 	ldw	r16,8(r19)
    4238:	00bfff04 	movi	r2,-4
    423c:	80c00117 	ldw	r3,4(r16)
    4240:	1886703a 	and	r3,r3,r2
    4244:	003f5306 	br	3f94 <__alt_mem_onchip_memory2_0+0xf7bfff94>
    4248:	3083ffcc 	andi	r2,r6,4095
    424c:	103f181e 	bne	r2,zero,3eb0 <__alt_mem_onchip_memory2_0+0xf7bffeb0>
    4250:	99000217 	ldw	r4,8(r19)
    4254:	b545883a 	add	r2,r22,r21
    4258:	10800054 	ori	r2,r2,1
    425c:	20800115 	stw	r2,4(r4)
    4260:	003f3e06 	br	3f5c <__alt_mem_onchip_memory2_0+0xf7bfff5c>
    4264:	01003f84 	movi	r4,254
    4268:	02001fc4 	movi	r8,127
    426c:	01c01f84 	movi	r7,126
    4270:	003e4006 	br	3b74 <__alt_mem_onchip_memory2_0+0xf7bffb74>
    4274:	008000b4 	movhi	r2,2
    4278:	10806c04 	addi	r2,r2,432
    427c:	15000015 	stw	r20,0(r2)
    4280:	003f1106 	br	3ec8 <__alt_mem_onchip_memory2_0+0xf7bffec8>
    4284:	00800044 	movi	r2,1
    4288:	002b883a 	mov	r21,zero
    428c:	003f1f06 	br	3f0c <__alt_mem_onchip_memory2_0+0xf7bfff0c>
    4290:	81400204 	addi	r5,r16,8
    4294:	9009883a 	mov	r4,r18
    4298:	0005a5c0 	call	5a5c <_free_r>
    429c:	008000b4 	movhi	r2,2
    42a0:	10874904 	addi	r2,r2,7460
    42a4:	10c00017 	ldw	r3,0(r2)
    42a8:	003f2c06 	br	3f5c <__alt_mem_onchip_memory2_0+0xf7bfff5c>
    42ac:	00c05504 	movi	r3,340
    42b0:	18800536 	bltu	r3,r2,42c8 <_malloc_r+0x7cc>
    42b4:	3804d3fa 	srli	r2,r7,15
    42b8:	11401e04 	addi	r5,r2,120
    42bc:	10c01dc4 	addi	r3,r2,119
    42c0:	294b883a 	add	r5,r5,r5
    42c4:	003f5606 	br	4020 <__alt_mem_onchip_memory2_0+0xf7c00020>
    42c8:	00c15504 	movi	r3,1364
    42cc:	18800536 	bltu	r3,r2,42e4 <_malloc_r+0x7e8>
    42d0:	3804d4ba 	srli	r2,r7,18
    42d4:	11401f44 	addi	r5,r2,125
    42d8:	10c01f04 	addi	r3,r2,124
    42dc:	294b883a 	add	r5,r5,r5
    42e0:	003f4f06 	br	4020 <__alt_mem_onchip_memory2_0+0xf7c00020>
    42e4:	01403f84 	movi	r5,254
    42e8:	00c01f84 	movi	r3,126
    42ec:	003f4c06 	br	4020 <__alt_mem_onchip_memory2_0+0xf7c00020>
    42f0:	98800117 	ldw	r2,4(r19)
    42f4:	003fa006 	br	4178 <__alt_mem_onchip_memory2_0+0xf7c00178>
    42f8:	8808d0fa 	srli	r4,r17,3
    42fc:	20800044 	addi	r2,r4,1
    4300:	1085883a 	add	r2,r2,r2
    4304:	003e9006 	br	3d48 <__alt_mem_onchip_memory2_0+0xf7bffd48>

00004308 <memchr>:
    4308:	208000cc 	andi	r2,r4,3
    430c:	280f883a 	mov	r7,r5
    4310:	10003426 	beq	r2,zero,43e4 <memchr+0xdc>
    4314:	30bfffc4 	addi	r2,r6,-1
    4318:	30001a26 	beq	r6,zero,4384 <memchr+0x7c>
    431c:	20c00003 	ldbu	r3,0(r4)
    4320:	29803fcc 	andi	r6,r5,255
    4324:	30c0051e 	bne	r6,r3,433c <memchr+0x34>
    4328:	00001806 	br	438c <memchr+0x84>
    432c:	10001526 	beq	r2,zero,4384 <memchr+0x7c>
    4330:	20c00003 	ldbu	r3,0(r4)
    4334:	10bfffc4 	addi	r2,r2,-1
    4338:	30c01426 	beq	r6,r3,438c <memchr+0x84>
    433c:	21000044 	addi	r4,r4,1
    4340:	20c000cc 	andi	r3,r4,3
    4344:	183ff91e 	bne	r3,zero,432c <__alt_mem_onchip_memory2_0+0xf7c0032c>
    4348:	020000c4 	movi	r8,3
    434c:	40801136 	bltu	r8,r2,4394 <memchr+0x8c>
    4350:	10000c26 	beq	r2,zero,4384 <memchr+0x7c>
    4354:	20c00003 	ldbu	r3,0(r4)
    4358:	29403fcc 	andi	r5,r5,255
    435c:	28c00b26 	beq	r5,r3,438c <memchr+0x84>
    4360:	20c00044 	addi	r3,r4,1
    4364:	39803fcc 	andi	r6,r7,255
    4368:	2089883a 	add	r4,r4,r2
    436c:	00000306 	br	437c <memchr+0x74>
    4370:	18c00044 	addi	r3,r3,1
    4374:	197fffc3 	ldbu	r5,-1(r3)
    4378:	31400526 	beq	r6,r5,4390 <memchr+0x88>
    437c:	1805883a 	mov	r2,r3
    4380:	20fffb1e 	bne	r4,r3,4370 <__alt_mem_onchip_memory2_0+0xf7c00370>
    4384:	0005883a 	mov	r2,zero
    4388:	f800283a 	ret
    438c:	2005883a 	mov	r2,r4
    4390:	f800283a 	ret
    4394:	28c03fcc 	andi	r3,r5,255
    4398:	1812923a 	slli	r9,r3,8
    439c:	02ffbff4 	movhi	r11,65279
    43a0:	02a02074 	movhi	r10,32897
    43a4:	48d2b03a 	or	r9,r9,r3
    43a8:	4806943a 	slli	r3,r9,16
    43ac:	5affbfc4 	addi	r11,r11,-257
    43b0:	52a02004 	addi	r10,r10,-32640
    43b4:	48d2b03a 	or	r9,r9,r3
    43b8:	20c00017 	ldw	r3,0(r4)
    43bc:	48c6f03a 	xor	r3,r9,r3
    43c0:	1acd883a 	add	r6,r3,r11
    43c4:	00c6303a 	nor	r3,zero,r3
    43c8:	30c6703a 	and	r3,r6,r3
    43cc:	1a86703a 	and	r3,r3,r10
    43d0:	183fe01e 	bne	r3,zero,4354 <__alt_mem_onchip_memory2_0+0xf7c00354>
    43d4:	10bfff04 	addi	r2,r2,-4
    43d8:	21000104 	addi	r4,r4,4
    43dc:	40bff636 	bltu	r8,r2,43b8 <__alt_mem_onchip_memory2_0+0xf7c003b8>
    43e0:	003fdb06 	br	4350 <__alt_mem_onchip_memory2_0+0xf7c00350>
    43e4:	3005883a 	mov	r2,r6
    43e8:	003fd706 	br	4348 <__alt_mem_onchip_memory2_0+0xf7c00348>

000043ec <memcmp>:
    43ec:	01c000c4 	movi	r7,3
    43f0:	3980192e 	bgeu	r7,r6,4458 <memcmp+0x6c>
    43f4:	2144b03a 	or	r2,r4,r5
    43f8:	11c4703a 	and	r2,r2,r7
    43fc:	10000f26 	beq	r2,zero,443c <memcmp+0x50>
    4400:	20800003 	ldbu	r2,0(r4)
    4404:	28c00003 	ldbu	r3,0(r5)
    4408:	10c0151e 	bne	r2,r3,4460 <memcmp+0x74>
    440c:	31bfff84 	addi	r6,r6,-2
    4410:	01ffffc4 	movi	r7,-1
    4414:	00000406 	br	4428 <memcmp+0x3c>
    4418:	20800003 	ldbu	r2,0(r4)
    441c:	28c00003 	ldbu	r3,0(r5)
    4420:	31bfffc4 	addi	r6,r6,-1
    4424:	10c00e1e 	bne	r2,r3,4460 <memcmp+0x74>
    4428:	21000044 	addi	r4,r4,1
    442c:	29400044 	addi	r5,r5,1
    4430:	31fff91e 	bne	r6,r7,4418 <__alt_mem_onchip_memory2_0+0xf7c00418>
    4434:	0005883a 	mov	r2,zero
    4438:	f800283a 	ret
    443c:	20c00017 	ldw	r3,0(r4)
    4440:	28800017 	ldw	r2,0(r5)
    4444:	18bfee1e 	bne	r3,r2,4400 <__alt_mem_onchip_memory2_0+0xf7c00400>
    4448:	31bfff04 	addi	r6,r6,-4
    444c:	21000104 	addi	r4,r4,4
    4450:	29400104 	addi	r5,r5,4
    4454:	39bff936 	bltu	r7,r6,443c <__alt_mem_onchip_memory2_0+0xf7c0043c>
    4458:	303fe91e 	bne	r6,zero,4400 <__alt_mem_onchip_memory2_0+0xf7c00400>
    445c:	003ff506 	br	4434 <__alt_mem_onchip_memory2_0+0xf7c00434>
    4460:	10c5c83a 	sub	r2,r2,r3
    4464:	f800283a 	ret

00004468 <memcpy>:
    4468:	defffd04 	addi	sp,sp,-12
    446c:	dfc00215 	stw	ra,8(sp)
    4470:	dc400115 	stw	r17,4(sp)
    4474:	dc000015 	stw	r16,0(sp)
    4478:	00c003c4 	movi	r3,15
    447c:	2005883a 	mov	r2,r4
    4480:	1980452e 	bgeu	r3,r6,4598 <memcpy+0x130>
    4484:	2906b03a 	or	r3,r5,r4
    4488:	18c000cc 	andi	r3,r3,3
    448c:	1800441e 	bne	r3,zero,45a0 <memcpy+0x138>
    4490:	347ffc04 	addi	r17,r6,-16
    4494:	8822d13a 	srli	r17,r17,4
    4498:	28c00104 	addi	r3,r5,4
    449c:	23400104 	addi	r13,r4,4
    44a0:	8820913a 	slli	r16,r17,4
    44a4:	2b000204 	addi	r12,r5,8
    44a8:	22c00204 	addi	r11,r4,8
    44ac:	84000504 	addi	r16,r16,20
    44b0:	2a800304 	addi	r10,r5,12
    44b4:	22400304 	addi	r9,r4,12
    44b8:	2c21883a 	add	r16,r5,r16
    44bc:	2811883a 	mov	r8,r5
    44c0:	200f883a 	mov	r7,r4
    44c4:	41000017 	ldw	r4,0(r8)
    44c8:	1fc00017 	ldw	ra,0(r3)
    44cc:	63c00017 	ldw	r15,0(r12)
    44d0:	39000015 	stw	r4,0(r7)
    44d4:	53800017 	ldw	r14,0(r10)
    44d8:	6fc00015 	stw	ra,0(r13)
    44dc:	5bc00015 	stw	r15,0(r11)
    44e0:	4b800015 	stw	r14,0(r9)
    44e4:	18c00404 	addi	r3,r3,16
    44e8:	39c00404 	addi	r7,r7,16
    44ec:	42000404 	addi	r8,r8,16
    44f0:	6b400404 	addi	r13,r13,16
    44f4:	63000404 	addi	r12,r12,16
    44f8:	5ac00404 	addi	r11,r11,16
    44fc:	52800404 	addi	r10,r10,16
    4500:	4a400404 	addi	r9,r9,16
    4504:	1c3fef1e 	bne	r3,r16,44c4 <__alt_mem_onchip_memory2_0+0xf7c004c4>
    4508:	89c00044 	addi	r7,r17,1
    450c:	380e913a 	slli	r7,r7,4
    4510:	310003cc 	andi	r4,r6,15
    4514:	02c000c4 	movi	r11,3
    4518:	11c7883a 	add	r3,r2,r7
    451c:	29cb883a 	add	r5,r5,r7
    4520:	5900212e 	bgeu	r11,r4,45a8 <memcpy+0x140>
    4524:	1813883a 	mov	r9,r3
    4528:	2811883a 	mov	r8,r5
    452c:	200f883a 	mov	r7,r4
    4530:	42800017 	ldw	r10,0(r8)
    4534:	4a400104 	addi	r9,r9,4
    4538:	39ffff04 	addi	r7,r7,-4
    453c:	4abfff15 	stw	r10,-4(r9)
    4540:	42000104 	addi	r8,r8,4
    4544:	59fffa36 	bltu	r11,r7,4530 <__alt_mem_onchip_memory2_0+0xf7c00530>
    4548:	213fff04 	addi	r4,r4,-4
    454c:	2008d0ba 	srli	r4,r4,2
    4550:	318000cc 	andi	r6,r6,3
    4554:	21000044 	addi	r4,r4,1
    4558:	2109883a 	add	r4,r4,r4
    455c:	2109883a 	add	r4,r4,r4
    4560:	1907883a 	add	r3,r3,r4
    4564:	290b883a 	add	r5,r5,r4
    4568:	30000626 	beq	r6,zero,4584 <memcpy+0x11c>
    456c:	198d883a 	add	r6,r3,r6
    4570:	29c00003 	ldbu	r7,0(r5)
    4574:	18c00044 	addi	r3,r3,1
    4578:	29400044 	addi	r5,r5,1
    457c:	19ffffc5 	stb	r7,-1(r3)
    4580:	19bffb1e 	bne	r3,r6,4570 <__alt_mem_onchip_memory2_0+0xf7c00570>
    4584:	dfc00217 	ldw	ra,8(sp)
    4588:	dc400117 	ldw	r17,4(sp)
    458c:	dc000017 	ldw	r16,0(sp)
    4590:	dec00304 	addi	sp,sp,12
    4594:	f800283a 	ret
    4598:	2007883a 	mov	r3,r4
    459c:	003ff206 	br	4568 <__alt_mem_onchip_memory2_0+0xf7c00568>
    45a0:	2007883a 	mov	r3,r4
    45a4:	003ff106 	br	456c <__alt_mem_onchip_memory2_0+0xf7c0056c>
    45a8:	200d883a 	mov	r6,r4
    45ac:	003fee06 	br	4568 <__alt_mem_onchip_memory2_0+0xf7c00568>

000045b0 <memmove>:
    45b0:	2005883a 	mov	r2,r4
    45b4:	29000b2e 	bgeu	r5,r4,45e4 <memmove+0x34>
    45b8:	298f883a 	add	r7,r5,r6
    45bc:	21c0092e 	bgeu	r4,r7,45e4 <memmove+0x34>
    45c0:	2187883a 	add	r3,r4,r6
    45c4:	198bc83a 	sub	r5,r3,r6
    45c8:	30004826 	beq	r6,zero,46ec <memmove+0x13c>
    45cc:	39ffffc4 	addi	r7,r7,-1
    45d0:	39000003 	ldbu	r4,0(r7)
    45d4:	18ffffc4 	addi	r3,r3,-1
    45d8:	19000005 	stb	r4,0(r3)
    45dc:	28fffb1e 	bne	r5,r3,45cc <__alt_mem_onchip_memory2_0+0xf7c005cc>
    45e0:	f800283a 	ret
    45e4:	00c003c4 	movi	r3,15
    45e8:	1980412e 	bgeu	r3,r6,46f0 <memmove+0x140>
    45ec:	2886b03a 	or	r3,r5,r2
    45f0:	18c000cc 	andi	r3,r3,3
    45f4:	1800401e 	bne	r3,zero,46f8 <memmove+0x148>
    45f8:	33fffc04 	addi	r15,r6,-16
    45fc:	781ed13a 	srli	r15,r15,4
    4600:	28c00104 	addi	r3,r5,4
    4604:	13400104 	addi	r13,r2,4
    4608:	781c913a 	slli	r14,r15,4
    460c:	2b000204 	addi	r12,r5,8
    4610:	12c00204 	addi	r11,r2,8
    4614:	73800504 	addi	r14,r14,20
    4618:	2a800304 	addi	r10,r5,12
    461c:	12400304 	addi	r9,r2,12
    4620:	2b9d883a 	add	r14,r5,r14
    4624:	2811883a 	mov	r8,r5
    4628:	100f883a 	mov	r7,r2
    462c:	41000017 	ldw	r4,0(r8)
    4630:	39c00404 	addi	r7,r7,16
    4634:	18c00404 	addi	r3,r3,16
    4638:	393ffc15 	stw	r4,-16(r7)
    463c:	193ffc17 	ldw	r4,-16(r3)
    4640:	6b400404 	addi	r13,r13,16
    4644:	5ac00404 	addi	r11,r11,16
    4648:	693ffc15 	stw	r4,-16(r13)
    464c:	61000017 	ldw	r4,0(r12)
    4650:	4a400404 	addi	r9,r9,16
    4654:	42000404 	addi	r8,r8,16
    4658:	593ffc15 	stw	r4,-16(r11)
    465c:	51000017 	ldw	r4,0(r10)
    4660:	63000404 	addi	r12,r12,16
    4664:	52800404 	addi	r10,r10,16
    4668:	493ffc15 	stw	r4,-16(r9)
    466c:	1bbfef1e 	bne	r3,r14,462c <__alt_mem_onchip_memory2_0+0xf7c0062c>
    4670:	79000044 	addi	r4,r15,1
    4674:	2008913a 	slli	r4,r4,4
    4678:	328003cc 	andi	r10,r6,15
    467c:	02c000c4 	movi	r11,3
    4680:	1107883a 	add	r3,r2,r4
    4684:	290b883a 	add	r5,r5,r4
    4688:	5a801e2e 	bgeu	r11,r10,4704 <memmove+0x154>
    468c:	1813883a 	mov	r9,r3
    4690:	2811883a 	mov	r8,r5
    4694:	500f883a 	mov	r7,r10
    4698:	41000017 	ldw	r4,0(r8)
    469c:	4a400104 	addi	r9,r9,4
    46a0:	39ffff04 	addi	r7,r7,-4
    46a4:	493fff15 	stw	r4,-4(r9)
    46a8:	42000104 	addi	r8,r8,4
    46ac:	59fffa36 	bltu	r11,r7,4698 <__alt_mem_onchip_memory2_0+0xf7c00698>
    46b0:	513fff04 	addi	r4,r10,-4
    46b4:	2008d0ba 	srli	r4,r4,2
    46b8:	318000cc 	andi	r6,r6,3
    46bc:	21000044 	addi	r4,r4,1
    46c0:	2109883a 	add	r4,r4,r4
    46c4:	2109883a 	add	r4,r4,r4
    46c8:	1907883a 	add	r3,r3,r4
    46cc:	290b883a 	add	r5,r5,r4
    46d0:	30000b26 	beq	r6,zero,4700 <memmove+0x150>
    46d4:	198d883a 	add	r6,r3,r6
    46d8:	29c00003 	ldbu	r7,0(r5)
    46dc:	18c00044 	addi	r3,r3,1
    46e0:	29400044 	addi	r5,r5,1
    46e4:	19ffffc5 	stb	r7,-1(r3)
    46e8:	19bffb1e 	bne	r3,r6,46d8 <__alt_mem_onchip_memory2_0+0xf7c006d8>
    46ec:	f800283a 	ret
    46f0:	1007883a 	mov	r3,r2
    46f4:	003ff606 	br	46d0 <__alt_mem_onchip_memory2_0+0xf7c006d0>
    46f8:	1007883a 	mov	r3,r2
    46fc:	003ff506 	br	46d4 <__alt_mem_onchip_memory2_0+0xf7c006d4>
    4700:	f800283a 	ret
    4704:	500d883a 	mov	r6,r10
    4708:	003ff106 	br	46d0 <__alt_mem_onchip_memory2_0+0xf7c006d0>

0000470c <_putc_r>:
    470c:	defffc04 	addi	sp,sp,-16
    4710:	dc000215 	stw	r16,8(sp)
    4714:	dfc00315 	stw	ra,12(sp)
    4718:	2021883a 	mov	r16,r4
    471c:	20000226 	beq	r4,zero,4728 <_putc_r+0x1c>
    4720:	20800e17 	ldw	r2,56(r4)
    4724:	10001b26 	beq	r2,zero,4794 <_putc_r+0x88>
    4728:	30800217 	ldw	r2,8(r6)
    472c:	10bfffc4 	addi	r2,r2,-1
    4730:	30800215 	stw	r2,8(r6)
    4734:	10000a16 	blt	r2,zero,4760 <_putc_r+0x54>
    4738:	30800017 	ldw	r2,0(r6)
    473c:	11400005 	stb	r5,0(r2)
    4740:	30800017 	ldw	r2,0(r6)
    4744:	10c00044 	addi	r3,r2,1
    4748:	30c00015 	stw	r3,0(r6)
    474c:	10800003 	ldbu	r2,0(r2)
    4750:	dfc00317 	ldw	ra,12(sp)
    4754:	dc000217 	ldw	r16,8(sp)
    4758:	dec00404 	addi	sp,sp,16
    475c:	f800283a 	ret
    4760:	30c00617 	ldw	r3,24(r6)
    4764:	10c00616 	blt	r2,r3,4780 <_putc_r+0x74>
    4768:	30800017 	ldw	r2,0(r6)
    476c:	00c00284 	movi	r3,10
    4770:	11400005 	stb	r5,0(r2)
    4774:	30800017 	ldw	r2,0(r6)
    4778:	11400003 	ldbu	r5,0(r2)
    477c:	28fff11e 	bne	r5,r3,4744 <__alt_mem_onchip_memory2_0+0xf7c00744>
    4780:	8009883a 	mov	r4,r16
    4784:	dfc00317 	ldw	ra,12(sp)
    4788:	dc000217 	ldw	r16,8(sp)
    478c:	dec00404 	addi	sp,sp,16
    4790:	0004ec41 	jmpi	4ec4 <__swbuf_r>
    4794:	d9400015 	stw	r5,0(sp)
    4798:	d9800115 	stw	r6,4(sp)
    479c:	00058e80 	call	58e8 <__sinit>
    47a0:	d9800117 	ldw	r6,4(sp)
    47a4:	d9400017 	ldw	r5,0(sp)
    47a8:	003fdf06 	br	4728 <__alt_mem_onchip_memory2_0+0xf7c00728>

000047ac <putc>:
    47ac:	008000b4 	movhi	r2,2
    47b0:	defffc04 	addi	sp,sp,-16
    47b4:	10806b04 	addi	r2,r2,428
    47b8:	dc000115 	stw	r16,4(sp)
    47bc:	14000017 	ldw	r16,0(r2)
    47c0:	dc400215 	stw	r17,8(sp)
    47c4:	dfc00315 	stw	ra,12(sp)
    47c8:	2023883a 	mov	r17,r4
    47cc:	80000226 	beq	r16,zero,47d8 <putc+0x2c>
    47d0:	80800e17 	ldw	r2,56(r16)
    47d4:	10001a26 	beq	r2,zero,4840 <putc+0x94>
    47d8:	28800217 	ldw	r2,8(r5)
    47dc:	10bfffc4 	addi	r2,r2,-1
    47e0:	28800215 	stw	r2,8(r5)
    47e4:	10000b16 	blt	r2,zero,4814 <putc+0x68>
    47e8:	28800017 	ldw	r2,0(r5)
    47ec:	14400005 	stb	r17,0(r2)
    47f0:	28800017 	ldw	r2,0(r5)
    47f4:	10c00044 	addi	r3,r2,1
    47f8:	28c00015 	stw	r3,0(r5)
    47fc:	10800003 	ldbu	r2,0(r2)
    4800:	dfc00317 	ldw	ra,12(sp)
    4804:	dc400217 	ldw	r17,8(sp)
    4808:	dc000117 	ldw	r16,4(sp)
    480c:	dec00404 	addi	sp,sp,16
    4810:	f800283a 	ret
    4814:	28c00617 	ldw	r3,24(r5)
    4818:	10c00e16 	blt	r2,r3,4854 <putc+0xa8>
    481c:	28800017 	ldw	r2,0(r5)
    4820:	01000284 	movi	r4,10
    4824:	14400005 	stb	r17,0(r2)
    4828:	28800017 	ldw	r2,0(r5)
    482c:	10c00003 	ldbu	r3,0(r2)
    4830:	193ff01e 	bne	r3,r4,47f4 <__alt_mem_onchip_memory2_0+0xf7c007f4>
    4834:	280d883a 	mov	r6,r5
    4838:	180b883a 	mov	r5,r3
    483c:	00000706 	br	485c <putc+0xb0>
    4840:	8009883a 	mov	r4,r16
    4844:	d9400015 	stw	r5,0(sp)
    4848:	00058e80 	call	58e8 <__sinit>
    484c:	d9400017 	ldw	r5,0(sp)
    4850:	003fe106 	br	47d8 <__alt_mem_onchip_memory2_0+0xf7c007d8>
    4854:	280d883a 	mov	r6,r5
    4858:	880b883a 	mov	r5,r17
    485c:	8009883a 	mov	r4,r16
    4860:	dfc00317 	ldw	ra,12(sp)
    4864:	dc400217 	ldw	r17,8(sp)
    4868:	dc000117 	ldw	r16,4(sp)
    486c:	dec00404 	addi	sp,sp,16
    4870:	0004ec41 	jmpi	4ec4 <__swbuf_r>

00004874 <_realloc_r>:
    4874:	defff604 	addi	sp,sp,-40
    4878:	dc800215 	stw	r18,8(sp)
    487c:	dfc00915 	stw	ra,36(sp)
    4880:	df000815 	stw	fp,32(sp)
    4884:	ddc00715 	stw	r23,28(sp)
    4888:	dd800615 	stw	r22,24(sp)
    488c:	dd400515 	stw	r21,20(sp)
    4890:	dd000415 	stw	r20,16(sp)
    4894:	dcc00315 	stw	r19,12(sp)
    4898:	dc400115 	stw	r17,4(sp)
    489c:	dc000015 	stw	r16,0(sp)
    48a0:	3025883a 	mov	r18,r6
    48a4:	2800b726 	beq	r5,zero,4b84 <_realloc_r+0x310>
    48a8:	282b883a 	mov	r21,r5
    48ac:	2029883a 	mov	r20,r4
    48b0:	0006b000 	call	6b00 <__malloc_lock>
    48b4:	a8bfff17 	ldw	r2,-4(r21)
    48b8:	043fff04 	movi	r16,-4
    48bc:	90c002c4 	addi	r3,r18,11
    48c0:	01000584 	movi	r4,22
    48c4:	acfffe04 	addi	r19,r21,-8
    48c8:	1420703a 	and	r16,r2,r16
    48cc:	20c0332e 	bgeu	r4,r3,499c <_realloc_r+0x128>
    48d0:	047ffe04 	movi	r17,-8
    48d4:	1c62703a 	and	r17,r3,r17
    48d8:	8807883a 	mov	r3,r17
    48dc:	88005816 	blt	r17,zero,4a40 <_realloc_r+0x1cc>
    48e0:	8c805736 	bltu	r17,r18,4a40 <_realloc_r+0x1cc>
    48e4:	80c0300e 	bge	r16,r3,49a8 <_realloc_r+0x134>
    48e8:	070000b4 	movhi	fp,2
    48ec:	e73f5f04 	addi	fp,fp,-644
    48f0:	e1c00217 	ldw	r7,8(fp)
    48f4:	9c09883a 	add	r4,r19,r16
    48f8:	22000117 	ldw	r8,4(r4)
    48fc:	21c06326 	beq	r4,r7,4a8c <_realloc_r+0x218>
    4900:	017fff84 	movi	r5,-2
    4904:	414a703a 	and	r5,r8,r5
    4908:	214b883a 	add	r5,r4,r5
    490c:	29800117 	ldw	r6,4(r5)
    4910:	3180004c 	andi	r6,r6,1
    4914:	30003f26 	beq	r6,zero,4a14 <_realloc_r+0x1a0>
    4918:	1080004c 	andi	r2,r2,1
    491c:	10008326 	beq	r2,zero,4b2c <_realloc_r+0x2b8>
    4920:	900b883a 	mov	r5,r18
    4924:	a009883a 	mov	r4,r20
    4928:	0003afc0 	call	3afc <_malloc_r>
    492c:	1025883a 	mov	r18,r2
    4930:	10011e26 	beq	r2,zero,4dac <_realloc_r+0x538>
    4934:	a93fff17 	ldw	r4,-4(r21)
    4938:	10fffe04 	addi	r3,r2,-8
    493c:	00bfff84 	movi	r2,-2
    4940:	2084703a 	and	r2,r4,r2
    4944:	9885883a 	add	r2,r19,r2
    4948:	1880ee26 	beq	r3,r2,4d04 <_realloc_r+0x490>
    494c:	81bfff04 	addi	r6,r16,-4
    4950:	00800904 	movi	r2,36
    4954:	1180b836 	bltu	r2,r6,4c38 <_realloc_r+0x3c4>
    4958:	00c004c4 	movi	r3,19
    495c:	19809636 	bltu	r3,r6,4bb8 <_realloc_r+0x344>
    4960:	9005883a 	mov	r2,r18
    4964:	a807883a 	mov	r3,r21
    4968:	19000017 	ldw	r4,0(r3)
    496c:	11000015 	stw	r4,0(r2)
    4970:	19000117 	ldw	r4,4(r3)
    4974:	11000115 	stw	r4,4(r2)
    4978:	18c00217 	ldw	r3,8(r3)
    497c:	10c00215 	stw	r3,8(r2)
    4980:	a80b883a 	mov	r5,r21
    4984:	a009883a 	mov	r4,r20
    4988:	0005a5c0 	call	5a5c <_free_r>
    498c:	a009883a 	mov	r4,r20
    4990:	0006b240 	call	6b24 <__malloc_unlock>
    4994:	9005883a 	mov	r2,r18
    4998:	00001206 	br	49e4 <_realloc_r+0x170>
    499c:	00c00404 	movi	r3,16
    49a0:	1823883a 	mov	r17,r3
    49a4:	003fce06 	br	48e0 <__alt_mem_onchip_memory2_0+0xf7c008e0>
    49a8:	a825883a 	mov	r18,r21
    49ac:	8445c83a 	sub	r2,r16,r17
    49b0:	00c003c4 	movi	r3,15
    49b4:	18802636 	bltu	r3,r2,4a50 <_realloc_r+0x1dc>
    49b8:	99800117 	ldw	r6,4(r19)
    49bc:	9c07883a 	add	r3,r19,r16
    49c0:	3180004c 	andi	r6,r6,1
    49c4:	3420b03a 	or	r16,r6,r16
    49c8:	9c000115 	stw	r16,4(r19)
    49cc:	18800117 	ldw	r2,4(r3)
    49d0:	10800054 	ori	r2,r2,1
    49d4:	18800115 	stw	r2,4(r3)
    49d8:	a009883a 	mov	r4,r20
    49dc:	0006b240 	call	6b24 <__malloc_unlock>
    49e0:	9005883a 	mov	r2,r18
    49e4:	dfc00917 	ldw	ra,36(sp)
    49e8:	df000817 	ldw	fp,32(sp)
    49ec:	ddc00717 	ldw	r23,28(sp)
    49f0:	dd800617 	ldw	r22,24(sp)
    49f4:	dd400517 	ldw	r21,20(sp)
    49f8:	dd000417 	ldw	r20,16(sp)
    49fc:	dcc00317 	ldw	r19,12(sp)
    4a00:	dc800217 	ldw	r18,8(sp)
    4a04:	dc400117 	ldw	r17,4(sp)
    4a08:	dc000017 	ldw	r16,0(sp)
    4a0c:	dec00a04 	addi	sp,sp,40
    4a10:	f800283a 	ret
    4a14:	017fff04 	movi	r5,-4
    4a18:	414a703a 	and	r5,r8,r5
    4a1c:	814d883a 	add	r6,r16,r5
    4a20:	30c01f16 	blt	r6,r3,4aa0 <_realloc_r+0x22c>
    4a24:	20800317 	ldw	r2,12(r4)
    4a28:	20c00217 	ldw	r3,8(r4)
    4a2c:	a825883a 	mov	r18,r21
    4a30:	3021883a 	mov	r16,r6
    4a34:	18800315 	stw	r2,12(r3)
    4a38:	10c00215 	stw	r3,8(r2)
    4a3c:	003fdb06 	br	49ac <__alt_mem_onchip_memory2_0+0xf7c009ac>
    4a40:	00800304 	movi	r2,12
    4a44:	a0800015 	stw	r2,0(r20)
    4a48:	0005883a 	mov	r2,zero
    4a4c:	003fe506 	br	49e4 <__alt_mem_onchip_memory2_0+0xf7c009e4>
    4a50:	98c00117 	ldw	r3,4(r19)
    4a54:	9c4b883a 	add	r5,r19,r17
    4a58:	11000054 	ori	r4,r2,1
    4a5c:	18c0004c 	andi	r3,r3,1
    4a60:	1c62b03a 	or	r17,r3,r17
    4a64:	9c400115 	stw	r17,4(r19)
    4a68:	29000115 	stw	r4,4(r5)
    4a6c:	2885883a 	add	r2,r5,r2
    4a70:	10c00117 	ldw	r3,4(r2)
    4a74:	29400204 	addi	r5,r5,8
    4a78:	a009883a 	mov	r4,r20
    4a7c:	18c00054 	ori	r3,r3,1
    4a80:	10c00115 	stw	r3,4(r2)
    4a84:	0005a5c0 	call	5a5c <_free_r>
    4a88:	003fd306 	br	49d8 <__alt_mem_onchip_memory2_0+0xf7c009d8>
    4a8c:	017fff04 	movi	r5,-4
    4a90:	414a703a 	and	r5,r8,r5
    4a94:	89800404 	addi	r6,r17,16
    4a98:	8151883a 	add	r8,r16,r5
    4a9c:	4180590e 	bge	r8,r6,4c04 <_realloc_r+0x390>
    4aa0:	1080004c 	andi	r2,r2,1
    4aa4:	103f9e1e 	bne	r2,zero,4920 <__alt_mem_onchip_memory2_0+0xf7c00920>
    4aa8:	adbffe17 	ldw	r22,-8(r21)
    4aac:	00bfff04 	movi	r2,-4
    4ab0:	9dadc83a 	sub	r22,r19,r22
    4ab4:	b1800117 	ldw	r6,4(r22)
    4ab8:	3084703a 	and	r2,r6,r2
    4abc:	20002026 	beq	r4,zero,4b40 <_realloc_r+0x2cc>
    4ac0:	80af883a 	add	r23,r16,r2
    4ac4:	b96f883a 	add	r23,r23,r5
    4ac8:	21c05f26 	beq	r4,r7,4c48 <_realloc_r+0x3d4>
    4acc:	b8c01c16 	blt	r23,r3,4b40 <_realloc_r+0x2cc>
    4ad0:	20800317 	ldw	r2,12(r4)
    4ad4:	20c00217 	ldw	r3,8(r4)
    4ad8:	81bfff04 	addi	r6,r16,-4
    4adc:	01000904 	movi	r4,36
    4ae0:	18800315 	stw	r2,12(r3)
    4ae4:	10c00215 	stw	r3,8(r2)
    4ae8:	b0c00217 	ldw	r3,8(r22)
    4aec:	b0800317 	ldw	r2,12(r22)
    4af0:	b4800204 	addi	r18,r22,8
    4af4:	18800315 	stw	r2,12(r3)
    4af8:	10c00215 	stw	r3,8(r2)
    4afc:	21801b36 	bltu	r4,r6,4b6c <_realloc_r+0x2f8>
    4b00:	008004c4 	movi	r2,19
    4b04:	1180352e 	bgeu	r2,r6,4bdc <_realloc_r+0x368>
    4b08:	a8800017 	ldw	r2,0(r21)
    4b0c:	b0800215 	stw	r2,8(r22)
    4b10:	a8800117 	ldw	r2,4(r21)
    4b14:	b0800315 	stw	r2,12(r22)
    4b18:	008006c4 	movi	r2,27
    4b1c:	11807f36 	bltu	r2,r6,4d1c <_realloc_r+0x4a8>
    4b20:	b0800404 	addi	r2,r22,16
    4b24:	ad400204 	addi	r21,r21,8
    4b28:	00002d06 	br	4be0 <_realloc_r+0x36c>
    4b2c:	adbffe17 	ldw	r22,-8(r21)
    4b30:	00bfff04 	movi	r2,-4
    4b34:	9dadc83a 	sub	r22,r19,r22
    4b38:	b1000117 	ldw	r4,4(r22)
    4b3c:	2084703a 	and	r2,r4,r2
    4b40:	b03f7726 	beq	r22,zero,4920 <__alt_mem_onchip_memory2_0+0xf7c00920>
    4b44:	80af883a 	add	r23,r16,r2
    4b48:	b8ff7516 	blt	r23,r3,4920 <__alt_mem_onchip_memory2_0+0xf7c00920>
    4b4c:	b0800317 	ldw	r2,12(r22)
    4b50:	b0c00217 	ldw	r3,8(r22)
    4b54:	81bfff04 	addi	r6,r16,-4
    4b58:	01000904 	movi	r4,36
    4b5c:	18800315 	stw	r2,12(r3)
    4b60:	10c00215 	stw	r3,8(r2)
    4b64:	b4800204 	addi	r18,r22,8
    4b68:	21bfe52e 	bgeu	r4,r6,4b00 <__alt_mem_onchip_memory2_0+0xf7c00b00>
    4b6c:	a80b883a 	mov	r5,r21
    4b70:	9009883a 	mov	r4,r18
    4b74:	00045b00 	call	45b0 <memmove>
    4b78:	b821883a 	mov	r16,r23
    4b7c:	b027883a 	mov	r19,r22
    4b80:	003f8a06 	br	49ac <__alt_mem_onchip_memory2_0+0xf7c009ac>
    4b84:	300b883a 	mov	r5,r6
    4b88:	dfc00917 	ldw	ra,36(sp)
    4b8c:	df000817 	ldw	fp,32(sp)
    4b90:	ddc00717 	ldw	r23,28(sp)
    4b94:	dd800617 	ldw	r22,24(sp)
    4b98:	dd400517 	ldw	r21,20(sp)
    4b9c:	dd000417 	ldw	r20,16(sp)
    4ba0:	dcc00317 	ldw	r19,12(sp)
    4ba4:	dc800217 	ldw	r18,8(sp)
    4ba8:	dc400117 	ldw	r17,4(sp)
    4bac:	dc000017 	ldw	r16,0(sp)
    4bb0:	dec00a04 	addi	sp,sp,40
    4bb4:	0003afc1 	jmpi	3afc <_malloc_r>
    4bb8:	a8c00017 	ldw	r3,0(r21)
    4bbc:	90c00015 	stw	r3,0(r18)
    4bc0:	a8c00117 	ldw	r3,4(r21)
    4bc4:	90c00115 	stw	r3,4(r18)
    4bc8:	00c006c4 	movi	r3,27
    4bcc:	19804536 	bltu	r3,r6,4ce4 <_realloc_r+0x470>
    4bd0:	90800204 	addi	r2,r18,8
    4bd4:	a8c00204 	addi	r3,r21,8
    4bd8:	003f6306 	br	4968 <__alt_mem_onchip_memory2_0+0xf7c00968>
    4bdc:	9005883a 	mov	r2,r18
    4be0:	a8c00017 	ldw	r3,0(r21)
    4be4:	b821883a 	mov	r16,r23
    4be8:	b027883a 	mov	r19,r22
    4bec:	10c00015 	stw	r3,0(r2)
    4bf0:	a8c00117 	ldw	r3,4(r21)
    4bf4:	10c00115 	stw	r3,4(r2)
    4bf8:	a8c00217 	ldw	r3,8(r21)
    4bfc:	10c00215 	stw	r3,8(r2)
    4c00:	003f6a06 	br	49ac <__alt_mem_onchip_memory2_0+0xf7c009ac>
    4c04:	9c67883a 	add	r19,r19,r17
    4c08:	4445c83a 	sub	r2,r8,r17
    4c0c:	e4c00215 	stw	r19,8(fp)
    4c10:	10800054 	ori	r2,r2,1
    4c14:	98800115 	stw	r2,4(r19)
    4c18:	a8bfff17 	ldw	r2,-4(r21)
    4c1c:	a009883a 	mov	r4,r20
    4c20:	1080004c 	andi	r2,r2,1
    4c24:	1462b03a 	or	r17,r2,r17
    4c28:	ac7fff15 	stw	r17,-4(r21)
    4c2c:	0006b240 	call	6b24 <__malloc_unlock>
    4c30:	a805883a 	mov	r2,r21
    4c34:	003f6b06 	br	49e4 <__alt_mem_onchip_memory2_0+0xf7c009e4>
    4c38:	a80b883a 	mov	r5,r21
    4c3c:	9009883a 	mov	r4,r18
    4c40:	00045b00 	call	45b0 <memmove>
    4c44:	003f4e06 	br	4980 <__alt_mem_onchip_memory2_0+0xf7c00980>
    4c48:	89000404 	addi	r4,r17,16
    4c4c:	b93fbc16 	blt	r23,r4,4b40 <__alt_mem_onchip_memory2_0+0xf7c00b40>
    4c50:	b0800317 	ldw	r2,12(r22)
    4c54:	b0c00217 	ldw	r3,8(r22)
    4c58:	81bfff04 	addi	r6,r16,-4
    4c5c:	01000904 	movi	r4,36
    4c60:	18800315 	stw	r2,12(r3)
    4c64:	10c00215 	stw	r3,8(r2)
    4c68:	b4800204 	addi	r18,r22,8
    4c6c:	21804336 	bltu	r4,r6,4d7c <_realloc_r+0x508>
    4c70:	008004c4 	movi	r2,19
    4c74:	11803f2e 	bgeu	r2,r6,4d74 <_realloc_r+0x500>
    4c78:	a8800017 	ldw	r2,0(r21)
    4c7c:	b0800215 	stw	r2,8(r22)
    4c80:	a8800117 	ldw	r2,4(r21)
    4c84:	b0800315 	stw	r2,12(r22)
    4c88:	008006c4 	movi	r2,27
    4c8c:	11803f36 	bltu	r2,r6,4d8c <_realloc_r+0x518>
    4c90:	b0800404 	addi	r2,r22,16
    4c94:	ad400204 	addi	r21,r21,8
    4c98:	a8c00017 	ldw	r3,0(r21)
    4c9c:	10c00015 	stw	r3,0(r2)
    4ca0:	a8c00117 	ldw	r3,4(r21)
    4ca4:	10c00115 	stw	r3,4(r2)
    4ca8:	a8c00217 	ldw	r3,8(r21)
    4cac:	10c00215 	stw	r3,8(r2)
    4cb0:	b447883a 	add	r3,r22,r17
    4cb4:	bc45c83a 	sub	r2,r23,r17
    4cb8:	e0c00215 	stw	r3,8(fp)
    4cbc:	10800054 	ori	r2,r2,1
    4cc0:	18800115 	stw	r2,4(r3)
    4cc4:	b0800117 	ldw	r2,4(r22)
    4cc8:	a009883a 	mov	r4,r20
    4ccc:	1080004c 	andi	r2,r2,1
    4cd0:	1462b03a 	or	r17,r2,r17
    4cd4:	b4400115 	stw	r17,4(r22)
    4cd8:	0006b240 	call	6b24 <__malloc_unlock>
    4cdc:	9005883a 	mov	r2,r18
    4ce0:	003f4006 	br	49e4 <__alt_mem_onchip_memory2_0+0xf7c009e4>
    4ce4:	a8c00217 	ldw	r3,8(r21)
    4ce8:	90c00215 	stw	r3,8(r18)
    4cec:	a8c00317 	ldw	r3,12(r21)
    4cf0:	90c00315 	stw	r3,12(r18)
    4cf4:	30801126 	beq	r6,r2,4d3c <_realloc_r+0x4c8>
    4cf8:	90800404 	addi	r2,r18,16
    4cfc:	a8c00404 	addi	r3,r21,16
    4d00:	003f1906 	br	4968 <__alt_mem_onchip_memory2_0+0xf7c00968>
    4d04:	90ffff17 	ldw	r3,-4(r18)
    4d08:	00bfff04 	movi	r2,-4
    4d0c:	a825883a 	mov	r18,r21
    4d10:	1884703a 	and	r2,r3,r2
    4d14:	80a1883a 	add	r16,r16,r2
    4d18:	003f2406 	br	49ac <__alt_mem_onchip_memory2_0+0xf7c009ac>
    4d1c:	a8800217 	ldw	r2,8(r21)
    4d20:	b0800415 	stw	r2,16(r22)
    4d24:	a8800317 	ldw	r2,12(r21)
    4d28:	b0800515 	stw	r2,20(r22)
    4d2c:	31000a26 	beq	r6,r4,4d58 <_realloc_r+0x4e4>
    4d30:	b0800604 	addi	r2,r22,24
    4d34:	ad400404 	addi	r21,r21,16
    4d38:	003fa906 	br	4be0 <__alt_mem_onchip_memory2_0+0xf7c00be0>
    4d3c:	a9000417 	ldw	r4,16(r21)
    4d40:	90800604 	addi	r2,r18,24
    4d44:	a8c00604 	addi	r3,r21,24
    4d48:	91000415 	stw	r4,16(r18)
    4d4c:	a9000517 	ldw	r4,20(r21)
    4d50:	91000515 	stw	r4,20(r18)
    4d54:	003f0406 	br	4968 <__alt_mem_onchip_memory2_0+0xf7c00968>
    4d58:	a8c00417 	ldw	r3,16(r21)
    4d5c:	ad400604 	addi	r21,r21,24
    4d60:	b0800804 	addi	r2,r22,32
    4d64:	b0c00615 	stw	r3,24(r22)
    4d68:	a8ffff17 	ldw	r3,-4(r21)
    4d6c:	b0c00715 	stw	r3,28(r22)
    4d70:	003f9b06 	br	4be0 <__alt_mem_onchip_memory2_0+0xf7c00be0>
    4d74:	9005883a 	mov	r2,r18
    4d78:	003fc706 	br	4c98 <__alt_mem_onchip_memory2_0+0xf7c00c98>
    4d7c:	a80b883a 	mov	r5,r21
    4d80:	9009883a 	mov	r4,r18
    4d84:	00045b00 	call	45b0 <memmove>
    4d88:	003fc906 	br	4cb0 <__alt_mem_onchip_memory2_0+0xf7c00cb0>
    4d8c:	a8800217 	ldw	r2,8(r21)
    4d90:	b0800415 	stw	r2,16(r22)
    4d94:	a8800317 	ldw	r2,12(r21)
    4d98:	b0800515 	stw	r2,20(r22)
    4d9c:	31000726 	beq	r6,r4,4dbc <_realloc_r+0x548>
    4da0:	b0800604 	addi	r2,r22,24
    4da4:	ad400404 	addi	r21,r21,16
    4da8:	003fbb06 	br	4c98 <__alt_mem_onchip_memory2_0+0xf7c00c98>
    4dac:	a009883a 	mov	r4,r20
    4db0:	0006b240 	call	6b24 <__malloc_unlock>
    4db4:	0005883a 	mov	r2,zero
    4db8:	003f0a06 	br	49e4 <__alt_mem_onchip_memory2_0+0xf7c009e4>
    4dbc:	a8c00417 	ldw	r3,16(r21)
    4dc0:	ad400604 	addi	r21,r21,24
    4dc4:	b0800804 	addi	r2,r22,32
    4dc8:	b0c00615 	stw	r3,24(r22)
    4dcc:	a8ffff17 	ldw	r3,-4(r21)
    4dd0:	b0c00715 	stw	r3,28(r22)
    4dd4:	003fb006 	br	4c98 <__alt_mem_onchip_memory2_0+0xf7c00c98>

00004dd8 <_sbrk_r>:
    4dd8:	defffd04 	addi	sp,sp,-12
    4ddc:	dc000015 	stw	r16,0(sp)
    4de0:	040000b4 	movhi	r16,2
    4de4:	dc400115 	stw	r17,4(sp)
    4de8:	84074504 	addi	r16,r16,7444
    4dec:	2023883a 	mov	r17,r4
    4df0:	2809883a 	mov	r4,r5
    4df4:	dfc00215 	stw	ra,8(sp)
    4df8:	80000015 	stw	zero,0(r16)
    4dfc:	0006c800 	call	6c80 <sbrk>
    4e00:	00ffffc4 	movi	r3,-1
    4e04:	10c00526 	beq	r2,r3,4e1c <_sbrk_r+0x44>
    4e08:	dfc00217 	ldw	ra,8(sp)
    4e0c:	dc400117 	ldw	r17,4(sp)
    4e10:	dc000017 	ldw	r16,0(sp)
    4e14:	dec00304 	addi	sp,sp,12
    4e18:	f800283a 	ret
    4e1c:	80c00017 	ldw	r3,0(r16)
    4e20:	183ff926 	beq	r3,zero,4e08 <__alt_mem_onchip_memory2_0+0xf7c00e08>
    4e24:	88c00015 	stw	r3,0(r17)
    4e28:	003ff706 	br	4e08 <__alt_mem_onchip_memory2_0+0xf7c00e08>

00004e2c <strlen>:
    4e2c:	208000cc 	andi	r2,r4,3
    4e30:	10002026 	beq	r2,zero,4eb4 <strlen+0x88>
    4e34:	20800007 	ldb	r2,0(r4)
    4e38:	10002026 	beq	r2,zero,4ebc <strlen+0x90>
    4e3c:	2005883a 	mov	r2,r4
    4e40:	00000206 	br	4e4c <strlen+0x20>
    4e44:	10c00007 	ldb	r3,0(r2)
    4e48:	18001826 	beq	r3,zero,4eac <strlen+0x80>
    4e4c:	10800044 	addi	r2,r2,1
    4e50:	10c000cc 	andi	r3,r2,3
    4e54:	183ffb1e 	bne	r3,zero,4e44 <__alt_mem_onchip_memory2_0+0xf7c00e44>
    4e58:	10c00017 	ldw	r3,0(r2)
    4e5c:	01ffbff4 	movhi	r7,65279
    4e60:	39ffbfc4 	addi	r7,r7,-257
    4e64:	00ca303a 	nor	r5,zero,r3
    4e68:	01a02074 	movhi	r6,32897
    4e6c:	19c7883a 	add	r3,r3,r7
    4e70:	31a02004 	addi	r6,r6,-32640
    4e74:	1946703a 	and	r3,r3,r5
    4e78:	1986703a 	and	r3,r3,r6
    4e7c:	1800091e 	bne	r3,zero,4ea4 <strlen+0x78>
    4e80:	10800104 	addi	r2,r2,4
    4e84:	10c00017 	ldw	r3,0(r2)
    4e88:	19cb883a 	add	r5,r3,r7
    4e8c:	00c6303a 	nor	r3,zero,r3
    4e90:	28c6703a 	and	r3,r5,r3
    4e94:	1986703a 	and	r3,r3,r6
    4e98:	183ff926 	beq	r3,zero,4e80 <__alt_mem_onchip_memory2_0+0xf7c00e80>
    4e9c:	00000106 	br	4ea4 <strlen+0x78>
    4ea0:	10800044 	addi	r2,r2,1
    4ea4:	10c00007 	ldb	r3,0(r2)
    4ea8:	183ffd1e 	bne	r3,zero,4ea0 <__alt_mem_onchip_memory2_0+0xf7c00ea0>
    4eac:	1105c83a 	sub	r2,r2,r4
    4eb0:	f800283a 	ret
    4eb4:	2005883a 	mov	r2,r4
    4eb8:	003fe706 	br	4e58 <__alt_mem_onchip_memory2_0+0xf7c00e58>
    4ebc:	0005883a 	mov	r2,zero
    4ec0:	f800283a 	ret

00004ec4 <__swbuf_r>:
    4ec4:	defffb04 	addi	sp,sp,-20
    4ec8:	dcc00315 	stw	r19,12(sp)
    4ecc:	dc800215 	stw	r18,8(sp)
    4ed0:	dc000015 	stw	r16,0(sp)
    4ed4:	dfc00415 	stw	ra,16(sp)
    4ed8:	dc400115 	stw	r17,4(sp)
    4edc:	2025883a 	mov	r18,r4
    4ee0:	2827883a 	mov	r19,r5
    4ee4:	3021883a 	mov	r16,r6
    4ee8:	20000226 	beq	r4,zero,4ef4 <__swbuf_r+0x30>
    4eec:	20800e17 	ldw	r2,56(r4)
    4ef0:	10004226 	beq	r2,zero,4ffc <__swbuf_r+0x138>
    4ef4:	80800617 	ldw	r2,24(r16)
    4ef8:	8100030b 	ldhu	r4,12(r16)
    4efc:	80800215 	stw	r2,8(r16)
    4f00:	2080020c 	andi	r2,r4,8
    4f04:	10003626 	beq	r2,zero,4fe0 <__swbuf_r+0x11c>
    4f08:	80c00417 	ldw	r3,16(r16)
    4f0c:	18003426 	beq	r3,zero,4fe0 <__swbuf_r+0x11c>
    4f10:	2088000c 	andi	r2,r4,8192
    4f14:	9c403fcc 	andi	r17,r19,255
    4f18:	10001a26 	beq	r2,zero,4f84 <__swbuf_r+0xc0>
    4f1c:	80800017 	ldw	r2,0(r16)
    4f20:	81000517 	ldw	r4,20(r16)
    4f24:	10c7c83a 	sub	r3,r2,r3
    4f28:	1900200e 	bge	r3,r4,4fac <__swbuf_r+0xe8>
    4f2c:	18c00044 	addi	r3,r3,1
    4f30:	81000217 	ldw	r4,8(r16)
    4f34:	11400044 	addi	r5,r2,1
    4f38:	81400015 	stw	r5,0(r16)
    4f3c:	213fffc4 	addi	r4,r4,-1
    4f40:	81000215 	stw	r4,8(r16)
    4f44:	14c00005 	stb	r19,0(r2)
    4f48:	80800517 	ldw	r2,20(r16)
    4f4c:	10c01e26 	beq	r2,r3,4fc8 <__swbuf_r+0x104>
    4f50:	8080030b 	ldhu	r2,12(r16)
    4f54:	1080004c 	andi	r2,r2,1
    4f58:	10000226 	beq	r2,zero,4f64 <__swbuf_r+0xa0>
    4f5c:	00800284 	movi	r2,10
    4f60:	88801926 	beq	r17,r2,4fc8 <__swbuf_r+0x104>
    4f64:	8805883a 	mov	r2,r17
    4f68:	dfc00417 	ldw	ra,16(sp)
    4f6c:	dcc00317 	ldw	r19,12(sp)
    4f70:	dc800217 	ldw	r18,8(sp)
    4f74:	dc400117 	ldw	r17,4(sp)
    4f78:	dc000017 	ldw	r16,0(sp)
    4f7c:	dec00504 	addi	sp,sp,20
    4f80:	f800283a 	ret
    4f84:	81401917 	ldw	r5,100(r16)
    4f88:	00b7ffc4 	movi	r2,-8193
    4f8c:	21080014 	ori	r4,r4,8192
    4f90:	2884703a 	and	r2,r5,r2
    4f94:	80801915 	stw	r2,100(r16)
    4f98:	80800017 	ldw	r2,0(r16)
    4f9c:	8100030d 	sth	r4,12(r16)
    4fa0:	81000517 	ldw	r4,20(r16)
    4fa4:	10c7c83a 	sub	r3,r2,r3
    4fa8:	193fe016 	blt	r3,r4,4f2c <__alt_mem_onchip_memory2_0+0xf7c00f2c>
    4fac:	800b883a 	mov	r5,r16
    4fb0:	9009883a 	mov	r4,r18
    4fb4:	000550c0 	call	550c <_fflush_r>
    4fb8:	1000071e 	bne	r2,zero,4fd8 <__swbuf_r+0x114>
    4fbc:	80800017 	ldw	r2,0(r16)
    4fc0:	00c00044 	movi	r3,1
    4fc4:	003fda06 	br	4f30 <__alt_mem_onchip_memory2_0+0xf7c00f30>
    4fc8:	800b883a 	mov	r5,r16
    4fcc:	9009883a 	mov	r4,r18
    4fd0:	000550c0 	call	550c <_fflush_r>
    4fd4:	103fe326 	beq	r2,zero,4f64 <__alt_mem_onchip_memory2_0+0xf7c00f64>
    4fd8:	00bfffc4 	movi	r2,-1
    4fdc:	003fe206 	br	4f68 <__alt_mem_onchip_memory2_0+0xf7c00f68>
    4fe0:	800b883a 	mov	r5,r16
    4fe4:	9009883a 	mov	r4,r18
    4fe8:	000501c0 	call	501c <__swsetup_r>
    4fec:	103ffa1e 	bne	r2,zero,4fd8 <__alt_mem_onchip_memory2_0+0xf7c00fd8>
    4ff0:	8100030b 	ldhu	r4,12(r16)
    4ff4:	80c00417 	ldw	r3,16(r16)
    4ff8:	003fc506 	br	4f10 <__alt_mem_onchip_memory2_0+0xf7c00f10>
    4ffc:	00058e80 	call	58e8 <__sinit>
    5000:	003fbc06 	br	4ef4 <__alt_mem_onchip_memory2_0+0xf7c00ef4>

00005004 <__swbuf>:
    5004:	008000b4 	movhi	r2,2
    5008:	10806b04 	addi	r2,r2,428
    500c:	280d883a 	mov	r6,r5
    5010:	200b883a 	mov	r5,r4
    5014:	11000017 	ldw	r4,0(r2)
    5018:	0004ec41 	jmpi	4ec4 <__swbuf_r>

0000501c <__swsetup_r>:
    501c:	008000b4 	movhi	r2,2
    5020:	defffd04 	addi	sp,sp,-12
    5024:	10806b04 	addi	r2,r2,428
    5028:	dc400115 	stw	r17,4(sp)
    502c:	2023883a 	mov	r17,r4
    5030:	11000017 	ldw	r4,0(r2)
    5034:	dc000015 	stw	r16,0(sp)
    5038:	dfc00215 	stw	ra,8(sp)
    503c:	2821883a 	mov	r16,r5
    5040:	20000226 	beq	r4,zero,504c <__swsetup_r+0x30>
    5044:	20800e17 	ldw	r2,56(r4)
    5048:	10003126 	beq	r2,zero,5110 <__swsetup_r+0xf4>
    504c:	8080030b 	ldhu	r2,12(r16)
    5050:	10c0020c 	andi	r3,r2,8
    5054:	1009883a 	mov	r4,r2
    5058:	18000f26 	beq	r3,zero,5098 <__swsetup_r+0x7c>
    505c:	80c00417 	ldw	r3,16(r16)
    5060:	18001526 	beq	r3,zero,50b8 <__swsetup_r+0x9c>
    5064:	1100004c 	andi	r4,r2,1
    5068:	20001c1e 	bne	r4,zero,50dc <__swsetup_r+0xc0>
    506c:	1080008c 	andi	r2,r2,2
    5070:	1000291e 	bne	r2,zero,5118 <__swsetup_r+0xfc>
    5074:	80800517 	ldw	r2,20(r16)
    5078:	80800215 	stw	r2,8(r16)
    507c:	18001c26 	beq	r3,zero,50f0 <__swsetup_r+0xd4>
    5080:	0005883a 	mov	r2,zero
    5084:	dfc00217 	ldw	ra,8(sp)
    5088:	dc400117 	ldw	r17,4(sp)
    508c:	dc000017 	ldw	r16,0(sp)
    5090:	dec00304 	addi	sp,sp,12
    5094:	f800283a 	ret
    5098:	2080040c 	andi	r2,r4,16
    509c:	10002e26 	beq	r2,zero,5158 <__swsetup_r+0x13c>
    50a0:	2080010c 	andi	r2,r4,4
    50a4:	10001e1e 	bne	r2,zero,5120 <__swsetup_r+0x104>
    50a8:	80c00417 	ldw	r3,16(r16)
    50ac:	20800214 	ori	r2,r4,8
    50b0:	8080030d 	sth	r2,12(r16)
    50b4:	183feb1e 	bne	r3,zero,5064 <__alt_mem_onchip_memory2_0+0xf7c01064>
    50b8:	1100a00c 	andi	r4,r2,640
    50bc:	01408004 	movi	r5,512
    50c0:	217fe826 	beq	r4,r5,5064 <__alt_mem_onchip_memory2_0+0xf7c01064>
    50c4:	800b883a 	mov	r5,r16
    50c8:	8809883a 	mov	r4,r17
    50cc:	0005ef40 	call	5ef4 <__smakebuf_r>
    50d0:	8080030b 	ldhu	r2,12(r16)
    50d4:	80c00417 	ldw	r3,16(r16)
    50d8:	003fe206 	br	5064 <__alt_mem_onchip_memory2_0+0xf7c01064>
    50dc:	80800517 	ldw	r2,20(r16)
    50e0:	80000215 	stw	zero,8(r16)
    50e4:	0085c83a 	sub	r2,zero,r2
    50e8:	80800615 	stw	r2,24(r16)
    50ec:	183fe41e 	bne	r3,zero,5080 <__alt_mem_onchip_memory2_0+0xf7c01080>
    50f0:	80c0030b 	ldhu	r3,12(r16)
    50f4:	0005883a 	mov	r2,zero
    50f8:	1900200c 	andi	r4,r3,128
    50fc:	203fe126 	beq	r4,zero,5084 <__alt_mem_onchip_memory2_0+0xf7c01084>
    5100:	18c01014 	ori	r3,r3,64
    5104:	80c0030d 	sth	r3,12(r16)
    5108:	00bfffc4 	movi	r2,-1
    510c:	003fdd06 	br	5084 <__alt_mem_onchip_memory2_0+0xf7c01084>
    5110:	00058e80 	call	58e8 <__sinit>
    5114:	003fcd06 	br	504c <__alt_mem_onchip_memory2_0+0xf7c0104c>
    5118:	0005883a 	mov	r2,zero
    511c:	003fd606 	br	5078 <__alt_mem_onchip_memory2_0+0xf7c01078>
    5120:	81400c17 	ldw	r5,48(r16)
    5124:	28000626 	beq	r5,zero,5140 <__swsetup_r+0x124>
    5128:	80801004 	addi	r2,r16,64
    512c:	28800326 	beq	r5,r2,513c <__swsetup_r+0x120>
    5130:	8809883a 	mov	r4,r17
    5134:	0005a5c0 	call	5a5c <_free_r>
    5138:	8100030b 	ldhu	r4,12(r16)
    513c:	80000c15 	stw	zero,48(r16)
    5140:	80c00417 	ldw	r3,16(r16)
    5144:	00bff6c4 	movi	r2,-37
    5148:	1108703a 	and	r4,r2,r4
    514c:	80000115 	stw	zero,4(r16)
    5150:	80c00015 	stw	r3,0(r16)
    5154:	003fd506 	br	50ac <__alt_mem_onchip_memory2_0+0xf7c010ac>
    5158:	00800244 	movi	r2,9
    515c:	88800015 	stw	r2,0(r17)
    5160:	20801014 	ori	r2,r4,64
    5164:	8080030d 	sth	r2,12(r16)
    5168:	00bfffc4 	movi	r2,-1
    516c:	003fc506 	br	5084 <__alt_mem_onchip_memory2_0+0xf7c01084>

00005170 <__call_exitprocs>:
    5170:	defff504 	addi	sp,sp,-44
    5174:	df000915 	stw	fp,36(sp)
    5178:	dd400615 	stw	r21,24(sp)
    517c:	dc800315 	stw	r18,12(sp)
    5180:	dfc00a15 	stw	ra,40(sp)
    5184:	ddc00815 	stw	r23,32(sp)
    5188:	dd800715 	stw	r22,28(sp)
    518c:	dd000515 	stw	r20,20(sp)
    5190:	dcc00415 	stw	r19,16(sp)
    5194:	dc400215 	stw	r17,8(sp)
    5198:	dc000115 	stw	r16,4(sp)
    519c:	d9000015 	stw	r4,0(sp)
    51a0:	2839883a 	mov	fp,r5
    51a4:	04800044 	movi	r18,1
    51a8:	057fffc4 	movi	r21,-1
    51ac:	008000b4 	movhi	r2,2
    51b0:	10806a04 	addi	r2,r2,424
    51b4:	12000017 	ldw	r8,0(r2)
    51b8:	45005217 	ldw	r20,328(r8)
    51bc:	44c05204 	addi	r19,r8,328
    51c0:	a0001c26 	beq	r20,zero,5234 <__call_exitprocs+0xc4>
    51c4:	a0800117 	ldw	r2,4(r20)
    51c8:	15ffffc4 	addi	r23,r2,-1
    51cc:	b8000d16 	blt	r23,zero,5204 <__call_exitprocs+0x94>
    51d0:	14000044 	addi	r16,r2,1
    51d4:	8421883a 	add	r16,r16,r16
    51d8:	8421883a 	add	r16,r16,r16
    51dc:	84402004 	addi	r17,r16,128
    51e0:	a463883a 	add	r17,r20,r17
    51e4:	a421883a 	add	r16,r20,r16
    51e8:	e0001e26 	beq	fp,zero,5264 <__call_exitprocs+0xf4>
    51ec:	80804017 	ldw	r2,256(r16)
    51f0:	e0801c26 	beq	fp,r2,5264 <__call_exitprocs+0xf4>
    51f4:	bdffffc4 	addi	r23,r23,-1
    51f8:	843fff04 	addi	r16,r16,-4
    51fc:	8c7fff04 	addi	r17,r17,-4
    5200:	bd7ff91e 	bne	r23,r21,51e8 <__alt_mem_onchip_memory2_0+0xf7c011e8>
    5204:	00800034 	movhi	r2,0
    5208:	10800004 	addi	r2,r2,0
    520c:	10000926 	beq	r2,zero,5234 <__call_exitprocs+0xc4>
    5210:	a0800117 	ldw	r2,4(r20)
    5214:	1000301e 	bne	r2,zero,52d8 <__call_exitprocs+0x168>
    5218:	a0800017 	ldw	r2,0(r20)
    521c:	10003226 	beq	r2,zero,52e8 <__call_exitprocs+0x178>
    5220:	a009883a 	mov	r4,r20
    5224:	98800015 	stw	r2,0(r19)
    5228:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
    522c:	9d000017 	ldw	r20,0(r19)
    5230:	a03fe41e 	bne	r20,zero,51c4 <__alt_mem_onchip_memory2_0+0xf7c011c4>
    5234:	dfc00a17 	ldw	ra,40(sp)
    5238:	df000917 	ldw	fp,36(sp)
    523c:	ddc00817 	ldw	r23,32(sp)
    5240:	dd800717 	ldw	r22,28(sp)
    5244:	dd400617 	ldw	r21,24(sp)
    5248:	dd000517 	ldw	r20,20(sp)
    524c:	dcc00417 	ldw	r19,16(sp)
    5250:	dc800317 	ldw	r18,12(sp)
    5254:	dc400217 	ldw	r17,8(sp)
    5258:	dc000117 	ldw	r16,4(sp)
    525c:	dec00b04 	addi	sp,sp,44
    5260:	f800283a 	ret
    5264:	a0800117 	ldw	r2,4(r20)
    5268:	80c00017 	ldw	r3,0(r16)
    526c:	10bfffc4 	addi	r2,r2,-1
    5270:	15c01426 	beq	r2,r23,52c4 <__call_exitprocs+0x154>
    5274:	80000015 	stw	zero,0(r16)
    5278:	183fde26 	beq	r3,zero,51f4 <__alt_mem_onchip_memory2_0+0xf7c011f4>
    527c:	95c8983a 	sll	r4,r18,r23
    5280:	a0806217 	ldw	r2,392(r20)
    5284:	a5800117 	ldw	r22,4(r20)
    5288:	2084703a 	and	r2,r4,r2
    528c:	10000b26 	beq	r2,zero,52bc <__call_exitprocs+0x14c>
    5290:	a0806317 	ldw	r2,396(r20)
    5294:	2088703a 	and	r4,r4,r2
    5298:	20000c1e 	bne	r4,zero,52cc <__call_exitprocs+0x15c>
    529c:	89400017 	ldw	r5,0(r17)
    52a0:	d9000017 	ldw	r4,0(sp)
    52a4:	183ee83a 	callr	r3
    52a8:	a0800117 	ldw	r2,4(r20)
    52ac:	15bfbf1e 	bne	r2,r22,51ac <__alt_mem_onchip_memory2_0+0xf7c011ac>
    52b0:	98800017 	ldw	r2,0(r19)
    52b4:	153fcf26 	beq	r2,r20,51f4 <__alt_mem_onchip_memory2_0+0xf7c011f4>
    52b8:	003fbc06 	br	51ac <__alt_mem_onchip_memory2_0+0xf7c011ac>
    52bc:	183ee83a 	callr	r3
    52c0:	003ff906 	br	52a8 <__alt_mem_onchip_memory2_0+0xf7c012a8>
    52c4:	a5c00115 	stw	r23,4(r20)
    52c8:	003feb06 	br	5278 <__alt_mem_onchip_memory2_0+0xf7c01278>
    52cc:	89000017 	ldw	r4,0(r17)
    52d0:	183ee83a 	callr	r3
    52d4:	003ff406 	br	52a8 <__alt_mem_onchip_memory2_0+0xf7c012a8>
    52d8:	a0800017 	ldw	r2,0(r20)
    52dc:	a027883a 	mov	r19,r20
    52e0:	1029883a 	mov	r20,r2
    52e4:	003fb606 	br	51c0 <__alt_mem_onchip_memory2_0+0xf7c011c0>
    52e8:	0005883a 	mov	r2,zero
    52ec:	003ffb06 	br	52dc <__alt_mem_onchip_memory2_0+0xf7c012dc>

000052f0 <__sflush_r>:
    52f0:	2880030b 	ldhu	r2,12(r5)
    52f4:	defffb04 	addi	sp,sp,-20
    52f8:	dcc00315 	stw	r19,12(sp)
    52fc:	dc400115 	stw	r17,4(sp)
    5300:	dfc00415 	stw	ra,16(sp)
    5304:	dc800215 	stw	r18,8(sp)
    5308:	dc000015 	stw	r16,0(sp)
    530c:	10c0020c 	andi	r3,r2,8
    5310:	2823883a 	mov	r17,r5
    5314:	2027883a 	mov	r19,r4
    5318:	1800311e 	bne	r3,zero,53e0 <__sflush_r+0xf0>
    531c:	28c00117 	ldw	r3,4(r5)
    5320:	10820014 	ori	r2,r2,2048
    5324:	2880030d 	sth	r2,12(r5)
    5328:	00c04b0e 	bge	zero,r3,5458 <__sflush_r+0x168>
    532c:	8a000a17 	ldw	r8,40(r17)
    5330:	40002326 	beq	r8,zero,53c0 <__sflush_r+0xd0>
    5334:	9c000017 	ldw	r16,0(r19)
    5338:	10c4000c 	andi	r3,r2,4096
    533c:	98000015 	stw	zero,0(r19)
    5340:	18004826 	beq	r3,zero,5464 <__sflush_r+0x174>
    5344:	89801417 	ldw	r6,80(r17)
    5348:	10c0010c 	andi	r3,r2,4
    534c:	18000626 	beq	r3,zero,5368 <__sflush_r+0x78>
    5350:	88c00117 	ldw	r3,4(r17)
    5354:	88800c17 	ldw	r2,48(r17)
    5358:	30cdc83a 	sub	r6,r6,r3
    535c:	10000226 	beq	r2,zero,5368 <__sflush_r+0x78>
    5360:	88800f17 	ldw	r2,60(r17)
    5364:	308dc83a 	sub	r6,r6,r2
    5368:	89400717 	ldw	r5,28(r17)
    536c:	000f883a 	mov	r7,zero
    5370:	9809883a 	mov	r4,r19
    5374:	403ee83a 	callr	r8
    5378:	00ffffc4 	movi	r3,-1
    537c:	10c04426 	beq	r2,r3,5490 <__sflush_r+0x1a0>
    5380:	88c0030b 	ldhu	r3,12(r17)
    5384:	89000417 	ldw	r4,16(r17)
    5388:	88000115 	stw	zero,4(r17)
    538c:	197dffcc 	andi	r5,r3,63487
    5390:	8940030d 	sth	r5,12(r17)
    5394:	89000015 	stw	r4,0(r17)
    5398:	18c4000c 	andi	r3,r3,4096
    539c:	18002c1e 	bne	r3,zero,5450 <__sflush_r+0x160>
    53a0:	89400c17 	ldw	r5,48(r17)
    53a4:	9c000015 	stw	r16,0(r19)
    53a8:	28000526 	beq	r5,zero,53c0 <__sflush_r+0xd0>
    53ac:	88801004 	addi	r2,r17,64
    53b0:	28800226 	beq	r5,r2,53bc <__sflush_r+0xcc>
    53b4:	9809883a 	mov	r4,r19
    53b8:	0005a5c0 	call	5a5c <_free_r>
    53bc:	88000c15 	stw	zero,48(r17)
    53c0:	0005883a 	mov	r2,zero
    53c4:	dfc00417 	ldw	ra,16(sp)
    53c8:	dcc00317 	ldw	r19,12(sp)
    53cc:	dc800217 	ldw	r18,8(sp)
    53d0:	dc400117 	ldw	r17,4(sp)
    53d4:	dc000017 	ldw	r16,0(sp)
    53d8:	dec00504 	addi	sp,sp,20
    53dc:	f800283a 	ret
    53e0:	2c800417 	ldw	r18,16(r5)
    53e4:	903ff626 	beq	r18,zero,53c0 <__alt_mem_onchip_memory2_0+0xf7c013c0>
    53e8:	2c000017 	ldw	r16,0(r5)
    53ec:	108000cc 	andi	r2,r2,3
    53f0:	2c800015 	stw	r18,0(r5)
    53f4:	84a1c83a 	sub	r16,r16,r18
    53f8:	1000131e 	bne	r2,zero,5448 <__sflush_r+0x158>
    53fc:	28800517 	ldw	r2,20(r5)
    5400:	88800215 	stw	r2,8(r17)
    5404:	04000316 	blt	zero,r16,5414 <__sflush_r+0x124>
    5408:	003fed06 	br	53c0 <__alt_mem_onchip_memory2_0+0xf7c013c0>
    540c:	90a5883a 	add	r18,r18,r2
    5410:	043feb0e 	bge	zero,r16,53c0 <__alt_mem_onchip_memory2_0+0xf7c013c0>
    5414:	88800917 	ldw	r2,36(r17)
    5418:	89400717 	ldw	r5,28(r17)
    541c:	800f883a 	mov	r7,r16
    5420:	900d883a 	mov	r6,r18
    5424:	9809883a 	mov	r4,r19
    5428:	103ee83a 	callr	r2
    542c:	80a1c83a 	sub	r16,r16,r2
    5430:	00bff616 	blt	zero,r2,540c <__alt_mem_onchip_memory2_0+0xf7c0140c>
    5434:	88c0030b 	ldhu	r3,12(r17)
    5438:	00bfffc4 	movi	r2,-1
    543c:	18c01014 	ori	r3,r3,64
    5440:	88c0030d 	sth	r3,12(r17)
    5444:	003fdf06 	br	53c4 <__alt_mem_onchip_memory2_0+0xf7c013c4>
    5448:	0005883a 	mov	r2,zero
    544c:	003fec06 	br	5400 <__alt_mem_onchip_memory2_0+0xf7c01400>
    5450:	88801415 	stw	r2,80(r17)
    5454:	003fd206 	br	53a0 <__alt_mem_onchip_memory2_0+0xf7c013a0>
    5458:	28c00f17 	ldw	r3,60(r5)
    545c:	00ffb316 	blt	zero,r3,532c <__alt_mem_onchip_memory2_0+0xf7c0132c>
    5460:	003fd706 	br	53c0 <__alt_mem_onchip_memory2_0+0xf7c013c0>
    5464:	89400717 	ldw	r5,28(r17)
    5468:	000d883a 	mov	r6,zero
    546c:	01c00044 	movi	r7,1
    5470:	9809883a 	mov	r4,r19
    5474:	403ee83a 	callr	r8
    5478:	100d883a 	mov	r6,r2
    547c:	00bfffc4 	movi	r2,-1
    5480:	30801426 	beq	r6,r2,54d4 <__sflush_r+0x1e4>
    5484:	8880030b 	ldhu	r2,12(r17)
    5488:	8a000a17 	ldw	r8,40(r17)
    548c:	003fae06 	br	5348 <__alt_mem_onchip_memory2_0+0xf7c01348>
    5490:	98c00017 	ldw	r3,0(r19)
    5494:	183fba26 	beq	r3,zero,5380 <__alt_mem_onchip_memory2_0+0xf7c01380>
    5498:	01000744 	movi	r4,29
    549c:	19000626 	beq	r3,r4,54b8 <__sflush_r+0x1c8>
    54a0:	01000584 	movi	r4,22
    54a4:	19000426 	beq	r3,r4,54b8 <__sflush_r+0x1c8>
    54a8:	88c0030b 	ldhu	r3,12(r17)
    54ac:	18c01014 	ori	r3,r3,64
    54b0:	88c0030d 	sth	r3,12(r17)
    54b4:	003fc306 	br	53c4 <__alt_mem_onchip_memory2_0+0xf7c013c4>
    54b8:	8880030b 	ldhu	r2,12(r17)
    54bc:	88c00417 	ldw	r3,16(r17)
    54c0:	88000115 	stw	zero,4(r17)
    54c4:	10bdffcc 	andi	r2,r2,63487
    54c8:	8880030d 	sth	r2,12(r17)
    54cc:	88c00015 	stw	r3,0(r17)
    54d0:	003fb306 	br	53a0 <__alt_mem_onchip_memory2_0+0xf7c013a0>
    54d4:	98800017 	ldw	r2,0(r19)
    54d8:	103fea26 	beq	r2,zero,5484 <__alt_mem_onchip_memory2_0+0xf7c01484>
    54dc:	00c00744 	movi	r3,29
    54e0:	10c00226 	beq	r2,r3,54ec <__sflush_r+0x1fc>
    54e4:	00c00584 	movi	r3,22
    54e8:	10c0031e 	bne	r2,r3,54f8 <__sflush_r+0x208>
    54ec:	9c000015 	stw	r16,0(r19)
    54f0:	0005883a 	mov	r2,zero
    54f4:	003fb306 	br	53c4 <__alt_mem_onchip_memory2_0+0xf7c013c4>
    54f8:	88c0030b 	ldhu	r3,12(r17)
    54fc:	3005883a 	mov	r2,r6
    5500:	18c01014 	ori	r3,r3,64
    5504:	88c0030d 	sth	r3,12(r17)
    5508:	003fae06 	br	53c4 <__alt_mem_onchip_memory2_0+0xf7c013c4>

0000550c <_fflush_r>:
    550c:	defffd04 	addi	sp,sp,-12
    5510:	dc000115 	stw	r16,4(sp)
    5514:	dfc00215 	stw	ra,8(sp)
    5518:	2021883a 	mov	r16,r4
    551c:	20000226 	beq	r4,zero,5528 <_fflush_r+0x1c>
    5520:	20800e17 	ldw	r2,56(r4)
    5524:	10000c26 	beq	r2,zero,5558 <_fflush_r+0x4c>
    5528:	2880030f 	ldh	r2,12(r5)
    552c:	1000051e 	bne	r2,zero,5544 <_fflush_r+0x38>
    5530:	0005883a 	mov	r2,zero
    5534:	dfc00217 	ldw	ra,8(sp)
    5538:	dc000117 	ldw	r16,4(sp)
    553c:	dec00304 	addi	sp,sp,12
    5540:	f800283a 	ret
    5544:	8009883a 	mov	r4,r16
    5548:	dfc00217 	ldw	ra,8(sp)
    554c:	dc000117 	ldw	r16,4(sp)
    5550:	dec00304 	addi	sp,sp,12
    5554:	00052f01 	jmpi	52f0 <__sflush_r>
    5558:	d9400015 	stw	r5,0(sp)
    555c:	00058e80 	call	58e8 <__sinit>
    5560:	d9400017 	ldw	r5,0(sp)
    5564:	003ff006 	br	5528 <__alt_mem_onchip_memory2_0+0xf7c01528>

00005568 <fflush>:
    5568:	20000526 	beq	r4,zero,5580 <fflush+0x18>
    556c:	008000b4 	movhi	r2,2
    5570:	10806b04 	addi	r2,r2,428
    5574:	200b883a 	mov	r5,r4
    5578:	11000017 	ldw	r4,0(r2)
    557c:	000550c1 	jmpi	550c <_fflush_r>
    5580:	008000b4 	movhi	r2,2
    5584:	10806a04 	addi	r2,r2,424
    5588:	11000017 	ldw	r4,0(r2)
    558c:	01400034 	movhi	r5,0
    5590:	29554304 	addi	r5,r5,21772
    5594:	0005e301 	jmpi	5e30 <_fwalk_reent>

00005598 <__fp_unlock>:
    5598:	0005883a 	mov	r2,zero
    559c:	f800283a 	ret

000055a0 <_cleanup_r>:
    55a0:	01400034 	movhi	r5,0
    55a4:	2958f204 	addi	r5,r5,25544
    55a8:	0005e301 	jmpi	5e30 <_fwalk_reent>

000055ac <__sinit.part.1>:
    55ac:	defff704 	addi	sp,sp,-36
    55b0:	00c00034 	movhi	r3,0
    55b4:	dfc00815 	stw	ra,32(sp)
    55b8:	ddc00715 	stw	r23,28(sp)
    55bc:	dd800615 	stw	r22,24(sp)
    55c0:	dd400515 	stw	r21,20(sp)
    55c4:	dd000415 	stw	r20,16(sp)
    55c8:	dcc00315 	stw	r19,12(sp)
    55cc:	dc800215 	stw	r18,8(sp)
    55d0:	dc400115 	stw	r17,4(sp)
    55d4:	dc000015 	stw	r16,0(sp)
    55d8:	18d56804 	addi	r3,r3,21920
    55dc:	24000117 	ldw	r16,4(r4)
    55e0:	20c00f15 	stw	r3,60(r4)
    55e4:	2080bb04 	addi	r2,r4,748
    55e8:	00c000c4 	movi	r3,3
    55ec:	20c0b915 	stw	r3,740(r4)
    55f0:	2080ba15 	stw	r2,744(r4)
    55f4:	2000b815 	stw	zero,736(r4)
    55f8:	05c00204 	movi	r23,8
    55fc:	00800104 	movi	r2,4
    5600:	2025883a 	mov	r18,r4
    5604:	b80d883a 	mov	r6,r23
    5608:	81001704 	addi	r4,r16,92
    560c:	000b883a 	mov	r5,zero
    5610:	80000015 	stw	zero,0(r16)
    5614:	80000115 	stw	zero,4(r16)
    5618:	80000215 	stw	zero,8(r16)
    561c:	8080030d 	sth	r2,12(r16)
    5620:	80001915 	stw	zero,100(r16)
    5624:	8000038d 	sth	zero,14(r16)
    5628:	80000415 	stw	zero,16(r16)
    562c:	80000515 	stw	zero,20(r16)
    5630:	80000615 	stw	zero,24(r16)
    5634:	00060b00 	call	60b0 <memset>
    5638:	05800034 	movhi	r22,0
    563c:	94400217 	ldw	r17,8(r18)
    5640:	05400034 	movhi	r21,0
    5644:	05000034 	movhi	r20,0
    5648:	04c00034 	movhi	r19,0
    564c:	b5987604 	addi	r22,r22,25048
    5650:	ad588d04 	addi	r21,r21,25140
    5654:	a518ac04 	addi	r20,r20,25264
    5658:	9cd8c304 	addi	r19,r19,25356
    565c:	85800815 	stw	r22,32(r16)
    5660:	85400915 	stw	r21,36(r16)
    5664:	85000a15 	stw	r20,40(r16)
    5668:	84c00b15 	stw	r19,44(r16)
    566c:	84000715 	stw	r16,28(r16)
    5670:	00800284 	movi	r2,10
    5674:	8880030d 	sth	r2,12(r17)
    5678:	00800044 	movi	r2,1
    567c:	b80d883a 	mov	r6,r23
    5680:	89001704 	addi	r4,r17,92
    5684:	000b883a 	mov	r5,zero
    5688:	88000015 	stw	zero,0(r17)
    568c:	88000115 	stw	zero,4(r17)
    5690:	88000215 	stw	zero,8(r17)
    5694:	88001915 	stw	zero,100(r17)
    5698:	8880038d 	sth	r2,14(r17)
    569c:	88000415 	stw	zero,16(r17)
    56a0:	88000515 	stw	zero,20(r17)
    56a4:	88000615 	stw	zero,24(r17)
    56a8:	00060b00 	call	60b0 <memset>
    56ac:	94000317 	ldw	r16,12(r18)
    56b0:	00800484 	movi	r2,18
    56b4:	8c400715 	stw	r17,28(r17)
    56b8:	8d800815 	stw	r22,32(r17)
    56bc:	8d400915 	stw	r21,36(r17)
    56c0:	8d000a15 	stw	r20,40(r17)
    56c4:	8cc00b15 	stw	r19,44(r17)
    56c8:	8080030d 	sth	r2,12(r16)
    56cc:	00800084 	movi	r2,2
    56d0:	80000015 	stw	zero,0(r16)
    56d4:	80000115 	stw	zero,4(r16)
    56d8:	80000215 	stw	zero,8(r16)
    56dc:	80001915 	stw	zero,100(r16)
    56e0:	8080038d 	sth	r2,14(r16)
    56e4:	80000415 	stw	zero,16(r16)
    56e8:	80000515 	stw	zero,20(r16)
    56ec:	80000615 	stw	zero,24(r16)
    56f0:	b80d883a 	mov	r6,r23
    56f4:	000b883a 	mov	r5,zero
    56f8:	81001704 	addi	r4,r16,92
    56fc:	00060b00 	call	60b0 <memset>
    5700:	00800044 	movi	r2,1
    5704:	84000715 	stw	r16,28(r16)
    5708:	85800815 	stw	r22,32(r16)
    570c:	85400915 	stw	r21,36(r16)
    5710:	85000a15 	stw	r20,40(r16)
    5714:	84c00b15 	stw	r19,44(r16)
    5718:	90800e15 	stw	r2,56(r18)
    571c:	dfc00817 	ldw	ra,32(sp)
    5720:	ddc00717 	ldw	r23,28(sp)
    5724:	dd800617 	ldw	r22,24(sp)
    5728:	dd400517 	ldw	r21,20(sp)
    572c:	dd000417 	ldw	r20,16(sp)
    5730:	dcc00317 	ldw	r19,12(sp)
    5734:	dc800217 	ldw	r18,8(sp)
    5738:	dc400117 	ldw	r17,4(sp)
    573c:	dc000017 	ldw	r16,0(sp)
    5740:	dec00904 	addi	sp,sp,36
    5744:	f800283a 	ret

00005748 <__fp_lock>:
    5748:	0005883a 	mov	r2,zero
    574c:	f800283a 	ret

00005750 <__sfmoreglue>:
    5750:	defffc04 	addi	sp,sp,-16
    5754:	dc400115 	stw	r17,4(sp)
    5758:	2c7fffc4 	addi	r17,r5,-1
    575c:	8c401a24 	muli	r17,r17,104
    5760:	dc800215 	stw	r18,8(sp)
    5764:	2825883a 	mov	r18,r5
    5768:	89401d04 	addi	r5,r17,116
    576c:	dc000015 	stw	r16,0(sp)
    5770:	dfc00315 	stw	ra,12(sp)
    5774:	0003afc0 	call	3afc <_malloc_r>
    5778:	1021883a 	mov	r16,r2
    577c:	10000726 	beq	r2,zero,579c <__sfmoreglue+0x4c>
    5780:	11000304 	addi	r4,r2,12
    5784:	10000015 	stw	zero,0(r2)
    5788:	14800115 	stw	r18,4(r2)
    578c:	11000215 	stw	r4,8(r2)
    5790:	89801a04 	addi	r6,r17,104
    5794:	000b883a 	mov	r5,zero
    5798:	00060b00 	call	60b0 <memset>
    579c:	8005883a 	mov	r2,r16
    57a0:	dfc00317 	ldw	ra,12(sp)
    57a4:	dc800217 	ldw	r18,8(sp)
    57a8:	dc400117 	ldw	r17,4(sp)
    57ac:	dc000017 	ldw	r16,0(sp)
    57b0:	dec00404 	addi	sp,sp,16
    57b4:	f800283a 	ret

000057b8 <__sfp>:
    57b8:	defffb04 	addi	sp,sp,-20
    57bc:	dc000015 	stw	r16,0(sp)
    57c0:	040000b4 	movhi	r16,2
    57c4:	84006a04 	addi	r16,r16,424
    57c8:	dcc00315 	stw	r19,12(sp)
    57cc:	2027883a 	mov	r19,r4
    57d0:	81000017 	ldw	r4,0(r16)
    57d4:	dfc00415 	stw	ra,16(sp)
    57d8:	dc800215 	stw	r18,8(sp)
    57dc:	20800e17 	ldw	r2,56(r4)
    57e0:	dc400115 	stw	r17,4(sp)
    57e4:	1000021e 	bne	r2,zero,57f0 <__sfp+0x38>
    57e8:	00055ac0 	call	55ac <__sinit.part.1>
    57ec:	81000017 	ldw	r4,0(r16)
    57f0:	2480b804 	addi	r18,r4,736
    57f4:	047fffc4 	movi	r17,-1
    57f8:	91000117 	ldw	r4,4(r18)
    57fc:	94000217 	ldw	r16,8(r18)
    5800:	213fffc4 	addi	r4,r4,-1
    5804:	20000a16 	blt	r4,zero,5830 <__sfp+0x78>
    5808:	8080030f 	ldh	r2,12(r16)
    580c:	10000c26 	beq	r2,zero,5840 <__sfp+0x88>
    5810:	80c01d04 	addi	r3,r16,116
    5814:	00000206 	br	5820 <__sfp+0x68>
    5818:	18bfe60f 	ldh	r2,-104(r3)
    581c:	10000826 	beq	r2,zero,5840 <__sfp+0x88>
    5820:	213fffc4 	addi	r4,r4,-1
    5824:	1c3ffd04 	addi	r16,r3,-12
    5828:	18c01a04 	addi	r3,r3,104
    582c:	247ffa1e 	bne	r4,r17,5818 <__alt_mem_onchip_memory2_0+0xf7c01818>
    5830:	90800017 	ldw	r2,0(r18)
    5834:	10001d26 	beq	r2,zero,58ac <__sfp+0xf4>
    5838:	1025883a 	mov	r18,r2
    583c:	003fee06 	br	57f8 <__alt_mem_onchip_memory2_0+0xf7c017f8>
    5840:	00bfffc4 	movi	r2,-1
    5844:	8080038d 	sth	r2,14(r16)
    5848:	00800044 	movi	r2,1
    584c:	8080030d 	sth	r2,12(r16)
    5850:	80001915 	stw	zero,100(r16)
    5854:	80000015 	stw	zero,0(r16)
    5858:	80000215 	stw	zero,8(r16)
    585c:	80000115 	stw	zero,4(r16)
    5860:	80000415 	stw	zero,16(r16)
    5864:	80000515 	stw	zero,20(r16)
    5868:	80000615 	stw	zero,24(r16)
    586c:	01800204 	movi	r6,8
    5870:	000b883a 	mov	r5,zero
    5874:	81001704 	addi	r4,r16,92
    5878:	00060b00 	call	60b0 <memset>
    587c:	8005883a 	mov	r2,r16
    5880:	80000c15 	stw	zero,48(r16)
    5884:	80000d15 	stw	zero,52(r16)
    5888:	80001115 	stw	zero,68(r16)
    588c:	80001215 	stw	zero,72(r16)
    5890:	dfc00417 	ldw	ra,16(sp)
    5894:	dcc00317 	ldw	r19,12(sp)
    5898:	dc800217 	ldw	r18,8(sp)
    589c:	dc400117 	ldw	r17,4(sp)
    58a0:	dc000017 	ldw	r16,0(sp)
    58a4:	dec00504 	addi	sp,sp,20
    58a8:	f800283a 	ret
    58ac:	01400104 	movi	r5,4
    58b0:	9809883a 	mov	r4,r19
    58b4:	00057500 	call	5750 <__sfmoreglue>
    58b8:	90800015 	stw	r2,0(r18)
    58bc:	103fde1e 	bne	r2,zero,5838 <__alt_mem_onchip_memory2_0+0xf7c01838>
    58c0:	00800304 	movi	r2,12
    58c4:	98800015 	stw	r2,0(r19)
    58c8:	0005883a 	mov	r2,zero
    58cc:	003ff006 	br	5890 <__alt_mem_onchip_memory2_0+0xf7c01890>

000058d0 <_cleanup>:
    58d0:	008000b4 	movhi	r2,2
    58d4:	10806a04 	addi	r2,r2,424
    58d8:	11000017 	ldw	r4,0(r2)
    58dc:	01400034 	movhi	r5,0
    58e0:	2958f204 	addi	r5,r5,25544
    58e4:	0005e301 	jmpi	5e30 <_fwalk_reent>

000058e8 <__sinit>:
    58e8:	20800e17 	ldw	r2,56(r4)
    58ec:	10000126 	beq	r2,zero,58f4 <__sinit+0xc>
    58f0:	f800283a 	ret
    58f4:	00055ac1 	jmpi	55ac <__sinit.part.1>

000058f8 <__sfp_lock_acquire>:
    58f8:	f800283a 	ret

000058fc <__sfp_lock_release>:
    58fc:	f800283a 	ret

00005900 <__sinit_lock_acquire>:
    5900:	f800283a 	ret

00005904 <__sinit_lock_release>:
    5904:	f800283a 	ret

00005908 <__fp_lock_all>:
    5908:	008000b4 	movhi	r2,2
    590c:	10806b04 	addi	r2,r2,428
    5910:	11000017 	ldw	r4,0(r2)
    5914:	01400034 	movhi	r5,0
    5918:	2955d204 	addi	r5,r5,22344
    591c:	0005d6c1 	jmpi	5d6c <_fwalk>

00005920 <__fp_unlock_all>:
    5920:	008000b4 	movhi	r2,2
    5924:	10806b04 	addi	r2,r2,428
    5928:	11000017 	ldw	r4,0(r2)
    592c:	01400034 	movhi	r5,0
    5930:	29556604 	addi	r5,r5,21912
    5934:	0005d6c1 	jmpi	5d6c <_fwalk>

00005938 <_malloc_trim_r>:
    5938:	defffb04 	addi	sp,sp,-20
    593c:	dcc00315 	stw	r19,12(sp)
    5940:	04c000b4 	movhi	r19,2
    5944:	dc800215 	stw	r18,8(sp)
    5948:	dc400115 	stw	r17,4(sp)
    594c:	dc000015 	stw	r16,0(sp)
    5950:	dfc00415 	stw	ra,16(sp)
    5954:	2821883a 	mov	r16,r5
    5958:	9cff5f04 	addi	r19,r19,-644
    595c:	2025883a 	mov	r18,r4
    5960:	0006b000 	call	6b00 <__malloc_lock>
    5964:	98800217 	ldw	r2,8(r19)
    5968:	14400117 	ldw	r17,4(r2)
    596c:	00bfff04 	movi	r2,-4
    5970:	88a2703a 	and	r17,r17,r2
    5974:	8c21c83a 	sub	r16,r17,r16
    5978:	8403fbc4 	addi	r16,r16,4079
    597c:	8020d33a 	srli	r16,r16,12
    5980:	0083ffc4 	movi	r2,4095
    5984:	843fffc4 	addi	r16,r16,-1
    5988:	8020933a 	slli	r16,r16,12
    598c:	1400060e 	bge	r2,r16,59a8 <_malloc_trim_r+0x70>
    5990:	000b883a 	mov	r5,zero
    5994:	9009883a 	mov	r4,r18
    5998:	0004dd80 	call	4dd8 <_sbrk_r>
    599c:	98c00217 	ldw	r3,8(r19)
    59a0:	1c47883a 	add	r3,r3,r17
    59a4:	10c00a26 	beq	r2,r3,59d0 <_malloc_trim_r+0x98>
    59a8:	9009883a 	mov	r4,r18
    59ac:	0006b240 	call	6b24 <__malloc_unlock>
    59b0:	0005883a 	mov	r2,zero
    59b4:	dfc00417 	ldw	ra,16(sp)
    59b8:	dcc00317 	ldw	r19,12(sp)
    59bc:	dc800217 	ldw	r18,8(sp)
    59c0:	dc400117 	ldw	r17,4(sp)
    59c4:	dc000017 	ldw	r16,0(sp)
    59c8:	dec00504 	addi	sp,sp,20
    59cc:	f800283a 	ret
    59d0:	040bc83a 	sub	r5,zero,r16
    59d4:	9009883a 	mov	r4,r18
    59d8:	0004dd80 	call	4dd8 <_sbrk_r>
    59dc:	00ffffc4 	movi	r3,-1
    59e0:	10c00d26 	beq	r2,r3,5a18 <_malloc_trim_r+0xe0>
    59e4:	00c000b4 	movhi	r3,2
    59e8:	18c74904 	addi	r3,r3,7460
    59ec:	18800017 	ldw	r2,0(r3)
    59f0:	99000217 	ldw	r4,8(r19)
    59f4:	8c23c83a 	sub	r17,r17,r16
    59f8:	8c400054 	ori	r17,r17,1
    59fc:	1421c83a 	sub	r16,r2,r16
    5a00:	24400115 	stw	r17,4(r4)
    5a04:	9009883a 	mov	r4,r18
    5a08:	1c000015 	stw	r16,0(r3)
    5a0c:	0006b240 	call	6b24 <__malloc_unlock>
    5a10:	00800044 	movi	r2,1
    5a14:	003fe706 	br	59b4 <__alt_mem_onchip_memory2_0+0xf7c019b4>
    5a18:	000b883a 	mov	r5,zero
    5a1c:	9009883a 	mov	r4,r18
    5a20:	0004dd80 	call	4dd8 <_sbrk_r>
    5a24:	99000217 	ldw	r4,8(r19)
    5a28:	014003c4 	movi	r5,15
    5a2c:	1107c83a 	sub	r3,r2,r4
    5a30:	28ffdd0e 	bge	r5,r3,59a8 <__alt_mem_onchip_memory2_0+0xf7c019a8>
    5a34:	014000b4 	movhi	r5,2
    5a38:	29406c04 	addi	r5,r5,432
    5a3c:	29400017 	ldw	r5,0(r5)
    5a40:	18c00054 	ori	r3,r3,1
    5a44:	20c00115 	stw	r3,4(r4)
    5a48:	00c000b4 	movhi	r3,2
    5a4c:	1145c83a 	sub	r2,r2,r5
    5a50:	18c74904 	addi	r3,r3,7460
    5a54:	18800015 	stw	r2,0(r3)
    5a58:	003fd306 	br	59a8 <__alt_mem_onchip_memory2_0+0xf7c019a8>

00005a5c <_free_r>:
    5a5c:	28004126 	beq	r5,zero,5b64 <_free_r+0x108>
    5a60:	defffd04 	addi	sp,sp,-12
    5a64:	dc400115 	stw	r17,4(sp)
    5a68:	dc000015 	stw	r16,0(sp)
    5a6c:	2023883a 	mov	r17,r4
    5a70:	2821883a 	mov	r16,r5
    5a74:	dfc00215 	stw	ra,8(sp)
    5a78:	0006b000 	call	6b00 <__malloc_lock>
    5a7c:	81ffff17 	ldw	r7,-4(r16)
    5a80:	00bfff84 	movi	r2,-2
    5a84:	010000b4 	movhi	r4,2
    5a88:	81bffe04 	addi	r6,r16,-8
    5a8c:	3884703a 	and	r2,r7,r2
    5a90:	213f5f04 	addi	r4,r4,-644
    5a94:	308b883a 	add	r5,r6,r2
    5a98:	2a400117 	ldw	r9,4(r5)
    5a9c:	22000217 	ldw	r8,8(r4)
    5aa0:	00ffff04 	movi	r3,-4
    5aa4:	48c6703a 	and	r3,r9,r3
    5aa8:	2a005726 	beq	r5,r8,5c08 <_free_r+0x1ac>
    5aac:	28c00115 	stw	r3,4(r5)
    5ab0:	39c0004c 	andi	r7,r7,1
    5ab4:	3800091e 	bne	r7,zero,5adc <_free_r+0x80>
    5ab8:	823ffe17 	ldw	r8,-8(r16)
    5abc:	22400204 	addi	r9,r4,8
    5ac0:	320dc83a 	sub	r6,r6,r8
    5ac4:	31c00217 	ldw	r7,8(r6)
    5ac8:	1205883a 	add	r2,r2,r8
    5acc:	3a406526 	beq	r7,r9,5c64 <_free_r+0x208>
    5ad0:	32000317 	ldw	r8,12(r6)
    5ad4:	3a000315 	stw	r8,12(r7)
    5ad8:	41c00215 	stw	r7,8(r8)
    5adc:	28cf883a 	add	r7,r5,r3
    5ae0:	39c00117 	ldw	r7,4(r7)
    5ae4:	39c0004c 	andi	r7,r7,1
    5ae8:	38003a26 	beq	r7,zero,5bd4 <_free_r+0x178>
    5aec:	10c00054 	ori	r3,r2,1
    5af0:	30c00115 	stw	r3,4(r6)
    5af4:	3087883a 	add	r3,r6,r2
    5af8:	18800015 	stw	r2,0(r3)
    5afc:	00c07fc4 	movi	r3,511
    5b00:	18801936 	bltu	r3,r2,5b68 <_free_r+0x10c>
    5b04:	1004d0fa 	srli	r2,r2,3
    5b08:	01c00044 	movi	r7,1
    5b0c:	21400117 	ldw	r5,4(r4)
    5b10:	10c00044 	addi	r3,r2,1
    5b14:	18c7883a 	add	r3,r3,r3
    5b18:	1005d0ba 	srai	r2,r2,2
    5b1c:	18c7883a 	add	r3,r3,r3
    5b20:	18c7883a 	add	r3,r3,r3
    5b24:	1907883a 	add	r3,r3,r4
    5b28:	3884983a 	sll	r2,r7,r2
    5b2c:	19c00017 	ldw	r7,0(r3)
    5b30:	1a3ffe04 	addi	r8,r3,-8
    5b34:	1144b03a 	or	r2,r2,r5
    5b38:	32000315 	stw	r8,12(r6)
    5b3c:	31c00215 	stw	r7,8(r6)
    5b40:	20800115 	stw	r2,4(r4)
    5b44:	19800015 	stw	r6,0(r3)
    5b48:	39800315 	stw	r6,12(r7)
    5b4c:	8809883a 	mov	r4,r17
    5b50:	dfc00217 	ldw	ra,8(sp)
    5b54:	dc400117 	ldw	r17,4(sp)
    5b58:	dc000017 	ldw	r16,0(sp)
    5b5c:	dec00304 	addi	sp,sp,12
    5b60:	0006b241 	jmpi	6b24 <__malloc_unlock>
    5b64:	f800283a 	ret
    5b68:	100ad27a 	srli	r5,r2,9
    5b6c:	00c00104 	movi	r3,4
    5b70:	19404a36 	bltu	r3,r5,5c9c <_free_r+0x240>
    5b74:	100ad1ba 	srli	r5,r2,6
    5b78:	28c00e44 	addi	r3,r5,57
    5b7c:	18c7883a 	add	r3,r3,r3
    5b80:	29400e04 	addi	r5,r5,56
    5b84:	18c7883a 	add	r3,r3,r3
    5b88:	18c7883a 	add	r3,r3,r3
    5b8c:	1909883a 	add	r4,r3,r4
    5b90:	20c00017 	ldw	r3,0(r4)
    5b94:	01c000b4 	movhi	r7,2
    5b98:	213ffe04 	addi	r4,r4,-8
    5b9c:	39ff5f04 	addi	r7,r7,-644
    5ba0:	20c04426 	beq	r4,r3,5cb4 <_free_r+0x258>
    5ba4:	01ffff04 	movi	r7,-4
    5ba8:	19400117 	ldw	r5,4(r3)
    5bac:	29ca703a 	and	r5,r5,r7
    5bb0:	1140022e 	bgeu	r2,r5,5bbc <_free_r+0x160>
    5bb4:	18c00217 	ldw	r3,8(r3)
    5bb8:	20fffb1e 	bne	r4,r3,5ba8 <__alt_mem_onchip_memory2_0+0xf7c01ba8>
    5bbc:	19000317 	ldw	r4,12(r3)
    5bc0:	31000315 	stw	r4,12(r6)
    5bc4:	30c00215 	stw	r3,8(r6)
    5bc8:	21800215 	stw	r6,8(r4)
    5bcc:	19800315 	stw	r6,12(r3)
    5bd0:	003fde06 	br	5b4c <__alt_mem_onchip_memory2_0+0xf7c01b4c>
    5bd4:	29c00217 	ldw	r7,8(r5)
    5bd8:	10c5883a 	add	r2,r2,r3
    5bdc:	00c000b4 	movhi	r3,2
    5be0:	18ff6104 	addi	r3,r3,-636
    5be4:	38c03b26 	beq	r7,r3,5cd4 <_free_r+0x278>
    5be8:	2a000317 	ldw	r8,12(r5)
    5bec:	11400054 	ori	r5,r2,1
    5bf0:	3087883a 	add	r3,r6,r2
    5bf4:	3a000315 	stw	r8,12(r7)
    5bf8:	41c00215 	stw	r7,8(r8)
    5bfc:	31400115 	stw	r5,4(r6)
    5c00:	18800015 	stw	r2,0(r3)
    5c04:	003fbd06 	br	5afc <__alt_mem_onchip_memory2_0+0xf7c01afc>
    5c08:	39c0004c 	andi	r7,r7,1
    5c0c:	10c5883a 	add	r2,r2,r3
    5c10:	3800071e 	bne	r7,zero,5c30 <_free_r+0x1d4>
    5c14:	81fffe17 	ldw	r7,-8(r16)
    5c18:	31cdc83a 	sub	r6,r6,r7
    5c1c:	30c00317 	ldw	r3,12(r6)
    5c20:	31400217 	ldw	r5,8(r6)
    5c24:	11c5883a 	add	r2,r2,r7
    5c28:	28c00315 	stw	r3,12(r5)
    5c2c:	19400215 	stw	r5,8(r3)
    5c30:	10c00054 	ori	r3,r2,1
    5c34:	30c00115 	stw	r3,4(r6)
    5c38:	00c000b4 	movhi	r3,2
    5c3c:	18c06d04 	addi	r3,r3,436
    5c40:	18c00017 	ldw	r3,0(r3)
    5c44:	21800215 	stw	r6,8(r4)
    5c48:	10ffc036 	bltu	r2,r3,5b4c <__alt_mem_onchip_memory2_0+0xf7c01b4c>
    5c4c:	008000b4 	movhi	r2,2
    5c50:	10874804 	addi	r2,r2,7456
    5c54:	11400017 	ldw	r5,0(r2)
    5c58:	8809883a 	mov	r4,r17
    5c5c:	00059380 	call	5938 <_malloc_trim_r>
    5c60:	003fba06 	br	5b4c <__alt_mem_onchip_memory2_0+0xf7c01b4c>
    5c64:	28c9883a 	add	r4,r5,r3
    5c68:	21000117 	ldw	r4,4(r4)
    5c6c:	2100004c 	andi	r4,r4,1
    5c70:	2000391e 	bne	r4,zero,5d58 <_free_r+0x2fc>
    5c74:	29c00217 	ldw	r7,8(r5)
    5c78:	29000317 	ldw	r4,12(r5)
    5c7c:	1885883a 	add	r2,r3,r2
    5c80:	10c00054 	ori	r3,r2,1
    5c84:	39000315 	stw	r4,12(r7)
    5c88:	21c00215 	stw	r7,8(r4)
    5c8c:	30c00115 	stw	r3,4(r6)
    5c90:	308d883a 	add	r6,r6,r2
    5c94:	30800015 	stw	r2,0(r6)
    5c98:	003fac06 	br	5b4c <__alt_mem_onchip_memory2_0+0xf7c01b4c>
    5c9c:	00c00504 	movi	r3,20
    5ca0:	19401536 	bltu	r3,r5,5cf8 <_free_r+0x29c>
    5ca4:	28c01704 	addi	r3,r5,92
    5ca8:	18c7883a 	add	r3,r3,r3
    5cac:	294016c4 	addi	r5,r5,91
    5cb0:	003fb406 	br	5b84 <__alt_mem_onchip_memory2_0+0xf7c01b84>
    5cb4:	280bd0ba 	srai	r5,r5,2
    5cb8:	00c00044 	movi	r3,1
    5cbc:	38800117 	ldw	r2,4(r7)
    5cc0:	194a983a 	sll	r5,r3,r5
    5cc4:	2007883a 	mov	r3,r4
    5cc8:	2884b03a 	or	r2,r5,r2
    5ccc:	38800115 	stw	r2,4(r7)
    5cd0:	003fbb06 	br	5bc0 <__alt_mem_onchip_memory2_0+0xf7c01bc0>
    5cd4:	21800515 	stw	r6,20(r4)
    5cd8:	21800415 	stw	r6,16(r4)
    5cdc:	10c00054 	ori	r3,r2,1
    5ce0:	31c00315 	stw	r7,12(r6)
    5ce4:	31c00215 	stw	r7,8(r6)
    5ce8:	30c00115 	stw	r3,4(r6)
    5cec:	308d883a 	add	r6,r6,r2
    5cf0:	30800015 	stw	r2,0(r6)
    5cf4:	003f9506 	br	5b4c <__alt_mem_onchip_memory2_0+0xf7c01b4c>
    5cf8:	00c01504 	movi	r3,84
    5cfc:	19400536 	bltu	r3,r5,5d14 <_free_r+0x2b8>
    5d00:	100ad33a 	srli	r5,r2,12
    5d04:	28c01bc4 	addi	r3,r5,111
    5d08:	18c7883a 	add	r3,r3,r3
    5d0c:	29401b84 	addi	r5,r5,110
    5d10:	003f9c06 	br	5b84 <__alt_mem_onchip_memory2_0+0xf7c01b84>
    5d14:	00c05504 	movi	r3,340
    5d18:	19400536 	bltu	r3,r5,5d30 <_free_r+0x2d4>
    5d1c:	100ad3fa 	srli	r5,r2,15
    5d20:	28c01e04 	addi	r3,r5,120
    5d24:	18c7883a 	add	r3,r3,r3
    5d28:	29401dc4 	addi	r5,r5,119
    5d2c:	003f9506 	br	5b84 <__alt_mem_onchip_memory2_0+0xf7c01b84>
    5d30:	00c15504 	movi	r3,1364
    5d34:	19400536 	bltu	r3,r5,5d4c <_free_r+0x2f0>
    5d38:	100ad4ba 	srli	r5,r2,18
    5d3c:	28c01f44 	addi	r3,r5,125
    5d40:	18c7883a 	add	r3,r3,r3
    5d44:	29401f04 	addi	r5,r5,124
    5d48:	003f8e06 	br	5b84 <__alt_mem_onchip_memory2_0+0xf7c01b84>
    5d4c:	00c03f84 	movi	r3,254
    5d50:	01401f84 	movi	r5,126
    5d54:	003f8b06 	br	5b84 <__alt_mem_onchip_memory2_0+0xf7c01b84>
    5d58:	10c00054 	ori	r3,r2,1
    5d5c:	30c00115 	stw	r3,4(r6)
    5d60:	308d883a 	add	r6,r6,r2
    5d64:	30800015 	stw	r2,0(r6)
    5d68:	003f7806 	br	5b4c <__alt_mem_onchip_memory2_0+0xf7c01b4c>

00005d6c <_fwalk>:
    5d6c:	defff704 	addi	sp,sp,-36
    5d70:	dd000415 	stw	r20,16(sp)
    5d74:	dfc00815 	stw	ra,32(sp)
    5d78:	ddc00715 	stw	r23,28(sp)
    5d7c:	dd800615 	stw	r22,24(sp)
    5d80:	dd400515 	stw	r21,20(sp)
    5d84:	dcc00315 	stw	r19,12(sp)
    5d88:	dc800215 	stw	r18,8(sp)
    5d8c:	dc400115 	stw	r17,4(sp)
    5d90:	dc000015 	stw	r16,0(sp)
    5d94:	2500b804 	addi	r20,r4,736
    5d98:	a0002326 	beq	r20,zero,5e28 <_fwalk+0xbc>
    5d9c:	282b883a 	mov	r21,r5
    5da0:	002f883a 	mov	r23,zero
    5da4:	05800044 	movi	r22,1
    5da8:	04ffffc4 	movi	r19,-1
    5dac:	a4400117 	ldw	r17,4(r20)
    5db0:	a4800217 	ldw	r18,8(r20)
    5db4:	8c7fffc4 	addi	r17,r17,-1
    5db8:	88000d16 	blt	r17,zero,5df0 <_fwalk+0x84>
    5dbc:	94000304 	addi	r16,r18,12
    5dc0:	94800384 	addi	r18,r18,14
    5dc4:	8080000b 	ldhu	r2,0(r16)
    5dc8:	8c7fffc4 	addi	r17,r17,-1
    5dcc:	813ffd04 	addi	r4,r16,-12
    5dd0:	b080042e 	bgeu	r22,r2,5de4 <_fwalk+0x78>
    5dd4:	9080000f 	ldh	r2,0(r18)
    5dd8:	14c00226 	beq	r2,r19,5de4 <_fwalk+0x78>
    5ddc:	a83ee83a 	callr	r21
    5de0:	b8aeb03a 	or	r23,r23,r2
    5de4:	84001a04 	addi	r16,r16,104
    5de8:	94801a04 	addi	r18,r18,104
    5dec:	8cfff51e 	bne	r17,r19,5dc4 <__alt_mem_onchip_memory2_0+0xf7c01dc4>
    5df0:	a5000017 	ldw	r20,0(r20)
    5df4:	a03fed1e 	bne	r20,zero,5dac <__alt_mem_onchip_memory2_0+0xf7c01dac>
    5df8:	b805883a 	mov	r2,r23
    5dfc:	dfc00817 	ldw	ra,32(sp)
    5e00:	ddc00717 	ldw	r23,28(sp)
    5e04:	dd800617 	ldw	r22,24(sp)
    5e08:	dd400517 	ldw	r21,20(sp)
    5e0c:	dd000417 	ldw	r20,16(sp)
    5e10:	dcc00317 	ldw	r19,12(sp)
    5e14:	dc800217 	ldw	r18,8(sp)
    5e18:	dc400117 	ldw	r17,4(sp)
    5e1c:	dc000017 	ldw	r16,0(sp)
    5e20:	dec00904 	addi	sp,sp,36
    5e24:	f800283a 	ret
    5e28:	002f883a 	mov	r23,zero
    5e2c:	003ff206 	br	5df8 <__alt_mem_onchip_memory2_0+0xf7c01df8>

00005e30 <_fwalk_reent>:
    5e30:	defff704 	addi	sp,sp,-36
    5e34:	dd000415 	stw	r20,16(sp)
    5e38:	dfc00815 	stw	ra,32(sp)
    5e3c:	ddc00715 	stw	r23,28(sp)
    5e40:	dd800615 	stw	r22,24(sp)
    5e44:	dd400515 	stw	r21,20(sp)
    5e48:	dcc00315 	stw	r19,12(sp)
    5e4c:	dc800215 	stw	r18,8(sp)
    5e50:	dc400115 	stw	r17,4(sp)
    5e54:	dc000015 	stw	r16,0(sp)
    5e58:	2500b804 	addi	r20,r4,736
    5e5c:	a0002326 	beq	r20,zero,5eec <_fwalk_reent+0xbc>
    5e60:	282b883a 	mov	r21,r5
    5e64:	2027883a 	mov	r19,r4
    5e68:	002f883a 	mov	r23,zero
    5e6c:	05800044 	movi	r22,1
    5e70:	04bfffc4 	movi	r18,-1
    5e74:	a4400117 	ldw	r17,4(r20)
    5e78:	a4000217 	ldw	r16,8(r20)
    5e7c:	8c7fffc4 	addi	r17,r17,-1
    5e80:	88000c16 	blt	r17,zero,5eb4 <_fwalk_reent+0x84>
    5e84:	84000304 	addi	r16,r16,12
    5e88:	8080000b 	ldhu	r2,0(r16)
    5e8c:	8c7fffc4 	addi	r17,r17,-1
    5e90:	817ffd04 	addi	r5,r16,-12
    5e94:	b080052e 	bgeu	r22,r2,5eac <_fwalk_reent+0x7c>
    5e98:	8080008f 	ldh	r2,2(r16)
    5e9c:	9809883a 	mov	r4,r19
    5ea0:	14800226 	beq	r2,r18,5eac <_fwalk_reent+0x7c>
    5ea4:	a83ee83a 	callr	r21
    5ea8:	b8aeb03a 	or	r23,r23,r2
    5eac:	84001a04 	addi	r16,r16,104
    5eb0:	8cbff51e 	bne	r17,r18,5e88 <__alt_mem_onchip_memory2_0+0xf7c01e88>
    5eb4:	a5000017 	ldw	r20,0(r20)
    5eb8:	a03fee1e 	bne	r20,zero,5e74 <__alt_mem_onchip_memory2_0+0xf7c01e74>
    5ebc:	b805883a 	mov	r2,r23
    5ec0:	dfc00817 	ldw	ra,32(sp)
    5ec4:	ddc00717 	ldw	r23,28(sp)
    5ec8:	dd800617 	ldw	r22,24(sp)
    5ecc:	dd400517 	ldw	r21,20(sp)
    5ed0:	dd000417 	ldw	r20,16(sp)
    5ed4:	dcc00317 	ldw	r19,12(sp)
    5ed8:	dc800217 	ldw	r18,8(sp)
    5edc:	dc400117 	ldw	r17,4(sp)
    5ee0:	dc000017 	ldw	r16,0(sp)
    5ee4:	dec00904 	addi	sp,sp,36
    5ee8:	f800283a 	ret
    5eec:	002f883a 	mov	r23,zero
    5ef0:	003ff206 	br	5ebc <__alt_mem_onchip_memory2_0+0xf7c01ebc>

00005ef4 <__smakebuf_r>:
    5ef4:	2880030b 	ldhu	r2,12(r5)
    5ef8:	10c0008c 	andi	r3,r2,2
    5efc:	1800411e 	bne	r3,zero,6004 <__smakebuf_r+0x110>
    5f00:	deffec04 	addi	sp,sp,-80
    5f04:	dc000f15 	stw	r16,60(sp)
    5f08:	2821883a 	mov	r16,r5
    5f0c:	2940038f 	ldh	r5,14(r5)
    5f10:	dc401015 	stw	r17,64(sp)
    5f14:	dfc01315 	stw	ra,76(sp)
    5f18:	dcc01215 	stw	r19,72(sp)
    5f1c:	dc801115 	stw	r18,68(sp)
    5f20:	2023883a 	mov	r17,r4
    5f24:	28001c16 	blt	r5,zero,5f98 <__smakebuf_r+0xa4>
    5f28:	d80d883a 	mov	r6,sp
    5f2c:	00064cc0 	call	64cc <_fstat_r>
    5f30:	10001816 	blt	r2,zero,5f94 <__smakebuf_r+0xa0>
    5f34:	d8800117 	ldw	r2,4(sp)
    5f38:	00e00014 	movui	r3,32768
    5f3c:	10bc000c 	andi	r2,r2,61440
    5f40:	14c80020 	cmpeqi	r19,r2,8192
    5f44:	10c03726 	beq	r2,r3,6024 <__smakebuf_r+0x130>
    5f48:	80c0030b 	ldhu	r3,12(r16)
    5f4c:	18c20014 	ori	r3,r3,2048
    5f50:	80c0030d 	sth	r3,12(r16)
    5f54:	00c80004 	movi	r3,8192
    5f58:	10c0521e 	bne	r2,r3,60a4 <__smakebuf_r+0x1b0>
    5f5c:	8140038f 	ldh	r5,14(r16)
    5f60:	8809883a 	mov	r4,r17
    5f64:	00065280 	call	6528 <_isatty_r>
    5f68:	10004c26 	beq	r2,zero,609c <__smakebuf_r+0x1a8>
    5f6c:	8080030b 	ldhu	r2,12(r16)
    5f70:	80c010c4 	addi	r3,r16,67
    5f74:	80c00015 	stw	r3,0(r16)
    5f78:	10800054 	ori	r2,r2,1
    5f7c:	8080030d 	sth	r2,12(r16)
    5f80:	00800044 	movi	r2,1
    5f84:	80c00415 	stw	r3,16(r16)
    5f88:	80800515 	stw	r2,20(r16)
    5f8c:	04810004 	movi	r18,1024
    5f90:	00000706 	br	5fb0 <__smakebuf_r+0xbc>
    5f94:	8080030b 	ldhu	r2,12(r16)
    5f98:	10c0200c 	andi	r3,r2,128
    5f9c:	18001f1e 	bne	r3,zero,601c <__smakebuf_r+0x128>
    5fa0:	04810004 	movi	r18,1024
    5fa4:	10820014 	ori	r2,r2,2048
    5fa8:	8080030d 	sth	r2,12(r16)
    5fac:	0027883a 	mov	r19,zero
    5fb0:	900b883a 	mov	r5,r18
    5fb4:	8809883a 	mov	r4,r17
    5fb8:	0003afc0 	call	3afc <_malloc_r>
    5fbc:	10002c26 	beq	r2,zero,6070 <__smakebuf_r+0x17c>
    5fc0:	80c0030b 	ldhu	r3,12(r16)
    5fc4:	01000034 	movhi	r4,0
    5fc8:	21156804 	addi	r4,r4,21920
    5fcc:	89000f15 	stw	r4,60(r17)
    5fd0:	18c02014 	ori	r3,r3,128
    5fd4:	80c0030d 	sth	r3,12(r16)
    5fd8:	80800015 	stw	r2,0(r16)
    5fdc:	80800415 	stw	r2,16(r16)
    5fe0:	84800515 	stw	r18,20(r16)
    5fe4:	98001a1e 	bne	r19,zero,6050 <__smakebuf_r+0x15c>
    5fe8:	dfc01317 	ldw	ra,76(sp)
    5fec:	dcc01217 	ldw	r19,72(sp)
    5ff0:	dc801117 	ldw	r18,68(sp)
    5ff4:	dc401017 	ldw	r17,64(sp)
    5ff8:	dc000f17 	ldw	r16,60(sp)
    5ffc:	dec01404 	addi	sp,sp,80
    6000:	f800283a 	ret
    6004:	288010c4 	addi	r2,r5,67
    6008:	28800015 	stw	r2,0(r5)
    600c:	28800415 	stw	r2,16(r5)
    6010:	00800044 	movi	r2,1
    6014:	28800515 	stw	r2,20(r5)
    6018:	f800283a 	ret
    601c:	04801004 	movi	r18,64
    6020:	003fe006 	br	5fa4 <__alt_mem_onchip_memory2_0+0xf7c01fa4>
    6024:	81000a17 	ldw	r4,40(r16)
    6028:	00c00034 	movhi	r3,0
    602c:	18d8ac04 	addi	r3,r3,25264
    6030:	20ffc51e 	bne	r4,r3,5f48 <__alt_mem_onchip_memory2_0+0xf7c01f48>
    6034:	8080030b 	ldhu	r2,12(r16)
    6038:	04810004 	movi	r18,1024
    603c:	84801315 	stw	r18,76(r16)
    6040:	1484b03a 	or	r2,r2,r18
    6044:	8080030d 	sth	r2,12(r16)
    6048:	0027883a 	mov	r19,zero
    604c:	003fd806 	br	5fb0 <__alt_mem_onchip_memory2_0+0xf7c01fb0>
    6050:	8140038f 	ldh	r5,14(r16)
    6054:	8809883a 	mov	r4,r17
    6058:	00065280 	call	6528 <_isatty_r>
    605c:	103fe226 	beq	r2,zero,5fe8 <__alt_mem_onchip_memory2_0+0xf7c01fe8>
    6060:	8080030b 	ldhu	r2,12(r16)
    6064:	10800054 	ori	r2,r2,1
    6068:	8080030d 	sth	r2,12(r16)
    606c:	003fde06 	br	5fe8 <__alt_mem_onchip_memory2_0+0xf7c01fe8>
    6070:	8080030b 	ldhu	r2,12(r16)
    6074:	10c0800c 	andi	r3,r2,512
    6078:	183fdb1e 	bne	r3,zero,5fe8 <__alt_mem_onchip_memory2_0+0xf7c01fe8>
    607c:	10800094 	ori	r2,r2,2
    6080:	80c010c4 	addi	r3,r16,67
    6084:	8080030d 	sth	r2,12(r16)
    6088:	00800044 	movi	r2,1
    608c:	80c00015 	stw	r3,0(r16)
    6090:	80c00415 	stw	r3,16(r16)
    6094:	80800515 	stw	r2,20(r16)
    6098:	003fd306 	br	5fe8 <__alt_mem_onchip_memory2_0+0xf7c01fe8>
    609c:	04810004 	movi	r18,1024
    60a0:	003fc306 	br	5fb0 <__alt_mem_onchip_memory2_0+0xf7c01fb0>
    60a4:	0027883a 	mov	r19,zero
    60a8:	04810004 	movi	r18,1024
    60ac:	003fc006 	br	5fb0 <__alt_mem_onchip_memory2_0+0xf7c01fb0>

000060b0 <memset>:
    60b0:	20c000cc 	andi	r3,r4,3
    60b4:	2005883a 	mov	r2,r4
    60b8:	18004426 	beq	r3,zero,61cc <memset+0x11c>
    60bc:	31ffffc4 	addi	r7,r6,-1
    60c0:	30004026 	beq	r6,zero,61c4 <memset+0x114>
    60c4:	2813883a 	mov	r9,r5
    60c8:	200d883a 	mov	r6,r4
    60cc:	2007883a 	mov	r3,r4
    60d0:	00000406 	br	60e4 <memset+0x34>
    60d4:	3a3fffc4 	addi	r8,r7,-1
    60d8:	31800044 	addi	r6,r6,1
    60dc:	38003926 	beq	r7,zero,61c4 <memset+0x114>
    60e0:	400f883a 	mov	r7,r8
    60e4:	18c00044 	addi	r3,r3,1
    60e8:	32400005 	stb	r9,0(r6)
    60ec:	1a0000cc 	andi	r8,r3,3
    60f0:	403ff81e 	bne	r8,zero,60d4 <__alt_mem_onchip_memory2_0+0xf7c020d4>
    60f4:	010000c4 	movi	r4,3
    60f8:	21c02d2e 	bgeu	r4,r7,61b0 <memset+0x100>
    60fc:	29003fcc 	andi	r4,r5,255
    6100:	200c923a 	slli	r6,r4,8
    6104:	3108b03a 	or	r4,r6,r4
    6108:	200c943a 	slli	r6,r4,16
    610c:	218cb03a 	or	r6,r4,r6
    6110:	010003c4 	movi	r4,15
    6114:	21c0182e 	bgeu	r4,r7,6178 <memset+0xc8>
    6118:	3b3ffc04 	addi	r12,r7,-16
    611c:	6018d13a 	srli	r12,r12,4
    6120:	1a000104 	addi	r8,r3,4
    6124:	1ac00204 	addi	r11,r3,8
    6128:	6008913a 	slli	r4,r12,4
    612c:	1a800304 	addi	r10,r3,12
    6130:	1813883a 	mov	r9,r3
    6134:	21000504 	addi	r4,r4,20
    6138:	1909883a 	add	r4,r3,r4
    613c:	49800015 	stw	r6,0(r9)
    6140:	41800015 	stw	r6,0(r8)
    6144:	59800015 	stw	r6,0(r11)
    6148:	51800015 	stw	r6,0(r10)
    614c:	42000404 	addi	r8,r8,16
    6150:	4a400404 	addi	r9,r9,16
    6154:	5ac00404 	addi	r11,r11,16
    6158:	52800404 	addi	r10,r10,16
    615c:	413ff71e 	bne	r8,r4,613c <__alt_mem_onchip_memory2_0+0xf7c0213c>
    6160:	63000044 	addi	r12,r12,1
    6164:	6018913a 	slli	r12,r12,4
    6168:	39c003cc 	andi	r7,r7,15
    616c:	010000c4 	movi	r4,3
    6170:	1b07883a 	add	r3,r3,r12
    6174:	21c00e2e 	bgeu	r4,r7,61b0 <memset+0x100>
    6178:	1813883a 	mov	r9,r3
    617c:	3811883a 	mov	r8,r7
    6180:	010000c4 	movi	r4,3
    6184:	49800015 	stw	r6,0(r9)
    6188:	423fff04 	addi	r8,r8,-4
    618c:	4a400104 	addi	r9,r9,4
    6190:	223ffc36 	bltu	r4,r8,6184 <__alt_mem_onchip_memory2_0+0xf7c02184>
    6194:	393fff04 	addi	r4,r7,-4
    6198:	2008d0ba 	srli	r4,r4,2
    619c:	39c000cc 	andi	r7,r7,3
    61a0:	21000044 	addi	r4,r4,1
    61a4:	2109883a 	add	r4,r4,r4
    61a8:	2109883a 	add	r4,r4,r4
    61ac:	1907883a 	add	r3,r3,r4
    61b0:	38000526 	beq	r7,zero,61c8 <memset+0x118>
    61b4:	19cf883a 	add	r7,r3,r7
    61b8:	19400005 	stb	r5,0(r3)
    61bc:	18c00044 	addi	r3,r3,1
    61c0:	38fffd1e 	bne	r7,r3,61b8 <__alt_mem_onchip_memory2_0+0xf7c021b8>
    61c4:	f800283a 	ret
    61c8:	f800283a 	ret
    61cc:	2007883a 	mov	r3,r4
    61d0:	300f883a 	mov	r7,r6
    61d4:	003fc706 	br	60f4 <__alt_mem_onchip_memory2_0+0xf7c020f4>

000061d8 <__sread>:
    61d8:	defffe04 	addi	sp,sp,-8
    61dc:	dc000015 	stw	r16,0(sp)
    61e0:	2821883a 	mov	r16,r5
    61e4:	2940038f 	ldh	r5,14(r5)
    61e8:	dfc00115 	stw	ra,4(sp)
    61ec:	00065dc0 	call	65dc <_read_r>
    61f0:	10000716 	blt	r2,zero,6210 <__sread+0x38>
    61f4:	80c01417 	ldw	r3,80(r16)
    61f8:	1887883a 	add	r3,r3,r2
    61fc:	80c01415 	stw	r3,80(r16)
    6200:	dfc00117 	ldw	ra,4(sp)
    6204:	dc000017 	ldw	r16,0(sp)
    6208:	dec00204 	addi	sp,sp,8
    620c:	f800283a 	ret
    6210:	80c0030b 	ldhu	r3,12(r16)
    6214:	18fbffcc 	andi	r3,r3,61439
    6218:	80c0030d 	sth	r3,12(r16)
    621c:	dfc00117 	ldw	ra,4(sp)
    6220:	dc000017 	ldw	r16,0(sp)
    6224:	dec00204 	addi	sp,sp,8
    6228:	f800283a 	ret

0000622c <__seofread>:
    622c:	0005883a 	mov	r2,zero
    6230:	f800283a 	ret

00006234 <__swrite>:
    6234:	2880030b 	ldhu	r2,12(r5)
    6238:	defffb04 	addi	sp,sp,-20
    623c:	dcc00315 	stw	r19,12(sp)
    6240:	dc800215 	stw	r18,8(sp)
    6244:	dc400115 	stw	r17,4(sp)
    6248:	dc000015 	stw	r16,0(sp)
    624c:	dfc00415 	stw	ra,16(sp)
    6250:	10c0400c 	andi	r3,r2,256
    6254:	2821883a 	mov	r16,r5
    6258:	2023883a 	mov	r17,r4
    625c:	3025883a 	mov	r18,r6
    6260:	3827883a 	mov	r19,r7
    6264:	18000526 	beq	r3,zero,627c <__swrite+0x48>
    6268:	2940038f 	ldh	r5,14(r5)
    626c:	01c00084 	movi	r7,2
    6270:	000d883a 	mov	r6,zero
    6274:	000657c0 	call	657c <_lseek_r>
    6278:	8080030b 	ldhu	r2,12(r16)
    627c:	8140038f 	ldh	r5,14(r16)
    6280:	10bbffcc 	andi	r2,r2,61439
    6284:	980f883a 	mov	r7,r19
    6288:	900d883a 	mov	r6,r18
    628c:	8809883a 	mov	r4,r17
    6290:	8080030d 	sth	r2,12(r16)
    6294:	dfc00417 	ldw	ra,16(sp)
    6298:	dcc00317 	ldw	r19,12(sp)
    629c:	dc800217 	ldw	r18,8(sp)
    62a0:	dc400117 	ldw	r17,4(sp)
    62a4:	dc000017 	ldw	r16,0(sp)
    62a8:	dec00504 	addi	sp,sp,20
    62ac:	00063141 	jmpi	6314 <_write_r>

000062b0 <__sseek>:
    62b0:	defffe04 	addi	sp,sp,-8
    62b4:	dc000015 	stw	r16,0(sp)
    62b8:	2821883a 	mov	r16,r5
    62bc:	2940038f 	ldh	r5,14(r5)
    62c0:	dfc00115 	stw	ra,4(sp)
    62c4:	000657c0 	call	657c <_lseek_r>
    62c8:	00ffffc4 	movi	r3,-1
    62cc:	10c00826 	beq	r2,r3,62f0 <__sseek+0x40>
    62d0:	80c0030b 	ldhu	r3,12(r16)
    62d4:	80801415 	stw	r2,80(r16)
    62d8:	18c40014 	ori	r3,r3,4096
    62dc:	80c0030d 	sth	r3,12(r16)
    62e0:	dfc00117 	ldw	ra,4(sp)
    62e4:	dc000017 	ldw	r16,0(sp)
    62e8:	dec00204 	addi	sp,sp,8
    62ec:	f800283a 	ret
    62f0:	80c0030b 	ldhu	r3,12(r16)
    62f4:	18fbffcc 	andi	r3,r3,61439
    62f8:	80c0030d 	sth	r3,12(r16)
    62fc:	dfc00117 	ldw	ra,4(sp)
    6300:	dc000017 	ldw	r16,0(sp)
    6304:	dec00204 	addi	sp,sp,8
    6308:	f800283a 	ret

0000630c <__sclose>:
    630c:	2940038f 	ldh	r5,14(r5)
    6310:	00063741 	jmpi	6374 <_close_r>

00006314 <_write_r>:
    6314:	defffd04 	addi	sp,sp,-12
    6318:	2805883a 	mov	r2,r5
    631c:	dc000015 	stw	r16,0(sp)
    6320:	040000b4 	movhi	r16,2
    6324:	dc400115 	stw	r17,4(sp)
    6328:	300b883a 	mov	r5,r6
    632c:	84074504 	addi	r16,r16,7444
    6330:	2023883a 	mov	r17,r4
    6334:	380d883a 	mov	r6,r7
    6338:	1009883a 	mov	r4,r2
    633c:	dfc00215 	stw	ra,8(sp)
    6340:	80000015 	stw	zero,0(r16)
    6344:	0006d6c0 	call	6d6c <write>
    6348:	00ffffc4 	movi	r3,-1
    634c:	10c00526 	beq	r2,r3,6364 <_write_r+0x50>
    6350:	dfc00217 	ldw	ra,8(sp)
    6354:	dc400117 	ldw	r17,4(sp)
    6358:	dc000017 	ldw	r16,0(sp)
    635c:	dec00304 	addi	sp,sp,12
    6360:	f800283a 	ret
    6364:	80c00017 	ldw	r3,0(r16)
    6368:	183ff926 	beq	r3,zero,6350 <__alt_mem_onchip_memory2_0+0xf7c02350>
    636c:	88c00015 	stw	r3,0(r17)
    6370:	003ff706 	br	6350 <__alt_mem_onchip_memory2_0+0xf7c02350>

00006374 <_close_r>:
    6374:	defffd04 	addi	sp,sp,-12
    6378:	dc000015 	stw	r16,0(sp)
    637c:	040000b4 	movhi	r16,2
    6380:	dc400115 	stw	r17,4(sp)
    6384:	84074504 	addi	r16,r16,7444
    6388:	2023883a 	mov	r17,r4
    638c:	2809883a 	mov	r4,r5
    6390:	dfc00215 	stw	ra,8(sp)
    6394:	80000015 	stw	zero,0(r16)
    6398:	00028540 	call	2854 <close>
    639c:	00ffffc4 	movi	r3,-1
    63a0:	10c00526 	beq	r2,r3,63b8 <_close_r+0x44>
    63a4:	dfc00217 	ldw	ra,8(sp)
    63a8:	dc400117 	ldw	r17,4(sp)
    63ac:	dc000017 	ldw	r16,0(sp)
    63b0:	dec00304 	addi	sp,sp,12
    63b4:	f800283a 	ret
    63b8:	80c00017 	ldw	r3,0(r16)
    63bc:	183ff926 	beq	r3,zero,63a4 <__alt_mem_onchip_memory2_0+0xf7c023a4>
    63c0:	88c00015 	stw	r3,0(r17)
    63c4:	003ff706 	br	63a4 <__alt_mem_onchip_memory2_0+0xf7c023a4>

000063c8 <_fclose_r>:
    63c8:	28003926 	beq	r5,zero,64b0 <_fclose_r+0xe8>
    63cc:	defffc04 	addi	sp,sp,-16
    63d0:	dc400115 	stw	r17,4(sp)
    63d4:	dc000015 	stw	r16,0(sp)
    63d8:	dfc00315 	stw	ra,12(sp)
    63dc:	dc800215 	stw	r18,8(sp)
    63e0:	2023883a 	mov	r17,r4
    63e4:	2821883a 	mov	r16,r5
    63e8:	20000226 	beq	r4,zero,63f4 <_fclose_r+0x2c>
    63ec:	20800e17 	ldw	r2,56(r4)
    63f0:	10002726 	beq	r2,zero,6490 <_fclose_r+0xc8>
    63f4:	8080030f 	ldh	r2,12(r16)
    63f8:	1000071e 	bne	r2,zero,6418 <_fclose_r+0x50>
    63fc:	0005883a 	mov	r2,zero
    6400:	dfc00317 	ldw	ra,12(sp)
    6404:	dc800217 	ldw	r18,8(sp)
    6408:	dc400117 	ldw	r17,4(sp)
    640c:	dc000017 	ldw	r16,0(sp)
    6410:	dec00404 	addi	sp,sp,16
    6414:	f800283a 	ret
    6418:	800b883a 	mov	r5,r16
    641c:	8809883a 	mov	r4,r17
    6420:	00052f00 	call	52f0 <__sflush_r>
    6424:	1025883a 	mov	r18,r2
    6428:	80800b17 	ldw	r2,44(r16)
    642c:	10000426 	beq	r2,zero,6440 <_fclose_r+0x78>
    6430:	81400717 	ldw	r5,28(r16)
    6434:	8809883a 	mov	r4,r17
    6438:	103ee83a 	callr	r2
    643c:	10001616 	blt	r2,zero,6498 <_fclose_r+0xd0>
    6440:	8080030b 	ldhu	r2,12(r16)
    6444:	1080200c 	andi	r2,r2,128
    6448:	1000151e 	bne	r2,zero,64a0 <_fclose_r+0xd8>
    644c:	81400c17 	ldw	r5,48(r16)
    6450:	28000526 	beq	r5,zero,6468 <_fclose_r+0xa0>
    6454:	80801004 	addi	r2,r16,64
    6458:	28800226 	beq	r5,r2,6464 <_fclose_r+0x9c>
    645c:	8809883a 	mov	r4,r17
    6460:	0005a5c0 	call	5a5c <_free_r>
    6464:	80000c15 	stw	zero,48(r16)
    6468:	81401117 	ldw	r5,68(r16)
    646c:	28000326 	beq	r5,zero,647c <_fclose_r+0xb4>
    6470:	8809883a 	mov	r4,r17
    6474:	0005a5c0 	call	5a5c <_free_r>
    6478:	80001115 	stw	zero,68(r16)
    647c:	00058f80 	call	58f8 <__sfp_lock_acquire>
    6480:	8000030d 	sth	zero,12(r16)
    6484:	00058fc0 	call	58fc <__sfp_lock_release>
    6488:	9005883a 	mov	r2,r18
    648c:	003fdc06 	br	6400 <__alt_mem_onchip_memory2_0+0xf7c02400>
    6490:	00058e80 	call	58e8 <__sinit>
    6494:	003fd706 	br	63f4 <__alt_mem_onchip_memory2_0+0xf7c023f4>
    6498:	04bfffc4 	movi	r18,-1
    649c:	003fe806 	br	6440 <__alt_mem_onchip_memory2_0+0xf7c02440>
    64a0:	81400417 	ldw	r5,16(r16)
    64a4:	8809883a 	mov	r4,r17
    64a8:	0005a5c0 	call	5a5c <_free_r>
    64ac:	003fe706 	br	644c <__alt_mem_onchip_memory2_0+0xf7c0244c>
    64b0:	0005883a 	mov	r2,zero
    64b4:	f800283a 	ret

000064b8 <fclose>:
    64b8:	008000b4 	movhi	r2,2
    64bc:	10806b04 	addi	r2,r2,428
    64c0:	200b883a 	mov	r5,r4
    64c4:	11000017 	ldw	r4,0(r2)
    64c8:	00063c81 	jmpi	63c8 <_fclose_r>

000064cc <_fstat_r>:
    64cc:	defffd04 	addi	sp,sp,-12
    64d0:	2805883a 	mov	r2,r5
    64d4:	dc000015 	stw	r16,0(sp)
    64d8:	040000b4 	movhi	r16,2
    64dc:	dc400115 	stw	r17,4(sp)
    64e0:	84074504 	addi	r16,r16,7444
    64e4:	2023883a 	mov	r17,r4
    64e8:	300b883a 	mov	r5,r6
    64ec:	1009883a 	mov	r4,r2
    64f0:	dfc00215 	stw	ra,8(sp)
    64f4:	80000015 	stw	zero,0(r16)
    64f8:	00068600 	call	6860 <fstat>
    64fc:	00ffffc4 	movi	r3,-1
    6500:	10c00526 	beq	r2,r3,6518 <_fstat_r+0x4c>
    6504:	dfc00217 	ldw	ra,8(sp)
    6508:	dc400117 	ldw	r17,4(sp)
    650c:	dc000017 	ldw	r16,0(sp)
    6510:	dec00304 	addi	sp,sp,12
    6514:	f800283a 	ret
    6518:	80c00017 	ldw	r3,0(r16)
    651c:	183ff926 	beq	r3,zero,6504 <__alt_mem_onchip_memory2_0+0xf7c02504>
    6520:	88c00015 	stw	r3,0(r17)
    6524:	003ff706 	br	6504 <__alt_mem_onchip_memory2_0+0xf7c02504>

00006528 <_isatty_r>:
    6528:	defffd04 	addi	sp,sp,-12
    652c:	dc000015 	stw	r16,0(sp)
    6530:	040000b4 	movhi	r16,2
    6534:	dc400115 	stw	r17,4(sp)
    6538:	84074504 	addi	r16,r16,7444
    653c:	2023883a 	mov	r17,r4
    6540:	2809883a 	mov	r4,r5
    6544:	dfc00215 	stw	ra,8(sp)
    6548:	80000015 	stw	zero,0(r16)
    654c:	000694c0 	call	694c <isatty>
    6550:	00ffffc4 	movi	r3,-1
    6554:	10c00526 	beq	r2,r3,656c <_isatty_r+0x44>
    6558:	dfc00217 	ldw	ra,8(sp)
    655c:	dc400117 	ldw	r17,4(sp)
    6560:	dc000017 	ldw	r16,0(sp)
    6564:	dec00304 	addi	sp,sp,12
    6568:	f800283a 	ret
    656c:	80c00017 	ldw	r3,0(r16)
    6570:	183ff926 	beq	r3,zero,6558 <__alt_mem_onchip_memory2_0+0xf7c02558>
    6574:	88c00015 	stw	r3,0(r17)
    6578:	003ff706 	br	6558 <__alt_mem_onchip_memory2_0+0xf7c02558>

0000657c <_lseek_r>:
    657c:	defffd04 	addi	sp,sp,-12
    6580:	2805883a 	mov	r2,r5
    6584:	dc000015 	stw	r16,0(sp)
    6588:	040000b4 	movhi	r16,2
    658c:	dc400115 	stw	r17,4(sp)
    6590:	300b883a 	mov	r5,r6
    6594:	84074504 	addi	r16,r16,7444
    6598:	2023883a 	mov	r17,r4
    659c:	380d883a 	mov	r6,r7
    65a0:	1009883a 	mov	r4,r2
    65a4:	dfc00215 	stw	ra,8(sp)
    65a8:	80000015 	stw	zero,0(r16)
    65ac:	0006a2c0 	call	6a2c <lseek>
    65b0:	00ffffc4 	movi	r3,-1
    65b4:	10c00526 	beq	r2,r3,65cc <_lseek_r+0x50>
    65b8:	dfc00217 	ldw	ra,8(sp)
    65bc:	dc400117 	ldw	r17,4(sp)
    65c0:	dc000017 	ldw	r16,0(sp)
    65c4:	dec00304 	addi	sp,sp,12
    65c8:	f800283a 	ret
    65cc:	80c00017 	ldw	r3,0(r16)
    65d0:	183ff926 	beq	r3,zero,65b8 <__alt_mem_onchip_memory2_0+0xf7c025b8>
    65d4:	88c00015 	stw	r3,0(r17)
    65d8:	003ff706 	br	65b8 <__alt_mem_onchip_memory2_0+0xf7c025b8>

000065dc <_read_r>:
    65dc:	defffd04 	addi	sp,sp,-12
    65e0:	2805883a 	mov	r2,r5
    65e4:	dc000015 	stw	r16,0(sp)
    65e8:	040000b4 	movhi	r16,2
    65ec:	dc400115 	stw	r17,4(sp)
    65f0:	300b883a 	mov	r5,r6
    65f4:	84074504 	addi	r16,r16,7444
    65f8:	2023883a 	mov	r17,r4
    65fc:	380d883a 	mov	r6,r7
    6600:	1009883a 	mov	r4,r2
    6604:	dfc00215 	stw	ra,8(sp)
    6608:	80000015 	stw	zero,0(r16)
    660c:	0006b840 	call	6b84 <read>
    6610:	00ffffc4 	movi	r3,-1
    6614:	10c00526 	beq	r2,r3,662c <_read_r+0x50>
    6618:	dfc00217 	ldw	ra,8(sp)
    661c:	dc400117 	ldw	r17,4(sp)
    6620:	dc000017 	ldw	r16,0(sp)
    6624:	dec00304 	addi	sp,sp,12
    6628:	f800283a 	ret
    662c:	80c00017 	ldw	r3,0(r16)
    6630:	183ff926 	beq	r3,zero,6618 <__alt_mem_onchip_memory2_0+0xf7c02618>
    6634:	88c00015 	stw	r3,0(r17)
    6638:	003ff706 	br	6618 <__alt_mem_onchip_memory2_0+0xf7c02618>

0000663c <__divsi3>:
    663c:	20001b16 	blt	r4,zero,66ac <__divsi3+0x70>
    6640:	000f883a 	mov	r7,zero
    6644:	28001616 	blt	r5,zero,66a0 <__divsi3+0x64>
    6648:	200d883a 	mov	r6,r4
    664c:	29001a2e 	bgeu	r5,r4,66b8 <__divsi3+0x7c>
    6650:	00800804 	movi	r2,32
    6654:	00c00044 	movi	r3,1
    6658:	00000106 	br	6660 <__divsi3+0x24>
    665c:	10000d26 	beq	r2,zero,6694 <__divsi3+0x58>
    6660:	294b883a 	add	r5,r5,r5
    6664:	10bfffc4 	addi	r2,r2,-1
    6668:	18c7883a 	add	r3,r3,r3
    666c:	293ffb36 	bltu	r5,r4,665c <__alt_mem_onchip_memory2_0+0xf7c0265c>
    6670:	0005883a 	mov	r2,zero
    6674:	18000726 	beq	r3,zero,6694 <__divsi3+0x58>
    6678:	0005883a 	mov	r2,zero
    667c:	31400236 	bltu	r6,r5,6688 <__divsi3+0x4c>
    6680:	314dc83a 	sub	r6,r6,r5
    6684:	10c4b03a 	or	r2,r2,r3
    6688:	1806d07a 	srli	r3,r3,1
    668c:	280ad07a 	srli	r5,r5,1
    6690:	183ffa1e 	bne	r3,zero,667c <__alt_mem_onchip_memory2_0+0xf7c0267c>
    6694:	38000126 	beq	r7,zero,669c <__divsi3+0x60>
    6698:	0085c83a 	sub	r2,zero,r2
    669c:	f800283a 	ret
    66a0:	014bc83a 	sub	r5,zero,r5
    66a4:	39c0005c 	xori	r7,r7,1
    66a8:	003fe706 	br	6648 <__alt_mem_onchip_memory2_0+0xf7c02648>
    66ac:	0109c83a 	sub	r4,zero,r4
    66b0:	01c00044 	movi	r7,1
    66b4:	003fe306 	br	6644 <__alt_mem_onchip_memory2_0+0xf7c02644>
    66b8:	00c00044 	movi	r3,1
    66bc:	003fee06 	br	6678 <__alt_mem_onchip_memory2_0+0xf7c02678>

000066c0 <__modsi3>:
    66c0:	20001716 	blt	r4,zero,6720 <__modsi3+0x60>
    66c4:	000f883a 	mov	r7,zero
    66c8:	2005883a 	mov	r2,r4
    66cc:	28001216 	blt	r5,zero,6718 <__modsi3+0x58>
    66d0:	2900162e 	bgeu	r5,r4,672c <__modsi3+0x6c>
    66d4:	01800804 	movi	r6,32
    66d8:	00c00044 	movi	r3,1
    66dc:	00000106 	br	66e4 <__modsi3+0x24>
    66e0:	30000a26 	beq	r6,zero,670c <__modsi3+0x4c>
    66e4:	294b883a 	add	r5,r5,r5
    66e8:	31bfffc4 	addi	r6,r6,-1
    66ec:	18c7883a 	add	r3,r3,r3
    66f0:	293ffb36 	bltu	r5,r4,66e0 <__alt_mem_onchip_memory2_0+0xf7c026e0>
    66f4:	18000526 	beq	r3,zero,670c <__modsi3+0x4c>
    66f8:	1806d07a 	srli	r3,r3,1
    66fc:	11400136 	bltu	r2,r5,6704 <__modsi3+0x44>
    6700:	1145c83a 	sub	r2,r2,r5
    6704:	280ad07a 	srli	r5,r5,1
    6708:	183ffb1e 	bne	r3,zero,66f8 <__alt_mem_onchip_memory2_0+0xf7c026f8>
    670c:	38000126 	beq	r7,zero,6714 <__modsi3+0x54>
    6710:	0085c83a 	sub	r2,zero,r2
    6714:	f800283a 	ret
    6718:	014bc83a 	sub	r5,zero,r5
    671c:	003fec06 	br	66d0 <__alt_mem_onchip_memory2_0+0xf7c026d0>
    6720:	0109c83a 	sub	r4,zero,r4
    6724:	01c00044 	movi	r7,1
    6728:	003fe706 	br	66c8 <__alt_mem_onchip_memory2_0+0xf7c026c8>
    672c:	00c00044 	movi	r3,1
    6730:	003ff106 	br	66f8 <__alt_mem_onchip_memory2_0+0xf7c026f8>

00006734 <__udivsi3>:
    6734:	200d883a 	mov	r6,r4
    6738:	2900152e 	bgeu	r5,r4,6790 <__udivsi3+0x5c>
    673c:	28001416 	blt	r5,zero,6790 <__udivsi3+0x5c>
    6740:	00800804 	movi	r2,32
    6744:	00c00044 	movi	r3,1
    6748:	00000206 	br	6754 <__udivsi3+0x20>
    674c:	10000e26 	beq	r2,zero,6788 <__udivsi3+0x54>
    6750:	28000516 	blt	r5,zero,6768 <__udivsi3+0x34>
    6754:	294b883a 	add	r5,r5,r5
    6758:	10bfffc4 	addi	r2,r2,-1
    675c:	18c7883a 	add	r3,r3,r3
    6760:	293ffa36 	bltu	r5,r4,674c <__alt_mem_onchip_memory2_0+0xf7c0274c>
    6764:	18000826 	beq	r3,zero,6788 <__udivsi3+0x54>
    6768:	0005883a 	mov	r2,zero
    676c:	31400236 	bltu	r6,r5,6778 <__udivsi3+0x44>
    6770:	314dc83a 	sub	r6,r6,r5
    6774:	10c4b03a 	or	r2,r2,r3
    6778:	1806d07a 	srli	r3,r3,1
    677c:	280ad07a 	srli	r5,r5,1
    6780:	183ffa1e 	bne	r3,zero,676c <__alt_mem_onchip_memory2_0+0xf7c0276c>
    6784:	f800283a 	ret
    6788:	0005883a 	mov	r2,zero
    678c:	f800283a 	ret
    6790:	00c00044 	movi	r3,1
    6794:	003ff406 	br	6768 <__alt_mem_onchip_memory2_0+0xf7c02768>

00006798 <__umodsi3>:
    6798:	2005883a 	mov	r2,r4
    679c:	2900122e 	bgeu	r5,r4,67e8 <__umodsi3+0x50>
    67a0:	28001116 	blt	r5,zero,67e8 <__umodsi3+0x50>
    67a4:	01800804 	movi	r6,32
    67a8:	00c00044 	movi	r3,1
    67ac:	00000206 	br	67b8 <__umodsi3+0x20>
    67b0:	30000c26 	beq	r6,zero,67e4 <__umodsi3+0x4c>
    67b4:	28000516 	blt	r5,zero,67cc <__umodsi3+0x34>
    67b8:	294b883a 	add	r5,r5,r5
    67bc:	31bfffc4 	addi	r6,r6,-1
    67c0:	18c7883a 	add	r3,r3,r3
    67c4:	293ffa36 	bltu	r5,r4,67b0 <__alt_mem_onchip_memory2_0+0xf7c027b0>
    67c8:	18000626 	beq	r3,zero,67e4 <__umodsi3+0x4c>
    67cc:	1806d07a 	srli	r3,r3,1
    67d0:	11400136 	bltu	r2,r5,67d8 <__umodsi3+0x40>
    67d4:	1145c83a 	sub	r2,r2,r5
    67d8:	280ad07a 	srli	r5,r5,1
    67dc:	183ffb1e 	bne	r3,zero,67cc <__alt_mem_onchip_memory2_0+0xf7c027cc>
    67e0:	f800283a 	ret
    67e4:	f800283a 	ret
    67e8:	00c00044 	movi	r3,1
    67ec:	003ff706 	br	67cc <__alt_mem_onchip_memory2_0+0xf7c027cc>

000067f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    67f0:	defffd04 	addi	sp,sp,-12
    67f4:	df000215 	stw	fp,8(sp)
    67f8:	df000204 	addi	fp,sp,8
    67fc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    6800:	0001883a 	nop
    6804:	e0bfff17 	ldw	r2,-4(fp)
    6808:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    680c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    6810:	10000226 	beq	r2,zero,681c <_exit+0x2c>
    ALT_SIM_FAIL();
    6814:	002af070 	cmpltui	zero,zero,43969
    6818:	00000106 	br	6820 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    681c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    6820:	003fff06 	br	6820 <__alt_mem_onchip_memory2_0+0xf7c02820>

00006824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6824:	defffe04 	addi	sp,sp,-8
    6828:	dfc00115 	stw	ra,4(sp)
    682c:	df000015 	stw	fp,0(sp)
    6830:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6834:	d0a00517 	ldw	r2,-32748(gp)
    6838:	10000326 	beq	r2,zero,6848 <alt_get_errno+0x24>
    683c:	d0a00517 	ldw	r2,-32748(gp)
    6840:	103ee83a 	callr	r2
    6844:	00000106 	br	684c <alt_get_errno+0x28>
    6848:	d0a6e404 	addi	r2,gp,-25712
}
    684c:	e037883a 	mov	sp,fp
    6850:	dfc00117 	ldw	ra,4(sp)
    6854:	df000017 	ldw	fp,0(sp)
    6858:	dec00204 	addi	sp,sp,8
    685c:	f800283a 	ret

00006860 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    6860:	defffb04 	addi	sp,sp,-20
    6864:	dfc00415 	stw	ra,16(sp)
    6868:	df000315 	stw	fp,12(sp)
    686c:	df000304 	addi	fp,sp,12
    6870:	e13ffe15 	stw	r4,-8(fp)
    6874:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6878:	e0bffe17 	ldw	r2,-8(fp)
    687c:	10000616 	blt	r2,zero,6898 <fstat+0x38>
    6880:	e0bffe17 	ldw	r2,-8(fp)
    6884:	10c00324 	muli	r3,r2,12
    6888:	008000b4 	movhi	r2,2
    688c:	10bdf604 	addi	r2,r2,-2088
    6890:	1885883a 	add	r2,r3,r2
    6894:	00000106 	br	689c <fstat+0x3c>
    6898:	0005883a 	mov	r2,zero
    689c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    68a0:	e0bffd17 	ldw	r2,-12(fp)
    68a4:	10001026 	beq	r2,zero,68e8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    68a8:	e0bffd17 	ldw	r2,-12(fp)
    68ac:	10800017 	ldw	r2,0(r2)
    68b0:	10800817 	ldw	r2,32(r2)
    68b4:	10000726 	beq	r2,zero,68d4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    68b8:	e0bffd17 	ldw	r2,-12(fp)
    68bc:	10800017 	ldw	r2,0(r2)
    68c0:	10800817 	ldw	r2,32(r2)
    68c4:	e17fff17 	ldw	r5,-4(fp)
    68c8:	e13ffd17 	ldw	r4,-12(fp)
    68cc:	103ee83a 	callr	r2
    68d0:	00000a06 	br	68fc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    68d4:	e0bfff17 	ldw	r2,-4(fp)
    68d8:	00c80004 	movi	r3,8192
    68dc:	10c00115 	stw	r3,4(r2)
      return 0;
    68e0:	0005883a 	mov	r2,zero
    68e4:	00000506 	br	68fc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    68e8:	00068240 	call	6824 <alt_get_errno>
    68ec:	1007883a 	mov	r3,r2
    68f0:	00801444 	movi	r2,81
    68f4:	18800015 	stw	r2,0(r3)
    return -1;
    68f8:	00bfffc4 	movi	r2,-1
  }
}
    68fc:	e037883a 	mov	sp,fp
    6900:	dfc00117 	ldw	ra,4(sp)
    6904:	df000017 	ldw	fp,0(sp)
    6908:	dec00204 	addi	sp,sp,8
    690c:	f800283a 	ret

00006910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6910:	defffe04 	addi	sp,sp,-8
    6914:	dfc00115 	stw	ra,4(sp)
    6918:	df000015 	stw	fp,0(sp)
    691c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6920:	d0a00517 	ldw	r2,-32748(gp)
    6924:	10000326 	beq	r2,zero,6934 <alt_get_errno+0x24>
    6928:	d0a00517 	ldw	r2,-32748(gp)
    692c:	103ee83a 	callr	r2
    6930:	00000106 	br	6938 <alt_get_errno+0x28>
    6934:	d0a6e404 	addi	r2,gp,-25712
}
    6938:	e037883a 	mov	sp,fp
    693c:	dfc00117 	ldw	ra,4(sp)
    6940:	df000017 	ldw	fp,0(sp)
    6944:	dec00204 	addi	sp,sp,8
    6948:	f800283a 	ret

0000694c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    694c:	deffed04 	addi	sp,sp,-76
    6950:	dfc01215 	stw	ra,72(sp)
    6954:	df001115 	stw	fp,68(sp)
    6958:	df001104 	addi	fp,sp,68
    695c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6960:	e0bfff17 	ldw	r2,-4(fp)
    6964:	10000616 	blt	r2,zero,6980 <isatty+0x34>
    6968:	e0bfff17 	ldw	r2,-4(fp)
    696c:	10c00324 	muli	r3,r2,12
    6970:	008000b4 	movhi	r2,2
    6974:	10bdf604 	addi	r2,r2,-2088
    6978:	1885883a 	add	r2,r3,r2
    697c:	00000106 	br	6984 <isatty+0x38>
    6980:	0005883a 	mov	r2,zero
    6984:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    6988:	e0bfef17 	ldw	r2,-68(fp)
    698c:	10000e26 	beq	r2,zero,69c8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    6990:	e0bfef17 	ldw	r2,-68(fp)
    6994:	10800017 	ldw	r2,0(r2)
    6998:	10800817 	ldw	r2,32(r2)
    699c:	1000021e 	bne	r2,zero,69a8 <isatty+0x5c>
    {
      return 1;
    69a0:	00800044 	movi	r2,1
    69a4:	00000d06 	br	69dc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    69a8:	e0bff004 	addi	r2,fp,-64
    69ac:	100b883a 	mov	r5,r2
    69b0:	e13fff17 	ldw	r4,-4(fp)
    69b4:	00068600 	call	6860 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    69b8:	e0bff117 	ldw	r2,-60(fp)
    69bc:	10880020 	cmpeqi	r2,r2,8192
    69c0:	10803fcc 	andi	r2,r2,255
    69c4:	00000506 	br	69dc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    69c8:	00069100 	call	6910 <alt_get_errno>
    69cc:	1007883a 	mov	r3,r2
    69d0:	00801444 	movi	r2,81
    69d4:	18800015 	stw	r2,0(r3)
    return 0;
    69d8:	0005883a 	mov	r2,zero
  }
}
    69dc:	e037883a 	mov	sp,fp
    69e0:	dfc00117 	ldw	ra,4(sp)
    69e4:	df000017 	ldw	fp,0(sp)
    69e8:	dec00204 	addi	sp,sp,8
    69ec:	f800283a 	ret

000069f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    69f0:	defffe04 	addi	sp,sp,-8
    69f4:	dfc00115 	stw	ra,4(sp)
    69f8:	df000015 	stw	fp,0(sp)
    69fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6a00:	d0a00517 	ldw	r2,-32748(gp)
    6a04:	10000326 	beq	r2,zero,6a14 <alt_get_errno+0x24>
    6a08:	d0a00517 	ldw	r2,-32748(gp)
    6a0c:	103ee83a 	callr	r2
    6a10:	00000106 	br	6a18 <alt_get_errno+0x28>
    6a14:	d0a6e404 	addi	r2,gp,-25712
}
    6a18:	e037883a 	mov	sp,fp
    6a1c:	dfc00117 	ldw	ra,4(sp)
    6a20:	df000017 	ldw	fp,0(sp)
    6a24:	dec00204 	addi	sp,sp,8
    6a28:	f800283a 	ret

00006a2c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    6a2c:	defff904 	addi	sp,sp,-28
    6a30:	dfc00615 	stw	ra,24(sp)
    6a34:	df000515 	stw	fp,20(sp)
    6a38:	df000504 	addi	fp,sp,20
    6a3c:	e13ffd15 	stw	r4,-12(fp)
    6a40:	e17ffe15 	stw	r5,-8(fp)
    6a44:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    6a48:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6a4c:	e0bffd17 	ldw	r2,-12(fp)
    6a50:	10000616 	blt	r2,zero,6a6c <lseek+0x40>
    6a54:	e0bffd17 	ldw	r2,-12(fp)
    6a58:	10c00324 	muli	r3,r2,12
    6a5c:	008000b4 	movhi	r2,2
    6a60:	10bdf604 	addi	r2,r2,-2088
    6a64:	1885883a 	add	r2,r3,r2
    6a68:	00000106 	br	6a70 <lseek+0x44>
    6a6c:	0005883a 	mov	r2,zero
    6a70:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    6a74:	e0bffc17 	ldw	r2,-16(fp)
    6a78:	10001026 	beq	r2,zero,6abc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    6a7c:	e0bffc17 	ldw	r2,-16(fp)
    6a80:	10800017 	ldw	r2,0(r2)
    6a84:	10800717 	ldw	r2,28(r2)
    6a88:	10000926 	beq	r2,zero,6ab0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    6a8c:	e0bffc17 	ldw	r2,-16(fp)
    6a90:	10800017 	ldw	r2,0(r2)
    6a94:	10800717 	ldw	r2,28(r2)
    6a98:	e1bfff17 	ldw	r6,-4(fp)
    6a9c:	e17ffe17 	ldw	r5,-8(fp)
    6aa0:	e13ffc17 	ldw	r4,-16(fp)
    6aa4:	103ee83a 	callr	r2
    6aa8:	e0bffb15 	stw	r2,-20(fp)
    6aac:	00000506 	br	6ac4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    6ab0:	00bfde84 	movi	r2,-134
    6ab4:	e0bffb15 	stw	r2,-20(fp)
    6ab8:	00000206 	br	6ac4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    6abc:	00bfebc4 	movi	r2,-81
    6ac0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    6ac4:	e0bffb17 	ldw	r2,-20(fp)
    6ac8:	1000070e 	bge	r2,zero,6ae8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    6acc:	00069f00 	call	69f0 <alt_get_errno>
    6ad0:	1007883a 	mov	r3,r2
    6ad4:	e0bffb17 	ldw	r2,-20(fp)
    6ad8:	0085c83a 	sub	r2,zero,r2
    6adc:	18800015 	stw	r2,0(r3)
    rc = -1;
    6ae0:	00bfffc4 	movi	r2,-1
    6ae4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    6ae8:	e0bffb17 	ldw	r2,-20(fp)
}
    6aec:	e037883a 	mov	sp,fp
    6af0:	dfc00117 	ldw	ra,4(sp)
    6af4:	df000017 	ldw	fp,0(sp)
    6af8:	dec00204 	addi	sp,sp,8
    6afc:	f800283a 	ret

00006b00 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    6b00:	defffe04 	addi	sp,sp,-8
    6b04:	df000115 	stw	fp,4(sp)
    6b08:	df000104 	addi	fp,sp,4
    6b0c:	e13fff15 	stw	r4,-4(fp)
}
    6b10:	0001883a 	nop
    6b14:	e037883a 	mov	sp,fp
    6b18:	df000017 	ldw	fp,0(sp)
    6b1c:	dec00104 	addi	sp,sp,4
    6b20:	f800283a 	ret

00006b24 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    6b24:	defffe04 	addi	sp,sp,-8
    6b28:	df000115 	stw	fp,4(sp)
    6b2c:	df000104 	addi	fp,sp,4
    6b30:	e13fff15 	stw	r4,-4(fp)
}
    6b34:	0001883a 	nop
    6b38:	e037883a 	mov	sp,fp
    6b3c:	df000017 	ldw	fp,0(sp)
    6b40:	dec00104 	addi	sp,sp,4
    6b44:	f800283a 	ret

00006b48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6b48:	defffe04 	addi	sp,sp,-8
    6b4c:	dfc00115 	stw	ra,4(sp)
    6b50:	df000015 	stw	fp,0(sp)
    6b54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6b58:	d0a00517 	ldw	r2,-32748(gp)
    6b5c:	10000326 	beq	r2,zero,6b6c <alt_get_errno+0x24>
    6b60:	d0a00517 	ldw	r2,-32748(gp)
    6b64:	103ee83a 	callr	r2
    6b68:	00000106 	br	6b70 <alt_get_errno+0x28>
    6b6c:	d0a6e404 	addi	r2,gp,-25712
}
    6b70:	e037883a 	mov	sp,fp
    6b74:	dfc00117 	ldw	ra,4(sp)
    6b78:	df000017 	ldw	fp,0(sp)
    6b7c:	dec00204 	addi	sp,sp,8
    6b80:	f800283a 	ret

00006b84 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    6b84:	defff904 	addi	sp,sp,-28
    6b88:	dfc00615 	stw	ra,24(sp)
    6b8c:	df000515 	stw	fp,20(sp)
    6b90:	df000504 	addi	fp,sp,20
    6b94:	e13ffd15 	stw	r4,-12(fp)
    6b98:	e17ffe15 	stw	r5,-8(fp)
    6b9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6ba0:	e0bffd17 	ldw	r2,-12(fp)
    6ba4:	10000616 	blt	r2,zero,6bc0 <read+0x3c>
    6ba8:	e0bffd17 	ldw	r2,-12(fp)
    6bac:	10c00324 	muli	r3,r2,12
    6bb0:	008000b4 	movhi	r2,2
    6bb4:	10bdf604 	addi	r2,r2,-2088
    6bb8:	1885883a 	add	r2,r3,r2
    6bbc:	00000106 	br	6bc4 <read+0x40>
    6bc0:	0005883a 	mov	r2,zero
    6bc4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    6bc8:	e0bffb17 	ldw	r2,-20(fp)
    6bcc:	10002226 	beq	r2,zero,6c58 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    6bd0:	e0bffb17 	ldw	r2,-20(fp)
    6bd4:	10800217 	ldw	r2,8(r2)
    6bd8:	108000cc 	andi	r2,r2,3
    6bdc:	10800060 	cmpeqi	r2,r2,1
    6be0:	1000181e 	bne	r2,zero,6c44 <read+0xc0>
        (fd->dev->read))
    6be4:	e0bffb17 	ldw	r2,-20(fp)
    6be8:	10800017 	ldw	r2,0(r2)
    6bec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    6bf0:	10001426 	beq	r2,zero,6c44 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    6bf4:	e0bffb17 	ldw	r2,-20(fp)
    6bf8:	10800017 	ldw	r2,0(r2)
    6bfc:	10800517 	ldw	r2,20(r2)
    6c00:	e0ffff17 	ldw	r3,-4(fp)
    6c04:	180d883a 	mov	r6,r3
    6c08:	e17ffe17 	ldw	r5,-8(fp)
    6c0c:	e13ffb17 	ldw	r4,-20(fp)
    6c10:	103ee83a 	callr	r2
    6c14:	e0bffc15 	stw	r2,-16(fp)
    6c18:	e0bffc17 	ldw	r2,-16(fp)
    6c1c:	1000070e 	bge	r2,zero,6c3c <read+0xb8>
        {
          ALT_ERRNO = -rval;
    6c20:	0006b480 	call	6b48 <alt_get_errno>
    6c24:	1007883a 	mov	r3,r2
    6c28:	e0bffc17 	ldw	r2,-16(fp)
    6c2c:	0085c83a 	sub	r2,zero,r2
    6c30:	18800015 	stw	r2,0(r3)
          return -1;
    6c34:	00bfffc4 	movi	r2,-1
    6c38:	00000c06 	br	6c6c <read+0xe8>
        }
        return rval;
    6c3c:	e0bffc17 	ldw	r2,-16(fp)
    6c40:	00000a06 	br	6c6c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    6c44:	0006b480 	call	6b48 <alt_get_errno>
    6c48:	1007883a 	mov	r3,r2
    6c4c:	00800344 	movi	r2,13
    6c50:	18800015 	stw	r2,0(r3)
    6c54:	00000406 	br	6c68 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    6c58:	0006b480 	call	6b48 <alt_get_errno>
    6c5c:	1007883a 	mov	r3,r2
    6c60:	00801444 	movi	r2,81
    6c64:	18800015 	stw	r2,0(r3)
  }
  return -1;
    6c68:	00bfffc4 	movi	r2,-1
}
    6c6c:	e037883a 	mov	sp,fp
    6c70:	dfc00117 	ldw	ra,4(sp)
    6c74:	df000017 	ldw	fp,0(sp)
    6c78:	dec00204 	addi	sp,sp,8
    6c7c:	f800283a 	ret

00006c80 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    6c80:	defff904 	addi	sp,sp,-28
    6c84:	df000615 	stw	fp,24(sp)
    6c88:	df000604 	addi	fp,sp,24
    6c8c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6c90:	0005303a 	rdctl	r2,status
    6c94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6c98:	e0fffe17 	ldw	r3,-8(fp)
    6c9c:	00bfff84 	movi	r2,-2
    6ca0:	1884703a 	and	r2,r3,r2
    6ca4:	1001703a 	wrctl	status,r2
  
  return context;
    6ca8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    6cac:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    6cb0:	d0a00d17 	ldw	r2,-32716(gp)
    6cb4:	10c000c4 	addi	r3,r2,3
    6cb8:	00bfff04 	movi	r2,-4
    6cbc:	1884703a 	and	r2,r3,r2
    6cc0:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    6cc4:	d0e00d17 	ldw	r3,-32716(gp)
    6cc8:	e0bfff17 	ldw	r2,-4(fp)
    6ccc:	1887883a 	add	r3,r3,r2
    6cd0:	00820034 	movhi	r2,2048
    6cd4:	10800004 	addi	r2,r2,0
    6cd8:	10c0062e 	bgeu	r2,r3,6cf4 <sbrk+0x74>
    6cdc:	e0bffb17 	ldw	r2,-20(fp)
    6ce0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6ce4:	e0bffa17 	ldw	r2,-24(fp)
    6ce8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    6cec:	00bfffc4 	movi	r2,-1
    6cf0:	00000b06 	br	6d20 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    6cf4:	d0a00d17 	ldw	r2,-32716(gp)
    6cf8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    6cfc:	d0e00d17 	ldw	r3,-32716(gp)
    6d00:	e0bfff17 	ldw	r2,-4(fp)
    6d04:	1885883a 	add	r2,r3,r2
    6d08:	d0a00d15 	stw	r2,-32716(gp)
    6d0c:	e0bffb17 	ldw	r2,-20(fp)
    6d10:	e0bffc15 	stw	r2,-16(fp)
    6d14:	e0bffc17 	ldw	r2,-16(fp)
    6d18:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    6d1c:	e0bffd17 	ldw	r2,-12(fp)
} 
    6d20:	e037883a 	mov	sp,fp
    6d24:	df000017 	ldw	fp,0(sp)
    6d28:	dec00104 	addi	sp,sp,4
    6d2c:	f800283a 	ret

00006d30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6d30:	defffe04 	addi	sp,sp,-8
    6d34:	dfc00115 	stw	ra,4(sp)
    6d38:	df000015 	stw	fp,0(sp)
    6d3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6d40:	d0a00517 	ldw	r2,-32748(gp)
    6d44:	10000326 	beq	r2,zero,6d54 <alt_get_errno+0x24>
    6d48:	d0a00517 	ldw	r2,-32748(gp)
    6d4c:	103ee83a 	callr	r2
    6d50:	00000106 	br	6d58 <alt_get_errno+0x28>
    6d54:	d0a6e404 	addi	r2,gp,-25712
}
    6d58:	e037883a 	mov	sp,fp
    6d5c:	dfc00117 	ldw	ra,4(sp)
    6d60:	df000017 	ldw	fp,0(sp)
    6d64:	dec00204 	addi	sp,sp,8
    6d68:	f800283a 	ret

00006d6c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    6d6c:	defff904 	addi	sp,sp,-28
    6d70:	dfc00615 	stw	ra,24(sp)
    6d74:	df000515 	stw	fp,20(sp)
    6d78:	df000504 	addi	fp,sp,20
    6d7c:	e13ffd15 	stw	r4,-12(fp)
    6d80:	e17ffe15 	stw	r5,-8(fp)
    6d84:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6d88:	e0bffd17 	ldw	r2,-12(fp)
    6d8c:	10000616 	blt	r2,zero,6da8 <write+0x3c>
    6d90:	e0bffd17 	ldw	r2,-12(fp)
    6d94:	10c00324 	muli	r3,r2,12
    6d98:	008000b4 	movhi	r2,2
    6d9c:	10bdf604 	addi	r2,r2,-2088
    6da0:	1885883a 	add	r2,r3,r2
    6da4:	00000106 	br	6dac <write+0x40>
    6da8:	0005883a 	mov	r2,zero
    6dac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    6db0:	e0bffb17 	ldw	r2,-20(fp)
    6db4:	10002126 	beq	r2,zero,6e3c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    6db8:	e0bffb17 	ldw	r2,-20(fp)
    6dbc:	10800217 	ldw	r2,8(r2)
    6dc0:	108000cc 	andi	r2,r2,3
    6dc4:	10001826 	beq	r2,zero,6e28 <write+0xbc>
    6dc8:	e0bffb17 	ldw	r2,-20(fp)
    6dcc:	10800017 	ldw	r2,0(r2)
    6dd0:	10800617 	ldw	r2,24(r2)
    6dd4:	10001426 	beq	r2,zero,6e28 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    6dd8:	e0bffb17 	ldw	r2,-20(fp)
    6ddc:	10800017 	ldw	r2,0(r2)
    6de0:	10800617 	ldw	r2,24(r2)
    6de4:	e0ffff17 	ldw	r3,-4(fp)
    6de8:	180d883a 	mov	r6,r3
    6dec:	e17ffe17 	ldw	r5,-8(fp)
    6df0:	e13ffb17 	ldw	r4,-20(fp)
    6df4:	103ee83a 	callr	r2
    6df8:	e0bffc15 	stw	r2,-16(fp)
    6dfc:	e0bffc17 	ldw	r2,-16(fp)
    6e00:	1000070e 	bge	r2,zero,6e20 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    6e04:	0006d300 	call	6d30 <alt_get_errno>
    6e08:	1007883a 	mov	r3,r2
    6e0c:	e0bffc17 	ldw	r2,-16(fp)
    6e10:	0085c83a 	sub	r2,zero,r2
    6e14:	18800015 	stw	r2,0(r3)
        return -1;
    6e18:	00bfffc4 	movi	r2,-1
    6e1c:	00000c06 	br	6e50 <write+0xe4>
      }
      return rval;
    6e20:	e0bffc17 	ldw	r2,-16(fp)
    6e24:	00000a06 	br	6e50 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    6e28:	0006d300 	call	6d30 <alt_get_errno>
    6e2c:	1007883a 	mov	r3,r2
    6e30:	00800344 	movi	r2,13
    6e34:	18800015 	stw	r2,0(r3)
    6e38:	00000406 	br	6e4c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    6e3c:	0006d300 	call	6d30 <alt_get_errno>
    6e40:	1007883a 	mov	r3,r2
    6e44:	00801444 	movi	r2,81
    6e48:	18800015 	stw	r2,0(r3)
  }
  return -1;
    6e4c:	00bfffc4 	movi	r2,-1
}
    6e50:	e037883a 	mov	sp,fp
    6e54:	dfc00117 	ldw	ra,4(sp)
    6e58:	df000017 	ldw	fp,0(sp)
    6e5c:	dec00204 	addi	sp,sp,8
    6e60:	f800283a 	ret
